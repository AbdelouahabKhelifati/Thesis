#ifndef __FILE_TABLE_H__
#define __FILE_TABLE_H__

#include "sqlcpp.h"

using namespace McoSql;

#define MAX_RECORD_SIZE 1024

class FileRecord;
class FileTable;
class FileCursor;

class FileField : public Field
{
    friend class FileRecord;
    friend class FileTable;
  public:
    virtual size_t position();
    virtual String* name();
    virtual Type type();
    virtual Table* table();
    virtual Field* scope();
    virtual McoSql::ValueRef get(Struct* rec);
    virtual McoSql::Value* getCopy(Struct* rec);
    virtual void set(Struct* rec, McoSql::Value* val, bool append);
    virtual McoSql::Value* update(Struct* rec);
    virtual String* referencedTableName();
    virtual Vector < Field > * components();
    virtual Type elementType();
    virtual int  elementSize();
    virtual Field* element();
    virtual int precision();
    virtual int width();
    virtual SortOrder order();
    virtual int fixedSize();
    virtual bool isAutoGenerated();
    virtual bool isNullable();

  protected:
    DESTROY(FileField)

  private:
    int         _id;
    char const* _name;
    Type        _type;
    FileTable*  _table;
    int         _size;
    int         _offset;
};

class FileRecord : public Record 
{
    friend class FileField;
    friend class FileTable;
    friend class FileCursor;
  public:
    virtual int nComponents();
    virtual McoSql::ValueRef get(size_t index);
    virtual McoSql::Value* getCopy(size_t index);
    virtual McoSql::Value* update(size_t index);
    virtual void set(size_t index, McoSql::Value* value, bool append);
    virtual McoSql::Struct* source();
    virtual void deleteRecord();
    virtual void updateRecord();
    virtual size_t size();
	virtual Value* clone(Allocator* allocator);

    FileRecord(Allocator* allocator, FileTable* table, int tell);

  protected:
    DESTROY(FileRecord)
    McoSql::Value* createValue(size_t index);

  private:
    FileTable* _table;
    char       _data[MAX_RECORD_SIZE];
    int        _tell;
};

class FileCursor : public Cursor
{
  public:
    virtual bool hasNext();
    virtual McoSql::Record* next();

    FileCursor(Allocator* allocator, FileTable* table);

  protected:
    DESTROY(FileCursor)

  private:
    FileRecord* _next;
    FileTable* _table;
    int _tell;
};

class FileTable : public Table
{
    friend class FileRecord;
    friend class FileCursor;

  public:
    struct FieldDescriptor 
    {
        char const*  name;
        size_t       size;
        Type type;
    };

    virtual Vector < Field > * fields();
    virtual Cursor* cursor(Runtime* runtime);
    virtual int64_t nRecords(Runtime* runtime);
    virtual bool isNumberOfRecordsKnown();
    virtual int compareRID(Record* r1, Record* r2);
    virtual Reference* getRID(Record* rec);
    virtual bool isRIDAvailable();
    virtual String* name();
    virtual Vector < Index > * indexes();
    virtual void drop(Transaction* trans);
    virtual void updateRecord(Transaction* trans, Record* rec);
    virtual void deleteRecord(Transaction* trans, Record* rec);
    virtual void deleteAllRecords(Transaction* trans);
    virtual Record* createRecord(Allocator* allocator, Transaction* trans);
    virtual Vector < Constraint > * constraints();
    
    FileTable(Allocator* allocator, char const* name, char const* filePath, FieldDescriptor* fields, int nFields);
    ~FileTable();

  protected:
    DESTROY(FileTable)

  private:
    char const* _path;
    char const* _name;
    Vector<Field>* _fields;
    int _recordSize;
};

#endif
