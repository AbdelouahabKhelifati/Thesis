/************************************************************
 *                                                          *
 * Copyright (c) 2001-2019 McObject LLC. All Right Reserved.*
 *                                                          *
 ************************************************************/

#define int1        signed<1>
#define int2        signed<2>
#define int4        signed<4>
#define uint8       unsigned<8>
#define uint4       unsigned<4>
#define uint2       unsigned<2>
#define uint1       unsigned<1>

declare database    calc_db;

// This sample demonstrates vectors and indexes based on vectors

struct AnotherStruct
{
    vector<uint8> vui;
    uint1 ui;
};

struct Item
{
    uint4 id;
    AnotherStruct ps;
    vector<uint8> vui;
};

struct Id {
    uint4 key;
};
declare oid Id[1000];

struct InStruct {
    date d;
    float f;
    Item i;
};

struct MyStruct
{
    uint8 a;
    string b;
    vector< date > c;
};

class Box
{
    string  name;

    vector< string >   owners;					  // history of the box owners
    vector< uint4 >    repairYears;				  // history of the box repairs
    vector< uint2 >    colors;					  // all outside colors
    vector< char<5> >  zipcodes;				  // history of the box locations

    vector< Item >     items;					  // things in the box

    tree< owners, name >      I_owners;			  // owner and name of the box sorted
    tree< repairYears  >      I_ryears;
    tree< colors >            I_colors;
};

class HashedObj
{
    uint4 key;
    vector<uint4> v;
    MyStruct c[2];

    hash <key> hkey[1000];
};

class TriedObj
{
    uint4 key;

    InStruct is;
    string test;

    tree <key> tkey;
};

class ListedObj
{
    uint4 key;

    list;
};

class AutoidedObj
{
    uint4 key;

    autoid[2000];
};

class OIDedObj
{
    oid;

    uint4 key;
    string tmp;

    hash <tmp> h[1000];
};

class TestClass
{
    uint2 i;
    string str;

    hash <str> hstr[100];
};

class Route
{
   uint4 dest;
   uint4 mask;
   uint4 gateway;
   uint4 interf;
   uint2 metric;
   uint8 zzz;

   hash <zzz> zkey[1000];
   hash <mask, dest> byMaskDest[1000];
};

class ComplexObj
{
    uint4 key;

    hash <key> hkey[1000];
    tree <key> tkey;
    autoid[2000];
    list;
};

calculator {
   HashedObj<150>,
   ListedObj<200>,
   AutoidedObj<100>,
   OIDedObj<129>,
   TestClass<98>,
   Box<100>,
   Route<240>,
   ComplexObj<100>
};
