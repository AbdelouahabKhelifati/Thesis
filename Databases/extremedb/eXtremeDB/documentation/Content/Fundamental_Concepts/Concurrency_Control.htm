<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="eXtremeDB Fundamental Concepts">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Concurrency Control and Transactions</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Concurrency Control and Transactions</h1>
            <blockquote>
                <p>Concurrency is defined as the ability for multiple tasks to access shared data simultaneously.  Database concurrency control in <i>e</i>X<i>treme</i>DB is implemented through database transactions.  <i>e</i>X<i>treme</i>DB Transaction Managers ensure that database transactions are performed concurrently without violating data integrity and that transactions adhere to <span class="Param"><a href="http://en.wikipedia.org/wiki/ACID" title="Wikipedia definiton of ACID" alt="Wikipedia definiton of ACID">ACID</a></span> principles).</p>
                <p>There are traditionally two models for database concurrency: <i style="font-weight: bold;">optimistic</i> and <i style="font-weight: bold;">pessimistic</i>.  Pessimistic concurrency control works on the assumption that data modification operations are <i>likely</i> to affect any read operation made by a different task; the database system pessimistically assumes that a conflict will occur. <i>e</i>X<i>treme</i>DB behavior when using pessimistic concurrency control is to use locks and block access to the database when any data is modified.</p>
                <p>Optimistic concurrency control works on the assumption that data modifications are <i>unlikely</i><a name="kanchor29"></a> (although possible) to interfere with any other task reading or modifying data.  The runtime behavior when using optimistic concurrency control is to use versioning to allow read operations to see the state of the data before the modification took place.</p>
                <p>To allow developers the best choice of concurrency control, <i>e</i>X<i>treme</i>DB provides three transaction managers, implemented as separate libraries, which makes it easy for applications to use one or the other by simply linking with the appropriate library:</p>
                <ul>
                    <li value="1"><code><a name="kanchor30"></a>MURSIW</code> (<b>MU</b>ltiple <b>R</b>eaders <b>SI</b>ngle <b>W</b>riter): a traditional lock-based (pessimistic) transaction manager, </li>
                    <li value="2"><code><a name="kanchor31"></a>MVCC</code> (<b>M</b>ulti-<b>V</b>ersion <b>C</b>oncurrency <b>C</b>ontrol): an optimistic transaction manager, and</li>
                    <li value="3"><code>EXCL</code> (<b>EXCL</b>usive): one task at a time may access the database for reading or writing.</li>
                </ul>
                <p>(The transaction managers are discussed in detail in the <a href="../Users_Guides/Users_Guides.htm"><i>e</i>X<i>treme</i>DB User's Guide</a>.)</p>
                <h2>MURSIW</h2>
                <p><code>MURSIW</code>, the traditional, lock-based transaction manager, is implemented as a simple queue.  Transactions initiated by applications are added into a queue that is sorted based on the transaction priorities  and within each priority, chronologically.  This approach to concurrency allows the <code>MURSIW</code> transaction manager to simplify locking mechanisms, eliminating overhead due to resource-consuming complex lock arbitration and deadlock prevention algorithms.  This extremely lightweight transaction manager is ideal for many in-memory databases and persistent databases with few concurrent transactions, and for databases that are entirely or predominantly read-only.</p>
                <p>Within a priority segment of the transaction queue, read-only transactions are executed simultaneously.  Each write transaction is scheduled in its turn and has exclusive use of the database during its transaction. Serialization of write transactions is transparent to the application programmer.  Because the transaction manager is “light”, properly designed and implemented application transactions execute swiftly and serialization is not a performance concern.</p>
                <p>Imagine that the transaction queue has the following transaction types queued:</p>
                <p>
                    <img src="../Resources/Images/MURSIW_scheduling.png" />
                </p>
                <p>All the transactions in group ‘A’ will execute in parallel.  When all three transactions have completed, transaction ‘B’ will be scheduled.  When ‘B’ has completed, all the transactions in group ‘C’ will be scheduled and execute in parallel.  When all of the ‘B’ transactions have completed, the ‘D’ transaction will be scheduled.  Any new transactions that are started will enter the queue behind ‘D’ (subject to transaction priorities, of course).</p>
                <h2>MVCC</h2>
                <p>The <code>MVCC</code> transaction manager enhances applications’ database concurrency management options.  With the <code>MVCC</code> model, while querying a database each transaction sees a snapshot of committed data, regardless of any in-progress transactions belonging to other tasks.  This protects the transaction from viewing inconsistent data that could be caused by other transaction updates on the same set of objects or indexes, thus providing transaction isolation for each transaction.  The <code>MVCC</code> manager allows applications to choose how transactions are isolated from each other by setting the <a href="../Users_Guides/Core/Isolation_Levels.htm">transaction isolation level</a> at runtime.</p>
                <h2>Locking optimization</h2>
                <p><i>e</i>X<i>treme</i>DB uses two kinds of synchronization primitives - <b style="font-style: italic;">latches</b> and <i style="font-weight: bold;">locks</i>. The first kind (latch) is a lightweight lock implemented with atomic instructions.  It is used, for example, in tree indexes to lock branches.  The second kind (lock) is a full size synchronization primitive implemented with kernel-locks (and/or lightweight atomics for performance, if possible).  One lock is used for the <i>e</i>X<i>treme</i>DB registry and database header, but all other locks applied during transaction processing depend on the choice of Transaction Manager:</p>
                <ul>
                    <li value="1"><code>MVCC</code> - multiple latches in indexes, multiple latches/locks in transaction processing.</li>
                    <li value="2"><code>MURSIW</code> – no latches in indexes, multiple latches/locks (but fewer than MVCC) in transaction processing.</li>
                    <li value="3"><code>EXCL</code> - no latches in indexes, one single lock on the transaction queue</li>
                </ul>
                <p>For single-threaded and single-process applications, it is possible to eliminate latches and locks completely by employing the EXCLusive Transaction Manager and/or “hollow” synchronization implementation.  (A sample “hollow” synchronization implementation that makes no kernel calls nor atomic operations or <a href="Spinlock.htm">spinlocks</a> is provided as a template for custom user-defined synchronization.)</p>
                <p>The developer has complete choice regarding the transaction manager and lock implementations by selecting the transaction manager and synchronization implementation libraries.  Most likely the choice will be between <code>MURSIW</code> and <code>MVCC</code> based on the characteristics of the application.  For applications having mostly read-only transactions with occasional updates, <code>MURSIW</code> may be the best choice.  If there are a relatively high number of concurrent processes / threads attempting to modify the database at the same time, then <code>MVCC</code> will probably be the better choice.</p>
                <p>One can experiment between the transaction managers by simply linking the appropriate library.  No application code changes are needed (except to handle conflict errors if <code>MVCC</code> is ultimately the choice).</p>
                <p>Please see the <a href="../Users_Guides/Core/Concurrency_Transaction_Managers.htm"><i>e</i>X<i>treme</i>DB User's Guide</a> pages for further explanation and transaction manager implementation details.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>