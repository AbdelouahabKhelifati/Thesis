<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB Product Family</title>
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../Resources/Scripts/require.min.js">
        </script>
        <script src="../Resources/Scripts/require.config.js">
        </script>
        <script src="../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The <i>e</i>X<i>treme</i>DB<span style="font-size: 11pt;">®</span> Product Family</h1>
            <p>&#160;</p>
            <p> Real-time and embedded software manages growing volumes of complex data, to support advanced application features. The need for performance and reliability, on shorter product development cycles, is driving more organizations to incorporate proven, commercial off-the-shelf (COTS) database system components in their designs. The <i>e</i>X<i>treme</i>DB database management system product family combines extreme performance, reliability and developer efficiency in an industrial strength database engine.</p>
            <p><a href="Users_Guides/Embedded_Core_Users_Guide.htm"><i>e</i>X<i>treme</i>DB <i>Embedded</i></a> is McObject's core product. It is designed for performance, with in-memory and/or persistent storage. With the C/C++ native API, data is stored and manipulated exactly in the form used by the application, removing the overheads of caching and translation. (Read below about <i>e</i>X<i>treme</i>SQL.) Typical read and write accesses are at the level of a few microseconds, or less. The engine is reentrant, allowing for multiple execution threads, with transactions supporting the ACID properties for data integrity. Native C/C++ data types are supported, along with several higher level data types such as <code>string</code>, <code>datetime</code>, and support for <a href="Users_Guides/Core/Features/Vertical_Storage.htm">vertical (columnar) storage</a> of time series data (e.g. for Internet of Things (IoT), Financial and other use cases).</p>
            <p>An in-memory database system offers superior performance and the possibility of very small RAM, CPU and storage demands. In-memory databases boost speed by eliminating file system I/O, multiple data copies, and redundant processes, such as caching. This streamlined design can also dramatically reduce system footprint.</p>
            <p><i>e</i>X<i>treme</i>DB enables the developer to combine in-memory and persistent storage in a single database. Persistent storage database management systems cache frequently requested data in memory, for faster access, but write database inserts, updates and deletes through the cache to persistent storage. Byte-for-byte, disk storage costs less than memory, and requires less physical space: RAM chips can’t yet approach the density of a micro-drive, for instance. So for small form-factor devices with large storage needs, and for so-called “Big Data”, such “spinning memory” can be better.</p>
            <p><a href="Users_Guides/Active_Data_Replication.htm"><i>e</i>X<i>treme</i>DB<i> Active Replication Fabric</i></a>, included  with <i>e</i>X<i>treme</i>DB <i>Embedded</i>, provides data exchange between "Internet of Things" (IoT) edge devices and database storage on remote systems. Several distinct characteristics of the IoT  makes its data management challenging and different from most standard distributed architectures supported by database management systems, <i>e</i>X<i>treme</i>DB included. <i>e</i>X<i>treme</i>DB<i> Active Replication Fabric</i>  (ARF) creates an <i>e</i>X<i>treme</i>DB-based storage foundation for distributed IoT applications.</p>
            <p><a href="Users_Guides/Transaction_Logging.htm"><i>e</i>X<i>treme</i>DB<i> Transaction Logging</i>,</a> included with <i>e</i>X<i>treme</i>DB <i>Embedded</i>, provides recovery capabilities for <i>e</i>X<i>treme</i>DB in-memory databases in the event of failure. When transaction logging is active and enabled for the database, all updates to the data objects are written to a file on persistent storage with append-only writes (sequential I/O) and periodic snapshotting. The append-only strategy optimizes performance by avoiding random writes. If the memory content is damaged or destroyed, the exact state of the database is restored by reloading the last snapshot and an automatic roll-forward procedure from the transaction log. Transaction logging does not alter the all-in-memory architecture of <i>e</i>X<i>treme</i>DB, yet ensures data recovery in the face of software or hardware failures. In addition, <i>e</i>X<i>treme</i>DB<i> Transaction Logging</i> can be used</p>
            <ul>
                <li value="1">for “Data Relay” to facilitate seamless, fine-grained data sharing between <i>e</i>X<i>treme</i>DB applications and external systems such as enterprise DBMSs</li>
                <li value="2">to create a persistent queue of events</li>
            </ul>
            <p><a href="Users_Guides/High_Availability_Users_Guide.htm"><i>e</i>X<i>treme</i>DB<i> High Availability</i></a> is a fault-tolerant version of <i>e</i>X<i>treme</i>DB designed to answer the challenge, “How can a database survive the failure of the software or hardware environment in which it operates?” Designed to support software systems that cannot afford to fail, <i>e</i>X<i>treme</i>DB<i> High Availability</i> delivers the highest degree of reliability, along with its unsurpassed performance and exceptionally small footprint by maintaining two or more synchronized databases within separate hardware instances using communication channels implemented over standard protocols.</p>
            <p><i>e</i>X<i>treme</i>DB<i> High Availability</i> includes <a href="Users_Guides/Cluster_Users_Guide.htm"><i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i></a>, McObject’s real-time distributed database implementation. <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> replicates a database across multiple hardware nodes, enabling two or more servers to share the workload. It is unique as the first clustering database system to offer an embedded architecture: the database system runs within the application process at every node, eliminating the need for separate client and server modules. This design eliminates inter-process communication (IPC) overhead between processes within each node of the cluster, accelerating performance. It also reduces complexity, contributing to higher reliability, simplified deployment and maintenance, and lower cost of ownership.</p>
            <p>McObject's <i>e</i>X<i>treme</i>DB SQL, <a href="Users_Guides/SQL_Users_Guide.htm">eXtremeSQL <a href="Users_Guides/SQL_Users_Guide.htm">®</a></a>, is a  high-performance implementation of the SQL database programming language for the <i>e</i>X<i>treme</i>DB database system. <i>e</i>X<i>treme</i>SQL targets real-time enterprise software development and strengthens <i>e</i>X<i>treme</i>DB’s appeal in fields such as banking and securities trading, where real-time responsiveness is a must and SQL is the dominant database language. Built on the unsurpassed performance of <i>e</i>X<i>treme</i>DB, <i>e</i>X<i>treme</i>SQL delivers fast processing of dynamic SQL queries. <i>e</i>X<i>treme</i>SQL provides broad coverage of the ANSI SQL standard, plus <i>e</i>X<i>treme</i>DB-specific extensions, primarily for time-series data and analytics, including support for nearly all <i>e</i>X<i>treme</i>DB data and index types.</p>
            <p><a href="Users_Guides/Server_Users_Guide.htm"><i>e</i>X<i>treme</i>DB <i>for HPC</i></a> builds on the core <i>e</i>X<i>treme</i>DB functionality, adding several features and benefits. A library of vector-based math functions complement support for <code><a href="Users_Guides/Core/Sequences.htm">Sequences</a></code> (vertical/columnar storage) of time-series data; e.g. historical trade data (datestamp, open, high, low, close, volume), IoT data, etc. <i>e</i>X<i>treme</i>DB is unique in that it combines conventional horizontal (row-based) storage and vertical (column-­based) storage within a table. Column-based layout enables vastly superior performance for processing/analyzing time series data (e.g. to detect trends, events, etc.). <i>e</i>X<i>treme</i>DB <i>for HPC</i> includes a statistical analysis library consisting of over 100 functions for performing analysis and transformations on <i>e</i>X<i>treme</i>DB sequences that can be pipelined for an even greater performance advantage. Pipelining allows the output of one function to flow directly into the input of the next function in the pipeline, without the need to "materialize" the interim results. In layman’s terms, we have moved data management/analysis from merely “in-­memory” to “on-­chip”. Modern CPUs and their L1/L2 cache operate at 2x to 3x the performance of fetches from main memory, so keeping data flowing through a pipeline on-­chip, versus materializing temporary results in main memory yields a tremendous performance, and competitive, advantage for <i>e</i>X<i>treme</i>DB and customers that adopt it.</p>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>