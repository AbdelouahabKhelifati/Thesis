<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Getting Started with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Step 2: Executing commands and scripts</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Step 2: Executing commands and scripts</h1>
            <blockquote>
                <h1>Executing basic <i>xSQL</i> commands and scripts</h1>
                <p>As mentioned in <a href="Server_QS_xSQL1.htm">Step 1</a>, <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> can be started in server or client mode. For the next group of exercises we will start <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> with the command file <code>xsql.bat</code> directory <code>/samples/xsql/scripts/financial</code> with the default parameters to enter interactive SQL statements. <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> displays the following lines indicating it is ready to accept interactive SQL statements:</p>
                <div class="code-block"><pre><a name="kanchor982"></a><a name="kanchor983"></a><a name="kanchor984"></a>&#160;
    Simple interactive configuration is started
    To run as a server, type, for example: 'xsql -size 100m -p 5000'
    Then to connect as a client, use 'xsql @127.0.0.1:5000'
    Type 'xsql -h' for more details
    &#160;
    xsql started
    Runtime configuration
     Transaction manager  : MURSIW
     Storage (transient)  : Conventional memory, 100M
     Storage (persistent) : Not supported
     Runtime              : Release
    XSQL&gt;
    &#160;</pre>
                </div>
                <h2>Executing SQL statements </h2>
                <p>To execute SQL statements interactively simply type the statement followed by a semicolon. For example, the following <code>select</code> statement queries the system table <code>Metatable</code> to show that there are as yet no tables in the database:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select TableName from Metatable;
    TableName
    ------------------------------------------------------------------------------
    &#160;
    Selected records: 0
    XSQL&gt;
    &#160;</pre>
                </div>
                <p>So to create and initialize a table we might enter statements like the following:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;create table t(id int);
    XSQL&gt;insert into t values( [1,2,3] );
    XSQL&gt;select * from t;
    id
    ------------------------------------------------------------------------------
    1
    2
    3
    &#160;
    Selected records: 3
    XSQL&gt;
    &#160;</pre>
                </div>
                <h2>Executing script files</h2>
                <p>But rather than type SQL statements interactively, it is often more convenient to read SQL script files into <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to  preform SQL operations. To facilitate this exercise, several scripts and additional files are provided in the directory <code>/samples/xsql/scripts/financial</code>.</p>
                <p>For example, the scripts in files <code>quote.sql</code>, <code>insert.sql</code> and <code>count.sql</code> create the table <i>Quote</i>, then populate it with some randomized trade data and perform a query. The <code>quote.sql</code> script creates the table with a time series consisting of the ordered sequence <code>day</code> associated with five sequences of values <code>high</code>, <code>low</code>, <code>open</code>, <code>close</code> and <code>volume</code>:</p>
                <div class="code-block"><pre>&#160;
    create table Quote( symbol char(21) primary key, day sequence(unsigned(4) asc),
        low sequence(float), high sequence(float), open sequence(float), 
        close sequence(float), volume sequence(unsigned(4)) );
        &#160;</pre>
                </div>
                <p>The <code>insert.sql</code> script inserts a number of values into the sequences with lines like the following:</p>
                <div class="code-block"><pre>&#160;
    insert into Quote (symbol,day,low,high,open,close,volume) values ('SYM0','{20130101,20130104,...},{...}, ..., {...});
    &#160;</pre>
                </div>
                <p>(Note the use of the '{ <code>value list</code> }' to insert a series of values into the sequence fields.) </p>
                <p>Then script <code>count.sql</code> simply sets the format for output (more about this later) and selects the count of records inserted:</p>
                <div class="code-block"><pre>&#160;
    format CSV
    select count(symbol) as "Quote records inserted" from Quote;
    &#160;</pre>
                </div>
                <p>These three scripts can be executed in "batch" mode by starting <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> with the following command:</p>
                <div class="code-block"><pre>&#160;
    xsql -size 100m -b -f quote.sql -f insert.sql -f count.sql
    Quote records inserted
    10
    &#160;</pre>
                </div>
                <p>Note that <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> terminates after executing the scripts in "batch" mode. To use <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> interactively we use the <code>-i</code> command line option. For example we can run the first two scripts to initialize the Quote table and enter interactive mode with the following command:</p>
                <div class="code-block"><pre>&#160;
    xsql -size 100m -i -f quote.sql -f insert.sql
    &#160;</pre>
                </div>
                <p>Now we can type an SQL select statement like the following to display the top performing stocks from this set of test data:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select symbol, seq_top_pos_max(close, 1) as top_index,
        close@top_index  as "top_Close",
        volume@top_index as "volume" from Quote;
        &#160;
    symbol  top_index      top_Close       volume
    ------------------------------------------------------------------------------
    SYM0    {34}    {97.2399978637695}      {732}
    SYM1    {57}    {96.5299987792969}      {406}
    SYM2    {2}      {94.870002746582}        {765}
    SYM3    {65}    {98.7399978637695}      {953}
    SYM4    {62}    {93.25}                               {312}
    SYM5    {76}    {92.5199966430664}      {829}
    SYM6    {59}    {94.8300018310547}      {761}
    SYM7    {98}    {99.3199996948242}      {583}
    SYM8    {37}    {97.5899963378906}      {593}
    SYM9    {81}    {93.7799987792969}      {257}
    &#160;
    Selected records: 10
    &#160;</pre>
                </div>
                <p>Note that this example makes use of some <i>e</i>X<i>treme</i>SQL extensions to standard SQL that operate on the <i>Quote</i> sequence fields <code>close</code> and <code>volume</code>. These SQL extensions and the powerful library of statistical functions provided for analytics are explained and demonstrated in the SQL <a href="../../../Users_Guides/Server/Analytics_Functions/Examples.htm">analytics functions examples</a>. </p>
                <h2>The script command</h2>
                <p>Again, rather than type complex SQL statements interactively, especially when they may be repeated, it is more convenient to store the statement(s) in a script file. In fact the above <code>select</code> statement is provided in file <code>top_close.sql</code>. We can run this script to obtain the same results from interactive mode using the <code>script</code> command:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;script top_close.sql
    &#160;</pre>
                </div>
                <p>The file <code>top_close.sql</code> looks like this:</p>
                <div class="code-block"><pre>&#160;
    select symbol, seq_top_pos_max(close, 1) as top_index, 
        close@top_index  as "top_Close", volume@top_index as "volume" from Quote;
        &#160;</pre>
                </div>
                <p>Note that the  last line issues command <code>input console</code> to return input to <code>STDIN</code> (the keyboard). Without this line the file will be executed in batch mode and <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> will close. Alternatively the <code>script</code> command can be used to remain in <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> interactive mode, or to run one script from another script file. For example suppose we have the following two script files:</p>
                <p><code>inner.sql</code>:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select TableName, FieldName, FieldTypeName  from Metatable;
    &#160;</pre>
                </div>
                <p>and <code>outer.sql</code>:</p>
                <div class="code-block"><pre>&#160;
    select 1;
    script inner.sql
    select 2;
    &#160;</pre>
                </div>
                <p>Now we could execute the <code>script</code> command in interactive mode to produce the following output:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;script outer.sql
    #1
    ------------------------------------------------------------------------------
    1
    &#160;
    Selected records: 1
    TableName       FieldName       FieldTypeName
    ------------------------------------------------------------------------------
    Quote   symbol  String
    Quote   day     Sequence
    Quote   low     Sequence
    Quote   high    Sequence
    Quote   open    Sequence
    Quote   close   Sequence
    Quote   volume  Sequence
    &#160;
    Selected records: 7
    #1
    ------------------------------------------------------------------------------
    2
    &#160;
    Selected records: 1
    XSQL&gt;
    &#160;</pre>
                </div>
                <p>Or the script <code>outer.sql</code> can be run from the <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> command line to produce the same result and remain in interactive mode:</p>
                <div class="code-block"><pre>&#160;
    xsql -f outer.sql
    &#160;</pre>
                </div>
                <p>It is often convenient to display output from select statements in a different format. For example the output from the <code>top_close.sql</code> script above displays the <code>close</code> price in full precision, i.e. with 13 digits to the right of the decimal point, eg. <code>97.2399978637695</code>. It would be more readable with 2 or 3 digits of precision. The <a href="Server_QS_xSQL3.htm">next step</a> in this tutorial will demonstrate different display options.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>