<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Quick Start with Embedded eXtremeSQL in C#</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Quick Start with Embedded <i>e</i>X<i>treme</i>SQL in C#</h1>
            <blockquote>
                <p>The principle classes for most <i>e</i>X<i>treme</i>SQL C# applications are <i>Database</i>, <i>SqlLocalConnection</i> and <i>SqlResultSet</i>. The <i>SqlLocalConnection</i> is normally instantiated by calling the <i>Database</i> <code>ConnectSql()</code> method. Then <i>SqlLocalConnection</i> method <code>ExecuteStatement()</code> is called to execute SQL <code>insert</code>, <code>update</code> and <code>delete</code> statements. Alternatively <i>SqlLocalConnection</i> method <code>Insert()</code> can be called to insert objects of database classes and <code>CurrentCursor.Update()</code>and <code>CurrentCursor.Remove()</code> can be called to update or delete objects. Method <code>ExecuteQuery()</code> is called to execute a <code>select</code> statement returning a <i>SqlResultSet</i>. Then various <i>SqlResultSet</i> methods can be used to process result sets. The following sections will walk through the steps for building a simple C# <i>e</i>X<i>treme</i>SQL application. In addition, note that there are <a href="../../../Programming/Csharp/SDK_Samples/Csharp_SQL.htm">C# SDK samples</a> that demonstrate specific <i>e</i>X<i>treme</i>SQL features.</p>
                <h2>Database definition</h2>
                <p>For C# applications the database is defined using native C# class syntax applying special <i>attributes</i> (See <a href="../../../Programming/Csharp/Csharp_Schema_Definition.htm">here</a> for a detailed explanation). For this example application we will use a schema defined as follows:</p>
                <div class="code-block"><pre><a name="kanchor905"></a>    &#160;
    [Persistent(AutoID = true)]
    class Person
    {
        [Indexable(Type = Database.IndexType.BTree, Unique = true)]
        public String name;
        &#160;
        public unsigned int ordinal;
    }
    &#160;</pre>
                </div>
                <h2>Open the database</h2>
                <p>To open the database  we first instantiate a <i>Database</i> object <code>db</code> in order to call its <code>Open()</code> method. There are a number of constructors for the <i>Database</i> class. For this sample we use the default constructor. The <i>Database</i> class  <code>Open()</code> method has three overloads; we will call the version which allows us to specify the following properties for an in-memory database:</p>
                <ul>
                    <li value="1">name - a string identifying the database</li>
                    <li value="2">parameters - a <i>DatabaseParameters</i> object (see explanation below)</li>
                    <li value="3">size - the total amount of memory available for the database</li>
                </ul>
                <p>The <i>DatabaseParameters</i> class has a number of properties. The property <code>Classes</code> must be initialized with an array of classes to be stored in the database. For this example there is simply the class <i>Person</i>. In the following code snippet we instantiate the <i>Database</i> object, define the <i>DatabaseParameters</i> <code>Classes</code> and the memory page size (the basic unit of memory access) properties, then call the <code>Open()</code> method.</p>
                <p>To complete this step we will call the  <code>db.Close()</code> method to terminate the database instance. The sample code for <code>Program.cs</code> so far looks like this:</p>
                <div class="code-block"><pre>&#160;
    public static void Main(String[] args)
    {
        const int PAGE_SIZE = 128;
        const int DATABASE_SIZE = 16*1024*1024;
        &#160;
        Database db = new Database();
        Database.Parameters parameters = new Database.Parameters();
    &#160;
        parameters.MemPageSize = PAGE_SIZE;
        parameters.Classes = new Type[]{typeof(Person)};
    &#160;
        db.Open("PersonDb", parameters, DATABASE_SIZE);
    &#160;
        // Do database processing
    &#160;
        db.Close();
    }
    &#160;</pre>
                </div>
                <h2>Populate and query the database using SQL</h2>
                <p>To populate the database using SQL instantiate&#160;a <i>SqlLocalConnection</i> object and call its <code>ExecuteStatement()</code> method as follows:</p>
                <div class="code-block"><pre>        &#160;
        SqlLocalConnection con = db.ConnectSql();
        con.ExecuteStatement("insert into Person values('Luke Skywalker', 0)");
        con.ExecuteStatement("insert into Person values('Han Solo', 1)");
        &#160;</pre>
                </div>
                <p>Then to query the database we call the <i>SqlLocalConnection </i> <code>ExecuteQuery()</code> method to instantiate a <i>SqlResultSet</i> object <code>result</code>:</p>
                <div class="code-block"><pre>        &#160;
        SqlResultSet result = con.ExecuteQuery("select * from Person") );
        &#160;</pre>
                </div>
                <h2>Processing query results</h2>
                <p>The <i>SqlResultSet</i> object returned from <code>ExecuteQuery()</code> is a dataset that has numerous methods for extracting the result rows and information about the columns, etc. But presenting these details is beyond the scope of this quick start demonstration. Please see <a href="../../../Programming/Csharp/Csharp_Query_Result.htm"><i>QueryResult</i> processing</a> for details and the <a href="../../../Programming/Csharp/SDK_Samples/Csharp_SQL.htm">C# SDK samples</a> for several examples.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>