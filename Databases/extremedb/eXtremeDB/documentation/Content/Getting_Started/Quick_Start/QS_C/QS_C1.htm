<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Getting Started with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Step 1: Database Definition</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Step 1: Database Definition</h1>
            <blockquote>
                <p>Before you begin using <i>e</i>X<i>treme</i>DB, it is important to understand some <a href="../../../eXtremeDB_Fundamental_Concepts.htm">basic concepts</a>. For database applications using the C API,	development consists of three stages on the host environment:</p>
                <ul>
                    <li value="1">Data layout definition (creating what is referred to as a database <i>schema</i>) and compilation (which produces database interface files, including the database <i>dictionary</i>; the database dictionary is a binary representation of the database schema that the <i>e</i>X<i>treme</i>DB<a name="kanchor222"></a> runtime uses to understand the data layout, which fields participate in which indexes, etc.).</li>
                    <li value="2">Using the <i>e</i>X<i>treme</i>DB static and schema-specific generated APIs in the application.</li>
                    <li value="3">Compiling the database interface files with the application source code and linking with the appropriate <i>e</i>X<i>treme</i>DB runtime libraries.</li>
                </ul>
                <p>These basic steps in building an <i>e</i>X<i>treme</i>DB C application are illustrated in the following diagram; the host components are in blue, while the target components are in red:</p>
                <p>
                    <img src="../../../Resources/Images/C_Process.png" />
                </p>
                <h2>Schema definition</h2>
                <p>The database schema is defined in a high-level C-like Data Definition Language (<a href="../../../Programming/C/DDL.htm">DDL</a>). The essential DDL statements are a <code>declare database &lt;db_name&gt;</code> to  assign the database name, and a class &lt;class_name&gt; to define a database class (corresponds to a table in SQL jargon). For example, the following defines a simple database with name <code>mydb</code> and a single class (table) <code>MyClass</code> with two fields <code>id</code> (an unsigned 4-byte integer) and <code>name</code> (a variable length character string):</p>
                <div class="code-block"><pre>&#160;
    declare database mydb;
    &#160;
    class MyClass {
        unsigned&lt;4&gt; id;
        string name;
    };
    &#160;</pre>
                </div>
                <h2>Compiling the schema</h2>
                <p>Typically the schema file will be named with extension <code>.mco</code>; like <code>schema.mco</code> or <code>mydb.mco</code>. Then this file is compiled by the DDL compiler <code><a href="../../Package_Contents/mcocomp.htm">mcocomp</a></code> to produce the schema-specific database dictionary and data access APIs in the form of a <code>&lt;db_name&gt;.h</code> header file and a <code>&lt;db_name&gt;.c</code> implementation file. For example the following command will produce files <code>mydb.h</code> and <code>mydb.c</code> in the current working directory:</p>
                <div class="code-block"><pre>&#160;
    ../../host/bin/mcocomp mydb.mco
    &#160;</pre>
                </div>
                <p>A more interesting example of DDL usage can be seen in the SDK&#160;sample <code>samples/native/core/00_ddl/schema.mco</code>.</p>
                <h2>Implementing <i>e</i>X<i>treme</i>DB APIs in the application source code</h2>
                <p>A number of "helper" functions are provided in directory <code>samples/native/common</code> that can facilitate initial development. The simplest of <i>e</i>X<i>treme</i>DB applications can merely include the <code>common.h</code> header file, then call helper functions <code>sample_os_initialize()</code>, print out a "Hello world" type message, call <code>sample_pause_end()</code> to pause execution, then <code>sample_os_shutdown()</code> to terminate. Please see the SDK&#160;sample <code>samples/native/core/00_ddl/main.c</code> for an example.</p>
                <h2>Compiling and linking the application</h2>
                <p>At a minimum, a simple application that creates an <i>e</i>X<i>treme</i>DB database in conventional memory will require the following libraries (by convention we use abbreviated naming, for example, <code>mcolib</code> which will exist as <code>mcolib.lib</code> on Windows platforms and <code>libmcolib.a</code> on Unix-Linux platforms):</p>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcolib</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The “core” runtime library</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcovtmem</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The “virtual tables” library for all-in-memory databases</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcomconv</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The “memory devices” library for conventional memory</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcosw32, mcosw32n, or mcoslnx</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The “synchronization” library</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcouwrt</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">The “utilities” library</td>
                        </tr>
                    </tbody>
                </table>
                <p>Please refer to the SDK&#160;sample <code>samples/native/core/00_ddl</code> for a very simple example, and <a href="../../Building_Running_SDK_Samples.htm">building and running SDK samples</a> for instructions.</p>
                <p>In the <a href="QS_C2.htm">next steps</a> we will add some database functionality to applications. The best way to learn these details is to <a href="../../Building_Running_SDK_Samples.htm">build and run</a> the sample applications and examine the source code described in these steps.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>