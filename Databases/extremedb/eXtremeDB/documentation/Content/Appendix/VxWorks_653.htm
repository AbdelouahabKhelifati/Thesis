<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Appendix A: eXtremeDB for VxWorks 653</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Appendix A:<i> e</i>X<i>treme</i>DB for VxWorks 653 </h1>
            <blockquote>
                <h2>Introduction</h2>
                <p>A VxWorks 653 module is the system controlled by one RTOS, and that RTOS is the core OS of VxWorks 653.</p>
                <p>Within a module, VxWorks 653 supports complete separation between applications as well as between the applications and the module's core OS. As a result, applications can interact with each other only through explicit mechanisms that the core OS controls. Applications cannot affect the operation of the module except in a controlled manner through resources that the core OS explicitly allocates to them.</p>
                <p>Each application runs in a discrete partition. The core OS controls the partitions by providing time and space partitioning and memory management services. Partitions manage their own resources within the time slot that the core OS provides. Performance is optimized by keeping as many routine calls as possible within the partition. Partitions run in user mode. The core OS runs in supervisor mode.</p>
                <p>Each partition contains a partition-level OS (the partition OS) with a set of OS services. VxWorks 653 provides the vThreads partition OS and COIL (a partition OS independent of vThreads). For vThreads partitions, VxWorks 653 supports the POSIX and APEX interfaces.</p>
                <p>The <i>e</i>X<i>treme</i>DB run time libraries have been developed to run over the vThreads partition OS.</p>
                <p>VxWorks 653 design intended to separate application and isolate them. According to this idea <i>e</i>X<i>treme</i>DB does not support shared databases despite the known ability of the OS to create shared memory regions.</p>
                <p>&#160;</p>
                <h2><i>e</i>X<i>treme</i><a name="kanchor586"></a>DB runtime libraries</h2>
                <p>The <i>e</i>X<i>treme</i>DB run time is built for VxWorks 653 as a set of static <code>.a</code> libraries. Applications link with the appropriate libraries. The following static libraries are available at this time for the VxWorks 653 platform. Both release (certified) and debug versions are available.</p>
                <h3>Core runtime libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcolib.a</code>
                </p>
                <h3>Memory Manager libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcovtmem.a</code> – For “all-in memory” databases virtual table manager</p>
                <h3><a name="kanchor587"></a>Transaction Manager libraries</h3>
                <p>Three transaction manager libraries are available – <code><a name="kanchor588"></a>MURSIW</code> (Multiple Readers, Single Writers),<code><a name="kanchor589"></a> MVCC</code> (Multi Version Concurrency Control) and <code>EXCL</code> (Exclusive lock) – implemented in the following libraries:</p>
                <blockquote>
                    <p><code>libmcotmursiw.a</code> – for <code><a href="../Users_Guides/Core/MURSIW_Transaction_Manager.htm">MURSIW</a></code></p>
                    <p><code>libmcotmvcc.a</code> – for <code><a href="../Users_Guides/Core/MVCC_Transaction_Manager.htm">MVCC</a></code></p>
                    <p><code>libmcotexcl.a</code> – for <code>EXCL</code></p>
                </blockquote>
                <h3>Memory devices libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcomconv.a</code> – for conventional memory device</p>
                <h3>Synchronization Support libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcosvxn653.a</code> – for conventional memory application (platform specific)</p>
                <h3>Utilities libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcounrt.a</code>
                </p>
                <h3>Serialization libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcoseri.a</code> – for backup/store for all-in-memory applications</p>
                <h3>SQL support libraries</h3>
                <blockquote>
                    <p><code>libmcosql.a</code> – SQL core (a C++ library)</p>
                </blockquote>
                <h3>eXtremeSQL remote access libraries</h3>
                <p style="text-indent: 0.5in;"><code>libmcorsql.a</code> – Remote SQL core (a C++ library)</p>
            </blockquote>
            <p>&#160;</p>
            <p>The pre-built libraries are supplied with the package. They can be found under the following folders;</p>
            <blockquote>
                <blockquote>
                    <p>…<code>/target/bin/PPC85xx</code> – release (or CERT) version of libraries for PowerPC 85xx</p>
                    <p>…<code>/target/bin/PPC85xx-Debug</code> – debug version of libraries for PowerPC 85x</p>
                    <p>…<code>/target/bin/SIMNT</code> – release version of libraries for simulator</p>
                    <p>…<code>/target/bin/SIMNT-Debug</code> – debug version of libraries for simulator</p>
                </blockquote>
                <p>
                    <img src="../Resources/Images/note.png" />Note that:</p>
                <blockquote>
                    <p>i)	In ARINC architectures, applications are fully partitioned in space and time and the only way to<u> </u><b style="text-decoration: underline;">communicate</b> between them and the OS kernel is through the APEX interface. Nothing is supposed to be shared, and hence there is no mechanism to synchronize access to shared regions from multiple partitions. Hence, <i>e</i>X<i>treme</i>DB for VxWorks 653 does not provide support for the shared memory storage.</p>
                    <p>ii)	As CERT version does not support floating point and C++ run time libraries, the source codes are modified to exclude floating point and C++ run time libraries.</p>
                </blockquote>
                <h3>eXtremeSQL Cluster libraries</h3>
                <blockquote>
                    <p><code>libmcocluster.a</code> – cluster core</p>
                    <p><code>linmcoltcp.a</code> – <code>TCP/IP</code> transport</p>
                </blockquote>
                <p>The pre-built libraries are supplied with the package to facilitate cluster application development. They can be found under the following folders;</p>
                <blockquote>
                    <p>…<code>/target/bin/PPC603</code> – release (or CERT) version of libraries for PowerPC 603</p>
                    <p>…<code>/target/bin/PPC603-Debug</code> – debug version of libraries for PowerPC 603</p>
                    <p>…<code>/target/bin/SIMNT</code> – release version of libraries for simulator</p>
                    <p>…<code>/target/bin/SIMNT-Debug</code> – debug version of libraries for simulator</p>
                </blockquote>
                <h2>&#160;</h2>
                <h2>RTL (run time library) Build Procedure</h2>
                <p>All run-time libraries are built using the Workbench 3.2 IDE. No special configuration or special tools installation are required. One can start building run-time libraries after the standard installation of the IDE.</p>
                <p>In a new VxWorks 653 environment, for the first time project build, the user needs to create projects by importing existing projects supplied in the package. For successive builds, when the Workbench IDE is opened, all the projects will be shown in Project Explorer.</p>
                <p>To import an existing run-time library project, perform the following steps:</p>
                <blockquote>
                    <p>In Workbench, select <b>File</b> &gt; <b>Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the project and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                </blockquote>
                <p>The makefile takes care of all the required settings. No special settings and configuration are needed in Workbench. By default, the <code>header.mak</code> file (under …/include folder in the package) has been set to build libraries for CPU target PPC85xx. If the user wants to build simulator version of libraries, the following change is required to be made in the <code>header.mak</code> file (uncommenting <code>CPU=SIMNT</code> statement and comment out <code>CPU=PPC85XX</code> statement).</p>
                <blockquote>
                    <p><code>CPU               = SIMNT</code>
                    </p>
                    <p><code>#CPU               = PPC85XX</code>
                    </p>
                </blockquote>
                <p>For cluster library development <code>CPU = PPC603</code> can be specified in the <code>header.mak</code> file</p>
                <p>Below is an example of a run-time library makefile:</p>
                <div class="code-block"><pre>    &#160;
    # Makefile
    # OS   : VxWorks653
    # Tool : gcc or native complier
    #
    # Copyright (c) 2001-2009 McObject LLC.
    #
    #
    # General definitions
    ifndef MCO_ROOT
    MCO_ROOT = ../..
    endif
    ifeq ($(TGT_DIR),)
    TGT_DIR = $(WIND_BASE)/target
    endif
    MCO_TITLE       := mco-libraries
    MCO_SIDE         = TARGET
    SRC              = mcoseq.c mcortmt.c mcortst.c \
    mcocont.c mcopage.c mcorec.c \
    mcocobj.c \
    mcodb.c mcodict.c mcoddl.c \
    mcoconn.c \
    mcoindex.c mcobtree.c mcokdtree.c mcohash.c mcoorder.c \
    mcoobj.c mcodup.c mcoblob.c mcocmpkt.c \
    mcoabst.c \
    mcowimp.c mcowobj.c mcowblob.c mcowrap.c mcowfnd.c mcowarr.c mcowvec.c mcowoid.c \
    mcocsr.c \
    mcotrans.c mcoautoid.c mcohaabst.c mcologabst.c mcopsrch.c \
    mcowev.c mcoevasy.c mcoevsyn.c \
    mcoxml.c mcoxmlsc.c mcoxnumb.c mcoxpars.c mcoxser.c mcoxml0.c mcopmbuf.c mcomd.c \
    mcortree_core.c mcortreeu.c mcoptree.c mcoperf.c mcoperfabst.c
    # Common definitions and rules
    include $(MCO_ROOT)/include/header.mak
    include $(TGT_DIR)/h/make/defs.$(WIND_HOST_TYPE)
    MCO_INCLUDE += -I$(MCO_LIB_SRC)
    # top-level target
    all: core core_debug
    @if $(TEST_FILE) Makefile ; then $(MAKE) -f Makefile; fi
    &#160;
    # basic rt targets
    core: .make_obj_dir $(OBJ) $(OBJ_L)
    @echo Output file: libmcolib$(MCO_BUILDRT_SFX)$(MCO_CFG_SUFFIX_A)
    $(QUIET_PREFIX)$(AR) $(ARFLAGS) $(MCO_BIN)/libmcolib$(MCO_CFG_SUFFIX_A) $(OBJ) $(QUIET_SUFFIX)
    # cleanup targets
    clean:
    @$(MAKE) .remove_obj_dir
    @$(MAKE) .remove_obj_dir MCO_BUILD_RT_DEBUG=on
    @if $(TEST_FILE) Makefile ; then $(MAKE) -f Makefile clean; fi
    distclean: clean
    @echo Removing runtime target libraries...
    @$(RMFILE) $(MCO_BIN)/libmcolib*$(MCO_CFG_SUFFIX_A)
    @if $(TEST_FILE) Makefile ; then $(MAKE) -f Makefile distclean; fi
    @echo Cleanup complete
    core_debug:
    @$(MAKE) core MCO_BUILD_RT_DEBUG=on
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>VxWorks 653 Platform Specifics</h2>
                <p>As mentioned earlier, the following run-time library is very specific to the VxWorks 653 platform:</p>
                <blockquote>
                    <p><b>libmcosvxn653.a</b>: – This library is built from source file mcosvxn653.c which implements synchronization primitives using native vThreads binary semaphores and can only be used from a single application partition.</p>
                </blockquote>
                <h2>&#160;</h2>
                <h2>Applications Build Procedure</h2>
                <p>A VxWorks 653 application partition includes the appropriate run time libraries. The application project is created using the “VxWorks 653 Application Project” option of the Workbench or by importing supplied sample projects. The user will need to create the appropriate config record with the XML configuration file and include that XML file into the application project. (This document assumes that the reader is familiar with how to create an application project for VxWorks 653 partition.)</p>
                <p>The specific configuration to use <i>e</i>X<i>treme</i>DB runtime libraries requires the following:</p>
                <blockquote>
                    <p>The application will include “PartitionOS_ppc85xx_cert-stub.o“ or “PartitionOS_ppc85xx_debug-stub.o” or “PartitionOS_simnt-stub.o – the symbols for the partition OS using the Libraries tab in the build properties dialog box. The appropriate version depends on whether a certified PPC or debug PPC or simulator platform build is intended.</p>
                    <p>Set <code>-D_VXWORKS=653</code> as defined through the build macro tab of the build properties dialog box</p>
                    <p>Edit <code>LIB</code> under the build macro tab of the build properties dialog box to include the appropriate run time libraries</p>
                </blockquote>
                <p>&#160;</p>
                <p>The application project can be created by using <i>import project scheme</i> from an existing project supplied as part of the package.</p>
                <p>A simple VxWorks application using a conventional mode in-memory-only database would have the following libraries as LIBs :</p>
                <div class="code-block"><pre>    &#160;
    libmcolib.a libmcovtmem.a libmcoseri.a libmcosvxn653,a libmcomconv.a libmcotmursiw.a libmcolib.a libmcouwrt.a
    &#160;</pre>
                </div>
                <p>The example above uses the <code><a href="../Users_Guides/Core/MURSIW_Transaction_Manager.htm">MURSIW</a></code> transaction manager (TM). To link instead with the <code><a href="../Users_Guides/Core/MVCC_Transaction_Manager.htm">MVCC</a></code> TM use the following LIB list :</p>
                <div class="code-block"><pre>    &#160;
    libmcolib.a libmcovtmem.a libmcoseri.a libmcosvxn653.a libmcomconv.a libmcotmvcc.a libmcolib.a libmcouwrt.a
    &#160;</pre>
                </div>
                <p>For ease of reference, the following list indicates which libraries have interdependencies and how to specify them in the <code>LIB</code> list:</p>
                <div class="code-block"><pre>&#160;
    libmcolib.a libmcotmursiw.a libmcolib.a ... libmcolib.a ... libmcotmvcc.a libmcolib.a ... 
    libmcolib.a ... libmcotexcl.a libmcolib.a ... ... libmcosql.a libmcorsql.a ... ..
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h1>Modifying and Building Sample Apps</h1>
                <p>The following sample applications are modified and built for VxWorks 653. The entire procedure for building these applications is described next:</p>
                <blockquote>
                    <p><code><a href="../Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf.htm">08-benchmarks-perf</a></code>
                    </p>
                    <p><code><a href="../Programming/C/SDK_Samples/SQL_Samples/Access.htm">api-sql-01-c-api-access</a></code>
                    </p>
                </blockquote>
                <p>Before building any of the samples, the user need to build the Core OS, Partition OS and <i>configRecord</i> using the following build procedures.</p>
                <h2>Building the configRecord</h2>
                <p>The <i>configRecord</i> can be built from an existing project or from scratch. Build options are supported for PPC85xx cert, PPC85xx debug and simulator platform.</p>
                <p>To create the <i>configRecord</i> project by importing an existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the <i>configRecord</i> project (../target/configRecord) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                </blockquote>
                <p>To build PPC85xx cert version, right click on the project name and then select <b>Build Options</b> &gt; <b>Set Active Build Spec…</b> &gt; <b>PPC85XXgnu.cert</b></p>
                <p>To build PPC85xx debug version, right click on the project name and then select <b>Build Options</b> &gt; <b>Set Active Build Spec…</b> &gt; <b>PPC85XXgnu.debug</b></p>
                <p>To build simulator version, right click on the project name and then select <b>Build Options</b> &gt; <b>Set Active Build Spec…</b> &gt; <b>SIMNTgnu.debug</b></p>
                <p>Build the Configuration Record project on its own by right-clicking on the project name and selecting <b>Rebuild Project.</b></p>
                <h2>Building the Core OS</h2>
                <p>The Core OS can be built from an existing project or from scratch. The package only supplies project to build CoreOS for the simulator version. The user needs to create its own projects to build CoreOS for PPC85xx certified and debug versions.</p>
                <p>To create the CoreOS project by importing an existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File</b> &gt; <b>Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the CoreOS project (../target/CoreOS) and Click <b>Finish</b>.</p>
                    <p>The project appears in the Project Explorer.</p>
                </blockquote>
                <p>To create the CoreOS project from scratch:</p>
                <blockquote>
                    <p>Create directory “CoreOS” under ../target folder</p>
                    <p>In Workbench, select <b>File &gt; New &gt; Project</b>.</p>
                    <p>In the dialog box that opens, expand the VxWorks 653 node, select VxWorks 653 Module Operating System Project, and click <b>Next</b>.</p>
                    <p>In the dialog that opens choose the radio button Create project at external location. To set the Directory field, click <b>Browse</b> and navigate to the CoreOS directory under <code>../target </code>folder.</p>
                    <p>In the same dialog box, assign the project a name “CoreOS” and click <b>Next</b>.</p>
                    <p>In the next dialog box, choose board support package (BSP) wrSbc8560 and a build spec PPC85XXgnu.cert or PPC85XXgnu.debug depending on whether the CERT or debug version of module operating system is required for PPC85XX platform target.</p>
                    <p>In the same dialog box, choose the radio button Use XML module file and browse to wrSbc8560_default.xml under …<code>/target/configRecord</code> folder</p>
                    <p>Click <b>Next</b></p>
                    <p>The Indexer dialog box opens. Click <b>Finish</b>.</p>
                </blockquote>
                <p>Build the MOS project on its own by right-clicking on the project name and selecting Build Project.</p>
                <h2><a name="Building"></a>Building the Partition OS</h2>
                <p>The Partition OS can be built from an existing project supplied in the package. The package supplies partition OS project for PPC85XX CERT and debug and also for simulator target platforms.</p>
                <p>To create the PartitionOS project by importing an existing project:</p>
                <p>For PPC85xx CERT:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the Partition OS project for PPC85XX cert (../target/PartitionOS_ppc85xx_cert) and Click <b>Finish</b>.</p>
                </blockquote>
                <p>For PPC85xx debug:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the Partition OS project for PPC85XX debug (../target/PartitionOS_ppc85xx_debug) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                </blockquote>
                <p>For simulator:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the Partition OS project for simulator (../target/PartitionOS_simnt) and Click <b>Finish</b>.</p>
                </blockquote>
                <p>Build the POS project on its own by right-clicking on the project name and selecting Build Project.</p>
                <p>&#160;</p>
                <h2>Building and Running 08-benchmarks-perf sample</h2>
                <p>The benchmark sample can be built from an existing project or from scratch. The package provides projects to build PPC85xx cert, PPC85xx debug and simulator version.</p>
                <p>Before building this application, the following tasks need to be done</p>
                <blockquote>
                    <p>-	Replace <code>simpc_part1</code> with<code> 08-benchmarks-perf</code> in <code>simpc_default.xml</code> file (located under <code>…/target/configRecord)</code> and re-build config record if simulator version of application is desired</p>
                    <p>-	Replace <code>wrSbc8560_part1</code> with <code>08-benchmarks-perf</code> in <code>wrSbc8560_default.xml</code> file (located under …/target/configRecord) and re-build config record if PPC85xx version of application is desired</p>
                </blockquote>
                <p>To create the sample <code>08-benchmarks-perf</code> project by importing the existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the <code><a href="../Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf.htm">08-benchmarks-perf</a></code> project (../samples/08-benchmarks-perf) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                    <p>Open the Build Properties dialog box by right-clicking on the project name and selecting <b>Properties</b>. Go to <b>Build Macros</b> tab and change <b>BLACKBOX</b> for <code>PPC85XXgnu.cert</code> and <code>PPC85XXgnu.debug</code> from <code>wrSbc8560_part1</code> to <code>08-benchmarks-perf</code>, and for simulator from <code>simpc_part1</code> to <code>08-benchmarks-perf</code>.</p>
                </blockquote>
                <p>The next step is to select the appropriate build option.</p>
                <p>To build PPC85xx cert version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec…</b> <b>&gt; PPC85XXgnu</b> and unselect <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build PPC85xx debug version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; PPC85XXgnu.debug</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build simulator version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; SIMNTgnu</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>Build the <b>08-benchmarks-perf</b> project on its own by right-clicking on the project name and selecting <b>Rebuild Project</b></p>
                <p>The last step is to build an integration project before the sample application can be run. A VxWorks 653 Integration project is a super-project that integrates all of the projects that make up a VxWorks 653 module. In practice, this minimally includes:</p>
                <blockquote>
                    <p>a Configuration Record project</p>
                    <p>a Module OS project</p>
                    <p>a Partition OS project</p>
                    <p>at least one Application project</p>
                </blockquote>
                <p>The procedures are described for both the simulator and PPC85xx CERT target. The steps for building integration project for all platforms are similar with certain differences as mentioned.</p>
                <p>&#160;</p>
                <p>Create a directory named <code>sample_integration</code> under folder ../samples and copy files <code>wrSbc8560.xml, wrSbc8560_default.xml. simpc.xml</code> and <code>simpc_default.xml</code> from the <code>../target/configRecord</code> folder to the <code>../samples/sample_integration</code> folder</p>
                <blockquote>
                    <p>In Workbench, select <b>File</b> &gt; <b>New</b> &gt; <b>Project</b>.</p>
                    <p>In the dialog box that opens, expand the <b>VxWorks 653</b> node, select <b>VxWorks 653</b> <b>Integration Project</b>, and click <b>Next</b>.</p>
                    <p>In the next dialog that opens choose the radio button Create project at external location. To set the Directory field, click <b>Browse</b> and navigate to the sample_integration directory under the<code> ../samples</code> folder.</p>
                    <p>In the same dialog box, assign the project a name “<code>sample_integration</code>” and click <b>Next</b>.</p>
                    <p>In the next dialog box, choose a board support package (BSP) and build spec. The selection is based on the target platform.</p>
                    <blockquote>
                        <p>1.	Uncheckout “<b>Create from CPUand XML module file(s)</b>”</p>
                        <p>2.	Next select BSP and build spec</p>
                        <blockquote>
                            <p>a.	Choose BSP as “<b>wrSbc8650</b>” and Build spec as “<b>PPC85XXgnu.cert</b>” if the user wants to build and test application for PPC85xx platform with CERT version</p>
                            <p>b.	Choose BSP as “<b>wrSbc8650</b>” and Build spec as “<b>PPC85XXgnu.debug</b>” if the user wants to build and test application for PPC85xx platform with debug version</p>
                            <p>c.	Choose BSP as “<b>simpc</b>” and Build spec as “<b>SIMNTgnu.debug</b>” if the user wants to build and test application for simulator platform. Note that only debug mode is supported by Wind River for simulator target. No CERT version is available for simulator.</p>
                        </blockquote>
                        <p>3.	Select the <b>Create from CPU</b> <b>and XML module file(s)</b> checkbox</p>
                        <p>4.	In the <b>CPU</b> field, specify the CPU type either PPC85XX or SIMNT depending on the target platform.</p>
                        <p>5.	Next to the <b>XML module file(s)</b> field, click <b>Add</b>. In the browser window that opens, navigate to the XML file(s) <code>wrSbc8560_default.xml</code> if target is PPC85xx or<code> simpc_default.xml</code> if target is Simulator under folder <code>../target/configRecord</code> and click <b>OK</b>.</p>
                        <p>6.	Click <b>Next</b>.</p>
                        <p>7.	The Partition Setup dialog box opens. In this dialog box, use the Set buttons to specify the module OS, the partition OS, the configuration record, and the <b>Add</b> button to specify the application partition.</p>
                        <p>8.	Click on <b>Set</b> button under configuration record. In the dialog box (“<b>Specify Configuration Record</b>”) that opens, select radio button “<b>Use an existing image Path</b>”. Click on “<b>Browse</b>” button and navigate to the folder <code>…/target/configRecord</code>”and file configRecord.reloc. Then click on <b>OK</b> button in the dialog box “<b>Specify Configuration Record</b>”. It assumes that user has already built appropriate version of config record.</p>
                        <p>&#160;</p>
                        <p>9.	Next Click on <b>Set</b> button under Module operating system . In the dialog box (“<b>Specify Module operating system</b>”) that opens, select radio button “<b>Use an existing image Path</b>”. Click on “<b>Browse</b>” button and navigate to the folder <code>…/target/CoreOS/&lt;build spec&gt;</code>”and file CoreOS.sm. Then click on <b>OK</b> button in the dialog box “<b>Specify Module operating system</b>”. It assumes that user has already built appropriate version of module operating system.</p>
                        <p>10.	Next Click on <b>Set</b> button under Partition operating system. In the dialog box (“<b>Specify Partition operating system</b>”) that opens, select radio button “<b>Use an existing image Path</b>”. Click on “<b>Browse</b>” button and navigate to the folder</p>
                        <blockquote>
                            <p>a.	…<code>/target/PartitionOS_ppc85xx_cert</code>”and file <code>PartitionOS_ppc85xx_cert.sm</code> if target is PPC85xx and certified version. Then click on <b>OK</b> button in the dialog box “<b>Specify Partition operating system</b>”.</p>
                            <p>b.	…<code>/target/PartitionOS_ppc85xx_debug</code>”and file<code> PartitionOS_ppc85xx_debug.sm</code> if target is PPC85xx and debug version. Then click on <b>OK</b> button in the dialog box “<b>Specify Partition operating system</b>”.</p>
                            <p>c.	…<code>/target/PartitionOS_simnt</code>”and file <code>PartitionOS_simnt.sm</code> if target is simulator. Then click on <b>OK</b> button in the dialog box “<b>Specify Partition operating system</b>”.</p>
                        </blockquote>
                        <p>11.	Next Click on <b>Add</b> button under Partitions. In the dialog box (“<b>Specify Partition</b>”) that opens, select radio button “<b>Use an existing image Path</b>”. Click on “<b>Browse</b>” button and navigate to the folder</p>
                        <blockquote>
                            <p>a.	<code>…/target/samples/08-benchmarks-perf/PPC85XXgnu/08-benchmarks-perf/NonDebug</code>”and file <code>08-benchmarks-perf.sm</code> if target is PPC85xx and certified version. Then click on <b>OK</b> button in the dialog box “<b>Specify Partition</b>”.</p>
                            <p>b.	<code>…/target/samples/08-benchmarks-perf/PPC85XXgnu.debug/08-benchmarks-perf/Debug</code>”and file <code>08-benchmarks-perf.sm</code> if target is PPC85xx and debug version. Then click on <b>OK</b> button in the dialog box “<b>Specify Partition</b>”.</p>
                            <p>c.	<code>…/target/samples/08-benchmarks-perf/SIMNTgnu/08-benchmarks-perf/Debug</code>”and file <code>08-benchmarks-perf.sm</code> if target is PPC85xx and certified version. Then click on OK button in the dialog box “<code>Specify Partition</code>”.</p>
                        </blockquote>
                        <p>12.	Click <b>Next</b>. The Indexer dialog box opens.</p>
                        <p>13.	Click <b>Finish</b>. Workbench creates the Integration project and displays it in the Project Explorer</p>
                    </blockquote>
                    <p>Build the project by right-clicking on the Integration Project name in the <b>Project Explorer</b> and choosing <b>Rebuild Project</b>.</p>
                </blockquote>
                <p>Now to run the sample, boot your target using the new image, as described below.</p>
                <p>You can run your system image in the simulator or in the real target through the Workbench. For all of the steps within the Workbench make sure that the Workbench <i>Advanced Device Development</i> perspective is displayed. The title bar shows the current perspective in the upper left of the Workbench window. To choose the Advanced Device</p>
                <p style="font-weight: bold;"><span style="font-weight: normal;">Development perspective, select</span> Window &gt; Open Perspective &gt; Advanced Device Development.</p>
                <p>Now to run the sample in the simulator:</p>
                <blockquote>
                    <p>Open Workbench.</p>
                    <p>Select <b>Target &gt; New Connection</b>. The <b>New Connection Wizard</b> appears.</p>
                    <p>Select the <b>Simulator Connection</b>. The wizard prompts you for a boot file name.</p>
                    <p>Select <b>Custom Simulator</b> and enter the path to the <b>boot.txt</b> file ../samples/sample_integration</p>
                    <p>Complete the wizard by clicking <b>Next</b> and in the last wizard page click <b>Finish</b>. Workbench will launch your module and connect to the simulator.</p>
                </blockquote>
                <p>&#160;</p>
                <h2>Building and running the api-sql-01-c-api-access sample</h2>
                <p>Before building this application, the following tasks need to be done</p>
                <blockquote>
                    <p>-	Replace <code>simpc_part1</code> with <code>api-sql-01-c-api-access</code> in <code>simpc_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if simulator version of application is desired</p>
                    <p>-	Replace <code>wrSbc8560_part1</code> with <code>api-sql-01-c-api-access</code> in <code>wrSbc8560_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if PPC85xx version of application is desired</p>
                </blockquote>
                <p>To create the sample <code><a href="../Programming/C/SDK_Samples/SQL_Samples/Access.htm">api-sql-01-c-api-access</a></code> project by importing the existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the <code><a href="../Programming/C/SDK_Samples/SQL_Samples/Access.htm">api-sql-01-c-api-access</a></code> project (<code>../samples/ api-sql-01-c-api-access</code>) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                    <p>Open the Build Properties dialog box by right-clicking on the project name and selecting <b>Properties</b>. Go to <b>Build Macros</b> tab and change <b>BLACKBOX</b> for <code>PPC85XXgnu.cert</code> and <code>PPC85XXgnu.debug</code> from <code>wrSbc8560_part1</code> to <code>api-sql-01-c-api-access</code>, and for simulator from simpc_part1 to <code><a href="../Programming/C/SDK_Samples/SQL_Samples/Access.htm">api-sql-01-c-api-access</a></code>.</p>
                </blockquote>
                <p>The next step is to select the appropriate build option.</p>
                <p>To build PPC85xx cert version, right click on the project name and then select <b>Build Options</b> &gt; <b>Set Active Build Spec</b>… &gt; <b>PPC85XXgnu</b> and unselect <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build PPC85xx debug version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; PPC85XXgnu.debug</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build simulator version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; SIMNTgnu</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>&#160;</p>
                <p>Build the <code><a href="../Programming/C/SDK_Samples/SQL_Samples/Access.htm">api-sql-01-c-api-access</a></code> project on its own by right-clicking on the project name and selecting Rebuild Project</p>
                <p>The next step is to build an integration project and run the sample, which are discussed in the previous example.</p>
                <p>To create a sample project by from scratch:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; New &gt; Project</b>.</p>
                    <p>In the dialog box that opens, expand the <b>VxWorks 653</b> node, select <b>VxWorks 653</b> <b>Application Project, and click Next</b>.</p>
                    <p>In the next dialog that opens choose the radio button Create project at external location.</p>
                    <p>To set the Directory field, click <b>Browse</b> and sample project directory under the <code>../samples</code> folder.</p>
                    <p>In the same dialog box, assign the project a name and click <b>Next</b>.</p>
                    <p>In the next dialog box, choose board support package (BSP) and a build spec.</p>
                    <p>In the same dialog box, choose the radio button Use <span class="Param">XML</span> module file and browse to appropriate xml file under the <code>../target/configRecord</code> folder. Provide the application name</p>
                    <p>Click <b>Next</b></p>
                    <p>The Indexer dialog box opens. Click <b>Finish</b>.</p>
                    <p>The Project Explorer now shows the application project</p>
                    <p>Open file <code>usrAppInit.c</code> and add</p>
                    <blockquote>
                        <div class="code-block"><pre>    &#160;
    extern int sample_main();
    &#160;</pre>
                        </div>
                        <p>and</p>
                        <p><code>sample_main();</code>  inside the function <code>void usrAppInit()</code></p>
                    </blockquote>
                    <p>Right-click on the project and select <b>Build Options &gt; Generate Include Search Path</b>…</p>
                    <p>In the dialog box that opens, un-check all check boxes and click <b>Next</b></p>
                    <p>&#160;</p>
                    <p>In the next dialog box click <b>Add</b> and browse to <code>…/samples/common</code> and click <b>OK</b></p>
                    <p>In the same dialog box click <b>Add</b> again and browse to <code>…/samples/commoncore</code> and click <b>OK</b></p>
                    <p>In the same dialog box click <b>Add</b> again and browse to<code> …/include</code> and click <b>OK</b></p>
                    <p>Click <b>Next</b></p>
                    <p>Click <b>Finish</b> in the next dialog box</p>
                    <p>&#160;</p>
                    <p>Right-click on the project and select <b>Build Options &gt; Set Active Build Spec…</b> and depending on release or debug version and target platform of the build select appropriate option.</p>
                    <p>In the Project Explorer, expand the Application project and then expand the <b>Build Targets</b> entry. You should then see a <b>.pm</b> and a <b>.sm</b> entry.</p>
                    <p>Right-click the <b>.pm</b> entry and select <b>Properties</b>. The <b>Build Properties</b> dialog appears.</p>
                    <p>Click the <b>Libraries</b> tab and then click <b>Add</b>. The <b>Add library to selected build spec</b> dialog appears.</p>
                    <p>Select the <b>Add full qualified library file</b> button, fill in the path to the partition -stubs file <b>and click OK</b>.</p>
                    <p>Click the <b>Libraries</b> tab and set <code>DEFINES</code> to <b>-D_VXWORKS=653</b></p>
                    <p>Click on <b>LIB</b> and then on <b>Edit…</b></p>
                    <p>In the Edit Build Macro dialog box, specify all the relevant <i>e</i>X<i>treme</i>DB run-time libraries options as mentioned in section “Application Build Procedure”</p>
                    <p>Click <b>OK</b> to close the <b>Build Properties</b> dialog.</p>
                </blockquote>
                <p>&#160;</p>
                <h2>Build Procedure for Cluster application development</h2>
                <p>The specific configuration to use <i>e</i>X<i>treme</i>DB runtime libraries for cluster application development requires the following.</p>
                <p>The application will include <code>PartitionOS_ppc603_cert-stub.o</code> or <code>PartitionOS_ppc603_debug-stub.o</code> or <code>PartitionOS_simnt-stub.o</code> – the symbols for the partition OS using the <i>Libraries</i> tab in the build properties dialog box. The appropriate version depends on whether a certified PPC603 or debug PPC 603 or simulator platform build is intended.</p>
                <blockquote>
                    <p>Edit <code>LIB</code> under the build macro tab of the build properties dialog box to include the appropriate run time libraries</p>
                </blockquote>
                <p>The application project can be created by using import project scheme from an existing project supplied as part of the package.</p>
                <p>A cluster VxWorks 653 application using a conventional mode in-memory-only database would have the following libraries as LIBs :</p>
                <div class="code-block"><pre>    &#160;
    libmcocluster.a libmcocltcp.a libmcoseri.a libmcolib.a libmcovtmem.a 
    libmconet.a libmcomem.a libmcosvxn653.a libmcomconv.a 
    libmcotmvcc.a libmcouwrt.a
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Modifying and Building Sample Applications</h2>
                <p>The following sample applications are modified and built for VxWorks 653 cluster applications. The entire procedure for building these applications is described next:</p>
                <blockquote>
                    <p><code><a href="../Programming/C/SDK_Samples/Cluster/Open.htm">cluster_open</a></code>
                    </p>
                    <p><code><a href="../Programming/C/SDK_Samples/Cluster/Perf.htm">cluster_perf</a></code>
                    </p>
                </blockquote>
                <p>Prior to building any of the samples, it is necessary to build the Core OS, Partition OS and the <code>configRecord</code> using the build procedures described earlier in this document (see the "<a href="#Building">Building the Partition OS</a>" section).</p>
                <p>&#160;</p>
                <h2>Important note regarding using network facilities with VxWorks 653</h2>
                <p>In VxWorks 653, the network stack (development or DO-178B Cert stack) executes in the core OS and <b>there is no API integrated with WindRiver distributions</b> for partitions to <b>access the core OS-based stack</b>. Therefore <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> (or <i>e</i>X<i>treme</i>DB<i> High Availability</i>) distributions don’t provide bindings of its network protocols (Cluster or HA) with the actual network stack. That said, there are two possible solutions:</p>
                <blockquote>
                    <p>1.	<b>Socket Wrapper / IO Driver</b>. WindRiver Professional Services has developed and delivered this for a number of customers. The delivery consists of a Socket API wrapper in each partition, which translates the socket calls (socket, bind, listen, recv, send, etc.,) to the underlying I/O Driver calls. The I/O Driver is a part of the coreOS and makes the real socket call (via open, close, and ioctl entry points) and returns the results to the partition.</p>
                    <p>2.	<b>ARINC 653 Ports</b>. if the application must be ARINC 653 compliant, then the network stack can be called via the ARINC 653 Ports (Queuing / Sampling Ports). This is accomplished via a Pseudo Port Driver integrated with the coreOS. An example of this exists in the IOLab example .The IOLab can be found on the Online Support site under Downloads -&gt; Patches &amp; Downloads, then selecting vxWorks653 as the product, 2.3 or 2.4 as the version, and Sample Code as the “type”.</p>
                </blockquote>
                <p>&#160;</p>
                <h2>Building the “cluster_open” sample</h2>
                <p>The <code><a href="../Programming/C/SDK_Samples/Cluster/Open.htm">cluster_open</a></code> sample can be built from an existing project. The package provides projects to build PPC603 cert, PPC603 debug and simulator version.</p>
                <p>Before building this application, the following tasks need to be done</p>
                <blockquote>
                    <p>-	Replace <code>simpc_part1</code> with <code>cluster_open</code> in <code>simpc_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if simulator version of application is desired</p>
                    <p>-	Replace <code>wrSbc834x_part1</code> with <code>cluster_open</code> in <code>wrSbc834x_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if PPC603 version of application is desired</p>
                </blockquote>
                <p>To create the sample <code><a href="../Programming/C/SDK_Samples/Cluster/Open.htm">cluster_open</a></code> project by importing the existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the <code><a href="../Programming/C/SDK_Samples/Cluster/Open.htm">cluster_open</a></code> project (<code>../samples/cluster_open</code>) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                    <p>Open the Build <b>Properties</b> dialog box by right-clicking on the project name and selecting Properties. Go to <b>Build Macros</b> tab and change <b>BLACKBOX</b> for PPC603 and PPC603.debug from <code>wrSbc834x_part1</code> to <code>cluster_open</code>, and for simulator from <code>simpc_part1</code> to <code>cluster_open</code>.</p>
                </blockquote>
                <p>The next step is to select the appropriate build option.</p>
                <p>To build PPC603 cert version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec…</b> <b>&gt; PPC603gnu</b> and unselect <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build PPC603 debug version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; PPC603gnu.debug</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build simulator version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; SIMNTgnu</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>&#160;</p>
                <p>Build the <code><a href="../Programming/C/SDK_Samples/Cluster/Open.htm">cluster_open</a></code> project on its own by right-clicking on the project name and selecting Rebuild Project.</p>
                <p>&#160;</p>
                <h2>Building the “cluster_perf” sample</h2>
                <p>Before building this application, the following tasks need to be done</p>
                <blockquote>
                    <p>-	Replace<code> simpc_part1</code> with<code> cluster_perf</code> in <code>simpc_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if simulator version of application is desired</p>
                    <p>-	Replace <code>wrSbc834x_part1</code> with <code>cluster_perf</code> in <code>wrSbc834x_default.xml</code> file (located under <code>…/target/configRecord</code>) and re-build config record if PPC603 version of application is desired</p>
                </blockquote>
                <p>To create the sample <code>cluster_perf</code> project by importing the existing project:</p>
                <blockquote>
                    <p>In Workbench, select <b>File &gt; Import</b></p>
                    <p>In the dialog box that opens select <b>Existing Projects into workspace</b> and click <b>Next</b>.</p>
                    <p>In the next dialog box, browse to the root directory of the <code>cluster_perf</code> project (<code>../samples/cluster_perf</code>) and Click <b>Finish</b>.</p>
                    <p>The project appears in the project explorer.</p>
                    <p>Open the Build  dialog box by right-clicking on the project name and selecting <b>Properties</b>. Go to <b>Build Macros</b> tab and change <b>BLACKBOX</b> for PPC603 and PPC603.debug from <code>wrSbc834x_part1</code> to <code>cluster_perf</code>, and for simulator from <code>simpc_part1</code> to <code>cluster_perf</code>.</p>
                </blockquote>
                <p>The next step is to select the appropriate build option.</p>
                <p>To build PPC603 cert version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; PPC603gnu</b> and unselect <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build PPC603 debug version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; PPC603gnu.debug</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>To build simulator version, right click on the project name and then select <b>Build Options &gt; Set Active Build Spec… &gt; SIMNTgnu</b> and also select <b>Build Options &gt; Set Active Build Spec… &gt; Debug Mode</b></p>
                <p>&#160;</p>
                <p>Build the <code><a href="../Programming/C/SDK_Samples/Cluster/Perf.htm">cluster_perf</a></code> project on its own by right-clicking on the project name and selecting <b>Rebuild Project</b></p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>