<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Statistics Logging</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>xSQL</i> Statistics Logging</h1>
            <blockquote>
                <p>When running as server, <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> collects information to allow examination of the state of the server without the need to attach a debugger to the server process. Also basic <a href="#Connecti">connection lock information</a> is provided to examine the states of the client connections.</p>
                <h3>For an overview see page <a href="../xSQL_Server_Instrumentation.htm"><i>xSQL</i> Server Instrumentation</a></h3>
                <h1>Statistics Logging</h1>
                <p>For each statement executed by <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> the following information is logged:</p>
                <ul>
                    <li value="1">The <code>IP-Address</code> and <code>port</code> of the connected client</li>
                    <li value="2">The current state of the client: <code>connected </code>or <code>disconnected</code></li>
                    <li value="3">The wall-time when the execution of the statement was started on the server</li>
                    <li value="4">The current state of the statement:<ul><li value="1">ACTIVE - the statement is active</li><li value="2">DONE - the statement has been successfully completed</li><li value="3">FAILED - the statement has completed with an error</li><li value="4">CANCELED - the statement has been interrupted , this is often due to some network problems (unable send or receive data)</li></ul></li>
                    <li value="5">The SQL statement itself</li>
                    <li value="6">The array of the query parameters</li>
                    <li value="7">The error message, (if the statement FAILED or was CANCELED)</li>
                    <li value="8">The maximum memory consumption during the statement execution (in bytes)</li>
                    <li value="9">The size of the result set: the number of rows that the <code>select</code> created or the <code>insert/update/delete</code> modified</li>
                    <li value="10">The size of the result set in bytes — the size of the set transmitted over the network from the server to the client. (This makes sense only for <code>select</code> statements.)</li>
                    <li value="11">The overall statement execution time in microseconds (from the time the statement was received until the server finished sending the result set back to the client)</li>
                    <li value="12">The overall statement result set transmission time in microseconds. (Consequently this value minus the overall statement execution time (10) represents the time the statement required to execute on the server locally.)</li>
                    <li value="13">Various statistics received from <code>getrusage</code> :<ul><li value="1"><code>CPU user time</code> -  the CPU time spent by the process running the statement in the user space</li><li value="2"><code>CPU kernel time</code> – the CPU time spent by the process running the statement in the kernel space</li><li value="3"><code>in bytes</code> - the number of bytes read from persistent media (does not include cache reads)</li><li value="4"><code>out bytes</code> - the number of bytes written to persistent media</li><li value="5"><code>nswaps</code> - the total swap size during the statement execution</li><li value="6"><code>ncsw</code> - the number of context switches during the statement execution</li></ul></li>
                </ul>
                <p>The <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> configuration parameters for logging parameters are defined in the <code><a href="../Startup_Options/Config_File_Sections/XLog_Params.htm">xlog_params</a></code><a name="kanchor432"></a> section. The runtime statistics for all SQL statements executed by a client are accumulated by the server process in the pseudo-table <code>xsql_stat</code> (actually a circular log buffer). </p>
                <p>To demonstrate logging, start <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> as server from directory <code>samples\xsql\scripts</code> in one console window with the following command:</p>
                <div class="code-block"><pre>&#160;
    ..\..\..\target\bin\xsql.exe -size 100m -p 5000 -c xsql.cfg
    press Enter to stop SQL server
&#160;</pre>
                </div>
                <p>Then run <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> as client from directory <code>samples\xsql\scripts</code> in a separate console window and execute the script file <code>index.sql</code> as follows:</p>
                <div class="code-block"><pre><a name="kanchor433"></a>&#160;
    ..\..\..\target\bin\xsql.exe @127.0.0.1:5000
    xsql started
    Runtime configuration
     Remote node(s)       : 127.0.0.1:5500
     Runtime              : Release
    XSQL&gt;script index.sql
    autoid  sid     sname   status  dat     city    keywords
    ------------------------------------------------------------------------------
    22      S4      Clark   20      12/31/1969 16:00:00     London  []
    21      S3      Black   30      12/31/1969 16:00:00     Paris   []
    20      S2      Jones   10      12/31/1969 16:00:00     Paris   []
    19      S1      Smith   20      12/31/1969 16:00:00     London  []
    23      S5      Adams   30      12/31/1969 16:00:00     Athens  []
    &#160;
    Selected records: 5
&#160;</pre>
                </div>
                <p>Now the runtime statistics can be accessed with the <code>xlog</code> command:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;xlog
    Node 127.0.0.1 :
    &#160;
    Timestamp                State  UsedMem      nRows  nBytes  ExecTime  TxTime     CPUUsage          I/O        SQL
    Client 127.0.0.1:6335 (ID 181407441810562, connected) :
    2017-01-18 15:39:38 :   DONE       4962          1       55      0us     0us     0us+0us           0/0        1:insert into S (sid,sname,status,city) values('S1', 'Smith', 20, 'London')
    2017-01-18 15:39:38 :   DONE       4960          1       55      0us     0us     0us+0us           0/0        2:insert into S (sid,sname,status,city) values('S2', 'Jones', 10, 'Paris')
    2017-01-18 15:39:38 :   DONE       4960          1       55      0us     0us     0us+0us           0/0        3:insert into S (sid,sname,status,city) values('S3', 'Black', 30, 'Paris')
    2017-01-18 15:39:38 :   DONE       4962          1       55   1003us     0us     0us+0us           0/0        4:insert into S (sid,sname,status,city) values('S4', 'Clark', 20, 'London')
    2017-01-18 15:39:38 :   DONE       4962          1       55      0us     0us     0us+0us           0/0        5:insert into S (sid,sname,status,city) values('S5', 'Adams', 30, 'Athens')
    2017-01-18 15:39:38 :   DONE        70K          5      520      0us     0us     0us+0us           0/0        6:select * from S
    2017-01-18 15:39:38 :   DONE       5311          5       55      0us     0us     0us+0us           0/0        7:delete from S
    &#160;</pre>
                </div>
                <p>Alternatively by querying the pseudo-table <code>xsql_stat</code> directly: </p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select clientid, sql from xsql_stat;
    clientid        sql
    ------------------------------------------------------------------------------
    181408391970457 insert into S (sid,sname,status,city) values('S1', 'Smith', 20, 'London')
    181408391970457 insert into S (sid,sname,status,city) values('S2', 'Jones', 10, 'Paris')
    181408391970457 insert into S (sid,sname,status,city) values('S3', 'Black', 30, 'Paris')
    181408391970457 insert into S (sid,sname,status,city) values('S4', 'Clark', 20, 'London')
    181408391970457 insert into S (sid,sname,status,city) values('S5', 'Adams', 30, 'Athens')
    181408391970457 select * from S
    181408391970457 delete from S
    181408391970457 select clientid, sql from xsql_stat
    &#160;
    Selected records: 8
    &#160;</pre>
                </div>
                <p>Or by calling function <code>xsql_stat()</code>:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select xsql_stat(true,true);
    #1
    ------------------------------------------------------------------------------
    [{181408391970457, 1, 1, 13129257332933040, 127.0.0.1, 6580, DONE, 
    insert into S (sid,sname,status,city) values('S1', 'Smith', 20, 'London'), , 4962, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 2, 1, 13129257332933040, 127.0.0.1, 6580, DONE, 
    insert into S (sid,sname,status,city) values('S2', 'Jones', 10, 'Paris'), , 4960, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 3, 1, 13129257332933040, 127.0.0.1, 6580, DONE, 
    insert into S (sid,sname,status,city) values('S3', 'Black', 30, 'Paris'), , 4960, 1, 55, 1002, 1002, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 4, 1, 13129257332934042, 127.0.0.1, 6580, DONE, 
    insert into S (sid,sname,status,city) values('S4', 'Clark', 20, 'London'), , 4962, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 5, 1, 13129257332934042, 127.0.0.1, 6580, DONE, 
    insert into S (sid,sname,status,city) values('S5', 'Adams', 30, 'Athens'), , 4962, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 6, 1, 13129257332934042, 127.0.0.1, 6580, DONE, 
    select * from S, , 72009, 5, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 7, 1, 13129257332938762, 127.0.0.1, 6580, DONE, 
    delete from S, , 5311, 5, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 8, 1, 13129257362524705, 127.0.0.1, 6580, DONE, 
    select clientid, sql from xsql_stat, , 78243, 8, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {181408391970457, 9, 1, 13129257513099572, 127.0.0.1, 6580, ACTIVE, 
    select xsql_stat(true,true), , 71198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}]
    &#160;
    Selected records: 1
&#160;</pre>
                </div>
                <h2>Pseudo-table xsql_stat</h2>
                <p>The <code>xsql_stat</code> table structure can be represented as follows (each row corresponds to a single SQL statement execution):</p>
                <div class="code-block"><pre>&#160;
    create table xsql_stat (
        clientid int,     -- client ID
        statementid int,  -- query ID
        connected, int,   -- client status: 1 - connected, 0 - disconnected
        begin int,        -- the time the query has been initiated
        ip string,        -- client IP
        port int,         -- client port
        state string,     -- "ACTIVE", "DONE", "FAILED" or "CANCELED"
        sql string,       -- SQL query
        failmsg string,   -- error message
        -- Query statistics and getrusage :
        memory int,
        rows int,
        bytes int,
        exectime int,
        txtime int,
        res_ucpu int,
        res_scpu int,
        res_inb int,
        res_outb int,
        res_maxrss int,
        res_nswap int,
        res_ncsw int
    );
    &#160;</pre>
                </div>
                <h2>Function xsql_stat()</h2>
                <p>Function <code>xsql_stat()</code> has two boolean parameters <code>show_disconnected_clients</code>, and <code>show_statistics_queries</code> that determine whether to display  statistics for clients that have been disconnected and whether to display statistics for queries against the <code>xsql_stat</code> table.</p>
                <p>The function returns information in the form of an array of structures with the  set of fields defined above. (Note that when called via the Remote SQL engine, the entire result is returned in a single very long packet and all of these fields must fit into the communication buffer whose size is defined by the configuration file <code>sql_comm_buffer</code> parameter. If many logs are collected, it is quite possible to receive the “buffer too small” error. If instead of calling function <code>xsql_stat()</code> the <code>xsql_stat</code> table is queried, there is no limit to the number of log records to receive.)</p>
                <h2>Function xsql_show_log(int)</h2>
                <p>The function <code>xsql_show_log(</code>) can be called from a remote client to display the  last lines from the server's log. It has a single argument <code>int n_lines</code> that determines the number of lines of output to retrieve from the server. For examples</p>
                <div class="code-block"><pre><a name="kanchor434"></a><a name="kanchor435"></a>&#160;
    XSQL&gt;select xsql_show_log(10);
    #1
    ------------------------------------------------------------------------------
    2017-02-05 18:31:44.298748 : xsql started
    2017-02-05 18:31:44.298814 : Runtime configuration
    2017-02-05 18:31:44.298819 :   Transaction manager  : MURSIW
    2017-02-05 18:31:44.298825 :   Storage (transient)  : Conventional memory, 100M
    2017-02-05 18:31:44.298829 :   Storage (persistent) : Not supported
    2017-02-05 18:31:44.298833 :   Runtime              : Debug
&#160;
    Selected records: 1
    &#160;</pre>
                </div>
                <h2>Command xlog</h2>
                <p>The command <code>xlog</code> implements the query “<code>select * from xsql_stat ...</code>' and  (by default) groups the results first by shard and then by <code>clientID</code>. For example, if there are two shards, the following statistics might be displayed:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;xlog
    Node 127.0.0.1:5000 (shard 1) :
    Timestamp               State  UsedMem   nRows  nBytes ExecTime  TxTime CPUUsage I/O        SQL
    Client 127.0.0.1:38800 (ID 48885306639241, connected) :
    2016-02-23 23:43:34 :   DONE       6706   4096   55    23ms    47us    23ms+0us  0/0        15:insert into a select 1 from a
    2016-02-23 23:43:34 :   DONE       6706    8192  55    39ms    57us    39ms+0us  0/0        16:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   16384  55    66ms    22us    65ms+0us  0/0        17:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   32768  55   122ms    58us   122ms+0us  0/0        18:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   65536  55   251ms    77us   252ms+0us  0/0        19:insert into a select 1 from a
    2016-02-23 23:43:36 :   DONE       6706  131072  55   532ms    77us   532ms+0us  0/0        20:insert into a select 1 from a
    2016-02-23 23:43:41 :   DONE       6706  262144  55  1085ms    76us  1085ms+0us  0/0        21:insert into a select 1 from a
    2016-02-23 23:43:57 :   DONE        69K  524288 5632K 3541ms 3391ms 145ms+2000us 0/0        22:select * from a
    &#160;
    Node 127.0.0.1:5001 (shard 2) :
    Timestamp                State  UsedMem   nRows  nBytes ExecTime TxTime CPUUsage  I/O        SQL
    Client 127.0.0.1:57335 (ID 48885306639241, connected) :
    2016-02-23 23:43:34 :   DONE       6706    4096  55   21ms    58us    21ms+0us    0/0        15:insert into a select 1 from a
    2016-02-23 23:43:34 :   DONE       6706    8192  55   42ms    24us    42ms+0us    0/0        16:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   16384  55   62ms    34us    63ms+0us    0/0        17:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   32768  55  124ms    36us   124ms+0us    0/0        18:insert into a select 1 from a
    2016-02-23 23:43:35 :   DONE       6706   65536  55  254ms    54us   255ms+0us    0/0        19:insert into a select 1 from a
    2016-02-23 23:43:36 :   DONE       6706  131072  55  525ms    68us   526ms+0us    0/0        20:insert into a select 1 from a
    2016-02-23 23:43:41 :   DONE       6706  262144  55  1090ms    67us  1091ms+0us   0/0        21:insert into a select 1 from a
    2016-02-23 23:43:57 :   DONE        69K  524288  5632K 3567ms 3416ms 149ms+3000us 0/0        22:select * from a
    &#160;</pre>
                </div>
                <p>Alternatively, the parameter <code>byquery</code> can be specified to group the results first by <code>clientID</code> and then by <code>queryID</code> for each shard. This makes it is easier to see the execution statistics of the query on different shards. For example:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;xlog byquery
    Client 127.0.0.1:38800 (ID 48885306639241, connected) :
    Node  Timestamp            State UsedMem nRows nBytes ExecTime TxTime CPUUsage  I/O        ErrorMsg
    Query [22] select * from a :
     01:01 2016-02-23 23:43:57 : DONE  69K    524288 5632K 3541ms  3391ms 145ms+2000us 0/0
     02:01 2016-02-23 23:43:57 : DONE  69K    524288 5632K 3567ms  3416ms 149ms+3000us 0/0
    Query [21] insert into a select 1 from a :
     01:01 2016-02-23 23:43:41 : DONE  6706    262144   55  1085ms    76us 1085ms+0us  0/0
     02:01 2016-02-23 23:43:41 : DONE  6706    262144   55  1090ms    67us 1091ms+0us  0/0
    Query [20] insert into a select 1 from a :
     01:01 2016-02-23 23:43:36 : DONE  6706    131072   55   532ms    77us 532ms+0us   0/0
     02:01 2016-02-23 23:43:36 : DONE  6706    131072   55   525ms    68us  526ms+0us  0/0
    Query [19] insert into a select 1 from a :
     01:01 2016-02-23 23:43:35 : DONE  6706     65536   55   251ms    77us   252ms+0us 0/0
     02:01 2016-02-23 23:43:35 : DONE  6706     65536   55   254ms    54us   255ms+0us 0/0
    Query [18] insert into a select 1 from a :
     01:01 2016-02-23 23:43:35 : DONE  6706     32768   55   122ms    58us   122ms+0us 0/0
     02:01 2016-02-23 23:43:35 : DONE  6706     32768   55   124ms    36us   124ms+0us 0/0
    Query [17] insert into a select 1 from a :
     01:01 2016-02-23 23:43:35 : DONE  6706      16384  55    66ms    22us    65ms+0us 0/0
     02:01 2016-02-23 23:43:35 : DONE  6706      16384  55    62ms    34us    63ms+0us 0/0
    Query [16] insert into a select 1 from a :
     01:01 2016-02-23 23:43:34 : DONE  6706       8192  55    39ms    57us    39ms+0us 0/0
     02:01 2016-02-23 23:43:34 : DONE  6706       8192  55    42ms    24us    42ms+0us 0/0
    &#160;</pre>
                </div>
                <p>By default, the <code>xlog</code> command does not output records for any disconnected clients, or queries against the <code>xsql_stat</code> table. However these additional statistics can be displayed by specifying the <code>all</code> parameter. For example:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;xlog all
    Node 127.0.0.1:5000 (shard 1) :
    Timestamp            State UsedMem  nRows  nBytes ExecTime TxTime CPUUsage   I/O        SQL
    Client 127.0.0.1:38800 (ID 48885306639241, connected) :
    2016-02-23 23:43:35 : DONE   6706   32768   55     122ms    58us  122ms+0us  0/0        18:insert into a select 1 from a
    2016-02-23 23:43:35 : DONE   6706   65536   55     251ms    77us  252ms+0us  0/0        19:insert into a select 1 from a
    2016-02-23 23:43:36 : DONE   6706  131072   55     532ms    77us  532ms+0us  0/0        20:insert into a select 1 from a
    2016-02-23 23:43:41 : DONE   6706  262144   55    1085ms    76us 1085ms+0us  0/0        21:insert into a select 1 from a
    2016-02-23 23:43:57 : DONE   69K   524288 5632K   3541ms  3391ms 145ms+2000us 0/0        22:select * from a
    2016-02-24 01:22:03 : DONE   76K       10  2627    220us    45us  0us+0us     0/0        23:select * from xsql_stat
    2016-02-24 01:22:12 : DONE   76K       10  2634    191us    48us  0us+0us     0/0        25:select * from xsql_stat
    2016-02-24 01:24:20 : DONE   76K       10  2641    187us    49us  0us+0us     0/0        27:select * from xsql_stat
    2016-02-24 01:28:54 : DONE   76K       10  2648    204us    56us  0us+0us     0/0        29:select * from xsql_stat
    2016-02-24 01:31:13 :ACTIVE  67K        0     0     76us     0us  0us+0us     0/0        31:select * from xsql_stat
    Client 127.0.0.1:39011 (ID 48891781117793, disconnected) :
    2016-02-24 01:31:08 : DONE   70K        1   432    211us    37us  0us+0us     0/0        1:select * from Metatable
    Node 127.0.0.1:5001 (shard 2) :
    Timestamp            State UsedMem  nRows  nBytes ExecTime TxTime CPUUsage   I/O        SQL
    Client 127.0.0.1:57335 (ID 48885306639241, connected) :
    2016-02-23 23:43:35 : DONE   6706   32768     55    124ms    36us  124ms+0us  0/0        18:insert into a select 1 from a
    2016-02-23 23:43:35 : DONE   6706   65536     55    254ms    54us   255ms+0us 0/0        19:insert into a select 1 from a
    2016-02-23 23:43:36 : DONE   6706  131072     55    525ms    68us   526ms+0us 0/0        20:insert into a select 1 from a
    2016-02-23 23:43:41 : DONE   6706  262144     55   1090ms    67us  1091ms+0us 0/0        21:insert into a select 1 from a
    2016-02-23 23:43:57 : DONE    69K  524288  5632K   3567ms  3416ms 149ms+3000us 0/0        22:select * from a
    2016-02-24 01:22:03 : DONE    76K      10   2627    220us    45us    0us+0us   0/0        24:select * from xsql_stat
    2016-02-24 01:22:12 : DONE    76K      10   2634    152us    52us     0us+0us  0/0        26:select * from xsql_stat
    2016-02-24 01:24:20 : DONE    76K      10   2641    180us    65us     0us+0us  0/0        28:select * from xsql_stat
    2016-02-24 01:28:54 : DONE    76K      10   2648    150us    49us     0us+0us  0/0        30:select * from xsql_stat
    2016-02-24 01:31:13 :ACTIVE   67K       0      0     50us     0us     0us+0us  0/0        32:select * from xsql_stat
    Client 127.0.0.1:57546 (ID 48891781117793, disconnected) :
    2016-02-24 01:31:08 : DONE    70K       1      432   181us    30us    0us+0us  0/0
    1:select * from Metatable
    &#160;</pre>
                </div>
                <h2>Command trace</h2>
                <p>Some statistics can be also displayed after each query by turning on the <code>trace</code> feature (command <code>trace on</code>). Enabling trace shows the statement being executed and elapsed time. For example:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;trace on
    XSQL&gt;select * from Account;
    Execute statement: select * from Account
    userid  name    lastlog
    -----------------------------------------------------------------------
    101     Dennis Hamer    01/23/15 14:15:03
    102     Edith Jackson   02/12/15 19:30:16
    103     Eric Harmon     02/14/15 09:34:47
    Selected records: 3
    Elapsed time: 0
    XSQL&gt;insert into Account values (104, 'James Taylor', '2015-03-30 19:24:27');
    Execute statement: insert into Account values (104, 'James Taylor', '2015-03-30
    19:24:27')
    Update 1 records
    Elapsed time: 0
    XSQL&gt;delete from Account where userid = 104;
    Execute statement: delete from Account where userid = 104
    Tree index search through table 'Account' &lt; userid &gt;
    expression: (Eq (Load (Table Account).userid) 104)
    Update 1 records
    Elapsed time: 0
    &#160;</pre>
                </div>
                <p>When using the <i>DistibutedSqlEngine</i> with two shards (on ports 5000 and 5001) the <code>trace</code> output looks like the following:</p>
                <div class="code-block"><pre>&#160;
    Shard:Node Used Memory  nRows    nBytes   Exec.Time  Transmit.Time  Host:Port
    1:1           71161   524288   5767674     3541205        3391115  127.0.0.1:5000
    2:1           71161   524288   5767674     3567462        3416186  127.0.0.1:5001
    &#160;</pre>
                </div>
                <p>(Note that in the example above most of the time was spent in network transmission.)</p>
                <h2>Accessing statistics from a Python client</h2>
                <p>Server query statistics can also be retrieved using a Python client to display statistics contained in the Python dictionary. This is done by using the <code>stats</code> member of the <i>connection</i> object. For example:</p>
                <div class="code-block"><pre>&#160;
    Print “Server stats: %s” % conn.stats
    &#160;</pre>
                </div>
                <p>This will print out a line like the following:</p>
                <div class="code-block"><pre>    &#160;
    Server stats: {'execution_time': 158L, 'transmission_time': 0L, 'result_size_rows': 2L,'result_size_bytes': 137L, 'memory': 72356L}
    &#160;</pre>
                </div>
                <h2>Creating and saving log files</h2>
                <p>If a database fatal error has occurred or one of the fatal signals have been intercepted (<code>SIGSEGV, SIGBUS, SIGILL, SIGFPE</code>), all collected logs are written to an external file with a name formatted as follows:<code> xlogs_YYYYMMDD_HHmmss_&lt;PID&gt;.txt</code>.</p>
                <p>On Linux platforms, files with names like <code>xsql_YYYYMMDD_HHmmss_&lt;PID&gt;_&lt;TID&gt;.dmp</code> are used to store backtraces of all active tasks. On Windows, minidump files are created. This is a standard Windows form of keeping backtraces and other information related to failed processes. (Unfortunately in order to view the dump files it is necessary to utilize the associated <code>pdb</code> files, which must be also saved).</p>
                <p>These log files can also be created on demand by calling the <code>xsql_dumplog()</code> function. For example:</p>
                <div class="code-block"><pre>&#160;
    select xsql_dumplog('my_log.txt');
    &#160;</pre>
                </div>
                <p>Likewise the <code>dumplog</code> command can be invoked:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;dumplog mylog.txt
    Logs are successfully dumped
    &#160;</pre>
                </div>
                <h2>Logging xSQL sessions</h2>
                <p>It can be useful to record a session of <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> operations. The <code>logsession on|off [&lt;filename&gt;]</code> command creates a session file and writes the complete output from a session into it. (Note that the output is not affected by the <code>seqformat</code> and <code>arrayformat</code> options - it always saves all elements of sequences and arrays in the long format.) If a filename is not specified, <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> creates a file with the name <code>xsql.session.&lt;curr_epoch_time&gt;</code>. It is possible to switch session logging on and off at runtime several times. For example:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;logsession on "mysession.log"
    XSQL&gt;select * from SomeTable;
    XSQL&gt;logsession off
    XSQL&gt;select * from TempTable;
    XSQL&gt;logsession on "mysession.log"
    &#160;</pre>
                </div>
                <h1><a name="Connecti"></a>Connection Lock Information</h1>
                <p>As explained in page <a href="../xSQL_Locking_Info.htm">Connection Lock Profiling</a>, the locking profile is output from the call to <code><a href="../../../Programming/SQL/Functions/Miscellaneous/stop_profile.htm">stop_profile()</a></code>consists of the <code>percent</code>, number of <code>hits</code> and the current wait <code>event</code>. In addition, the following information is available from the <i>ConnectionInfo</i> table with a simple query like the following:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select * from ConnectionInfo;
    Id	Pid	Tid	Status	SqlStmt	SubTransLevel WaitEvent	Snapshot
    -------------------------------------------------------
    0	14052	140452212647744	Running	select * from ConnectionInfo	1	NONE	0
    1	14053	139944457815872	Idle	commit transaction	0 NONE	0
&#160;
    Selected records: 2
    &#160;</pre>
                </div>
                <p>where the columns have the following meaning:</p>
                <ul>
                    <li value="1"><code>Id</code>: the connection identifier</li>
                    <li value="2"><code>Pid</code>: the process identifier (as reported by <code>mco_get_pid()</code>)</li>
                    <li value="3"><code>Tid</code>: the thread identifier (as reported by <code>mco_get_thread_id()</code>)</li>
                    <li value="4"><code>Status</code>: one of the following: <code>Idle</code>, <code>Idle in transaction</code> or <code>Running</code></li>
                    <li value="5"><code>SqlStmt</code>: the text of the last executed SQL statement (truncated to 128 bytes)</li>
                    <li value="6"><code>SubTransLevel</code>: the current transaction nesting level</li>
                    <li value="7"><code>WaitEvent</code>: the wait event name on which the connection is currently waiting</li>
                    <li value="8"><code>Snapshot</code>: the transaction's active snapshot number</li>
                </ul>
                <p>(Note that, to be able to use this function, it is necessary to use <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> server, or connect to a shared memory database.)</p>
                <p>This information is obtained without any locking, so it's consistency is not guaranteed (for example the query text may not be correct or the transaction state is not consistent with nesting level). But it can not cause a crash of the application. </p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>