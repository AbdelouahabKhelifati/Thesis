<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sharding with xSQL</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Sharding with <i>xSQL</i></h1>
            <blockquote>
                <p>Sharding is a way of distributing database data across multiple servers or splitting a database into multiple instances (“shards”) within a single process. For multiple servers, sharding is accomplished via the <i>McoDistributedSqlEngine</i>. Creating multiple shards within a single process is managed through the <i>SqlAggregator</i> class. <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>can be used to manage database shards in shared memory. For example, two shards can be created in two different console windows as follows:</p>
                <div class="code-block"><pre>&#160;
    Console 1:
    &#160;
    ./xsql -shared -dbname xsqldb0 -size 100M -i
    &#160;
    Console 2:
    &#160;
    ./xsql -shared -dbname xsqldb1 -size 100M -i
    &#160;</pre>
                </div>
                <p>Then the two shards can be managed by a third instance of <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> launched with the command line option -shards. For example:</p>
                <div class="code-block"><pre>&#160;
    Console 3:
    &#160;
    ./xsql xsqldb%d -shards 2
    &#160;</pre>
                </div>
                <p>The configuration file parameter <code><a href="Startup_Options/Config_File_Sections/ExtremeSQL_Params.htm">sql_n_shards</a></code> can also be used to start <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to manage database shards.</p>
                <p>When a database is created and different shards created on separate network nodes, the <i>McoDistributedSqlEngine</i> sends a query to one of the network nodes, or broadcasts queries to all nodes and merges results accordingly.</p>
                <p>To demonstrate, suppose we have database schema</p>
                <div class="code-block"><pre>&#160;
    create table Orders ( orderId int primary key,
                product string,
                customer string,
                price double,
                volume double )
                &#160;</pre>
                </div>
                <p>and data in CSV format:</p>
                <div class="code-block"><pre>    &#160;
    orderId|product|customer|price|volume
    1|A|james|10.0|100
    2|B|bob|50.0|200
    3|A|paul|11.0|300
    4|C|paul|100.0|150
    5|B|bob|52.0|100
    6|B|bob|49.0|500
    7|A|james|11.0|100
    8|C|paul|105.0|300
    9|A|bob|12.0|400
    10|C|james|90.0|200
    &#160;</pre>
                </div>
                <p>First of all, we need to create several databases and run <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> as a server on them. We will do this by using the following command-line parameters:</p>
                <div class="code-block"><pre>&#160;
    xsql -size 10m -p 10001
    &#160;</pre>
                </div>
                <p>This creates an in-memory database with size 10 Mbytes and starts <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> as a server listening on port number 10001. Then we start two other server instances on ports 10002 and 10003:</p>
                <div class="code-block"><pre>    &#160;
    xsql -size 10m -p 10002
    &#160;
    xsql -size 10m -p 10003
    &#160;</pre>
                </div>
                <p>Now we can connect to all three servers as a client using the <i>McoDistributedSqlEngine</i> by starting <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> with the addresses of these servers as command-line options:</p>
                <div class="code-block"><pre>&#160;
    xsql @127.0.0.1:10001 @127.0.0.1:10002 @127.0.0.1:10003
    &#160;</pre>
                </div>
                <p>Alternatively the addresses could be stored in a config file:</p>
                <div class="code-block"><pre>&#160;
    File client.cfg:
&#160;
    {
        remote_client : [ "127.0.0.1:10001", "127.0.0.1:10002","127.0.0.1:10003"]
    }
    &#160;</pre>
                </div>
                <p>Then we would simply start xSQL with the following command:</p>
                <div class="code-block"><pre>    &#160;
    xsql -c client.cfg
    &#160;</pre>
                </div>
                <p>After connecting to servers, <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> goes to interactive mode. First we create a table on all nodes with command:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;create table Orders (orderId int primary key, product string, 
                    customer string, price double, volume double);
    &#160;</pre>
                </div>
                <p>By default, the distributed SQL engine sends queries to all nodes. So the create table statement will be executed by all three nodes. Then we can distribute data across the servers using the following SQL statement:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;insert into Orders select * from foreign table (path='order.csv', skip=1,nostop=1) 
        as Orders where mod(orderId, %#)=%@;
    &#160;</pre>
                </div>
                <p>The pseudo-parameters <code>%#</code> and <code>%@</code> refer to the total number of nodes and the zero-based node Id respectively. In our case <code>%#</code> equals 3 and <code>%@</code> is 0 for the first server (running on port 10001), 1 for the second server and 2 for the third server. For example, on the second server the statement will be equivalent to</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;insert into Orders select * from foreign table (path='order.csv', skip=1,nostop=1) 
        as Orders where mod(orderId, 3)=1;
        &#160;</pre>
                </div>
                <p>As a result orders with Ids 1, 4, 7 and 10 will be inserted on node 2. (Note that if you start servers on different hosts, the file <code>order.csv</code> must be accessible on all hosts.) To check the data we select records from all nodes:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select * from Orders order by orderId;
    orderId 	product 	customer    price   	     volume
    ------------------------------------------------------------------------------------
    1       	A      	 james   	10      	100
    2      	B       	bob     	50      	200
    3       	A       	paul    	11      	300
    4       	C       	paul    	100     	150
    5       	B       	bob     	52      	100
    6       	B       	bob     	4
    9      	500
    7       	A       	james   	11      	100
    8       	C       	paul    	105     	300
    9       	A       	bob     	12      	400
    10      	C       	james   	90      	200
&#160;
    Selected records: 10
    &#160;</pre>
                </div>
                <p>And select records from the second server only:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;2:select * from Orders;
    orderId 	product 	customer    price 	volume
    ------------------------------------------------------------------------------------
    1       	A       	james   	10       	100
    4       	C       	paul    	100	150
    7       	A       	james   	11	100
    10      	C       	james   	90       	200
    &#160;</pre>
                </div>
                <h2>Sorting result rows</h2>
                <p>When the data is distributed in such a way that the merged query results  don't need to be sorted in any particular order, it is recommended to use the specialized syntax with the “<code>*:</code>” prefix in the SQL statement. For example:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;*:select * from Orders;
    &#160;</pre>
                </div>
                <p>instead of</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select * from Orders;
    &#160;</pre>
                </div>
                <p>The “<code>*:</code>”  prefix instructs the SQL engine to <i>not resort</i> the combined result set, which is beneficial from a performance standpoint. Both statements will create a result set that includes the results from the first shard concatenated with the result set from the second shard and so on for each shard; and both final results are correct. But if the statement requires that the final results are sorted, then only the first form should be used. In other words, the following <code>select</code> returns a sorted result set:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select * from Orders  order by orderId;
    orderId 	product 	customer	 price 	volume
    ------------------------------------------------------------------------------
    1       	A      	 james   	10      	100
    2      	B       	bob     	50      	200
    3       	A       	paul    	11      	300
    4       	C       	paul    	100     	150
    5       	B       	bob     	52      	100
    6       	B       	bob     	49      	500
    7       	A       	james   	11      	100
    8       	C       	paul    	105     	300
    9       	A       	bob     	12      	400
    10      	C       	james   	90      	200
    &#160;
    Selected records: 10
    &#160;</pre>
                </div>
                <p>However, the following <code>select</code>, though faster, returns an unordered (<i>incorrect!</i>) result set:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;*:select * from Orders  order by orderId;
    orderId 	product 	customer  	price   	volume
    ------------------------------------------------------------------------------
    3      	A       	paul    	11      	300
    6      	B       	bob     	49      	500
    9       	A       	bob     	12      	400
    1       	A       	james   	10      	100
    4       	C       	paul    	100     	150
    7       	A       	james   	11      	100
    10      	C       	james   	90      	200
    2       	B       	bob     	50      	200
    5       	B       	bob     	52      	100
    8       	C       	paul    	105     	300
    &#160;
    Selected records: 10
    &#160;</pre>
                </div>
                <p>For another example consider the <code>select</code> statement:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select  count(*) from Orders ;
    #1
    ------------------------------------------------------------------------------
    10
    &#160;
    Selected records: 1
    &#160;</pre>
                </div>
                <p>This statement returns a single row with the correct aggregate value of 10 - the total number of rows from all of the shards. The SQL engine merges the result sets from each shard. But the following <i>unsorted</i> form of the statement returns three rows which display the correct count for each shard:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;*:select count(*) from Orders;
    #1
    ------------------------------------------------------------------------------
    3
    4
    3
    &#160;
    Selected records: 3
    &#160;</pre>
                </div>
                <p>Here the remote SQL engine does not merge the results sets. </p>
                <p>(Note that the “<code>*:</code>” prefix is simply an extension of the shard number “<code>N:</code>” notation that instructs the SQL engine to execute the statement on only the specified single shard; naturally the <code>*</code> indicates "all shards").</p>
                <h2>More elaborate distributed queries</h2>
                <p>We can also perform more elaborate queries on distributed shards, using <code>group by</code> and <code>order by</code> clauses. For example:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select product, sum(price*volume) as s from Orders group by product;
    product s
    -----------------------------------------------------------------------
    A       10200.000000
    B       39700.000000
    C       64500.000000
    &#160;
    Selected records: 3
    &#160;</pre>
                </div>
                <p>and:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;select customer, sum(price*volume) as s from Orders group by customer order by s;
    customer        s
    -----------------------------------------------------------------------
    james   20100.000000
    bob     44500.000000
    paul    49800.000000
    &#160;
    Selected records: 3
    &#160;</pre>
                </div>
                <p>Here the <code>sum()</code> function is applied to the merged result sets from all shards.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>