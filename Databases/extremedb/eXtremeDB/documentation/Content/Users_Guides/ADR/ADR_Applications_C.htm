<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB ARF Applications in C</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>DB ARF Applications in C</h1>
            <blockquote>
                <p>The <a href="ADR_Applications.htm">ARF Applications page</a> describes the ARF <i>communicator</i> and the <i>replicator</i> objects and the basic steps for implementing ARF (IoT) applications. This page describes the <i>e</i>X<i>treme</i>DB<i> Active Replication Fabric</i> C API for  implementing automatic or on-demand data exchange between collection points and servers.</p>
                <p><a name="kanchor512"></a>ARF runtime support includes two libraries: the <b>communication library</b> <code>mcoiotcomm</code> and the <b>protocol library</b> <code>mcoiotrepl</code>.  The communication library deals with network connections (IP sockets) and provides a set of functions and structures  to the protocol library. The architecture is similar to the architecture of <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> (<code>mcocltcp</code> + <code>mcocluster</code>) and <i>e</i>X<i>treme</i>DB<i> High Availability</i> (<code>mconwtcp</code> + <code>mcoha</code>). ARF applications can use the APIs exposed by both the communication and protocol libraries. </p>
                <p>The ARF API is practically identical for <i>device</i> and <i>server</i> databases and all functions can be used by the both device and server applications.</p>
                <p>As explained in the <a href="ADR_Applications.htm">ARF Applications page</a>, the <i>communicator</i> and the <i>replicator</i> objects belong to the process that creates them and <i>are never shared between multiple processes</i>. By default both objects are allocated by the dynamic allocator through <a href="../../Programming/C/Core_Functions/Static/Auxiliary/System_Wrappers/sys_malloc.htm"><code>mco_sys_malloc()</code></a>. The other possible allocator is a static allocator which has a limited number of connections and a limited dictionary size. </p>
                <h2>Example</h2>
                <p>To illustrate usage of the ARF C API, the following code snippets illustrate a simple ARF server and device application.</p>
                <h3>IoT Device Application</h3>
                <p>Consider the following simple schema definition for an edge device:</p>
                <div class="code-block"><pre>&#160;
    declare database iotdevice;
    declare auto_oid[100];
    &#160;
    iot device 1000;
    &#160;
    uptable class Sensor 
    {
        datetime      ts;
        unsigned&lt;4&gt;   sensorId;
        double        value;
&#160;
        hash&lt;ts, sensorId&gt; idx[100];
    };
    &#160;
    downtable class Config 
    {
        unsigned&lt;4&gt;  param_id;
        double       value;
&#160;
        tree&lt;param_id&gt; idx;
    };
    &#160;</pre>
                </div>
                <p>The following code snippet would initialize the ARF runtime, and create the <i>communicator</i> and <i>replicator</i> for the device:</p>
                <div class="code-block"><pre>&#160;
    int main(int argc, char *argv[])
    {
        ...
        mco_iot_replicator_params_t repl_params;
        mco_iot_comm_params_t comm_params;
        mco_iot_replicator_h repl;
        mco_iot_comm_h comm;
        const char *conn_string  "127.0.0.1:15000";
        ...
&#160;
        mco_iot_comm_params_init(&amp;comm_params);
        CHECK(mco_iot_comm_create(&amp;comm_params, &amp;comm));
        mco_iot_replicator_params_init(&amp;repl_params);
        CHECK(mco_iot_replicator_create(db, comm, &amp;repl_params, &amp;repl));
        CHECK(mco_iot_replicator_connect(repl, conn_string, 2*1000, 0));
        ...
    &#160;</pre>
                </div>
                <p>Then, after inserting and/or modifying <i>Sensor</i> data, the device could be synchronized with the server database and then shut down with code like the following:</p>
                <div class="code-block"><pre>&#160;
        CHECK(mco_iot_replicator_sync(repl, MCO_IOT_SERVER_AGENT_ID, MCO_IOT_SYNC_PULL | MCO_IOT_SYNC_PUSH | MCO_IOT_SYNC_WAIT));
&#160;
        PrintConfig(db);
    &#160;
        CHECK(mco_iot_replicator_stop(repl));
        CHECK(mco_iot_comm_stop(comm));
        CHECK(mco_iot_replicator_destroy(repl));
        CHECK(mco_iot_comm_destroy(comm));
        CHECK(mco_db_disconnect(db));
        CHECK(mco_db_close(db_name));
        free(dev.dev.conv.ptr);
        mco_runtime_stop();
        return 0;
    }
&#160;</pre>
                </div>
                <p>Note that the function <code>PrintConfig()</code> simply prints out the configuration parameters downloaded from the server database by <code>mco_iot_replicator_sync()</code>.</p>
                <h3>IoT Server Application</h3>
                <p>Consider the following simple schema definition for the server database interfacing with the above device application:</p>
                <div class="code-block"><pre>&#160;
    declare database iotserver;
    declare auto_oid[100];
    iot server 100;
&#160;
    uptable class Sensor 
    {
        datetime      ts;
        unsigned&lt;4&gt;   sensorId;
        double        value;
        &#160;
        tree&lt;ts, sensorId&gt; idx;
    };
    &#160;
    downtable class Config 
    {
        unsigned&lt;4&gt;  param_id;
        double       value;
&#160;
        hash&lt;param_id&gt; idx[100];
    };
    &#160;</pre>
                </div>
                <p>The following code snippet would initialize the ARF runtime, create the <i>communicator</i> and <i>replicator</i>, and begin listening for the device connections:</p>
                <div class="code-block"><pre>&#160;
    int main(int argc, char *argv[])
    {
        ...
        mco_iot_replicator_params_t repl_params;
        mco_iot_comm_params_t comm_params;
        mco_iot_replicator_h repl;
        mco_iot_comm_h comm;
        ...
&#160;
        mco_iot_comm_params_init(&amp;comm_params);
        CHECK(mco_iot_comm_create(&amp;comm_params, &amp;comm));
        mco_iot_replicator_params_init(&amp;repl_params);
        CHECK(mco_iot_replicator_create(db, comm, &amp;repl_params, &amp;repl));
        CHECK(mco_iot_comm_listen(comm, "15000", 0));
        ...
    &#160;</pre>
                </div>
                <p>The following code could be used to modify the <i>Config</i> data and propagate the changes to devices:</p>
                <div class="code-block"><pre>&#160;
    void InsertConfig(mco_db_h db)
    {
        Config obj;
        mco_trans_h t;
        CHECK(mco_trans_start(db, MCO_READ_WRITE, MCO_TRANS_FOREGROUND, &amp;t));
        CHECK(Config_new(t, &amp;obj));
        CHECK(Config_agent_id_put(&amp;obj, 1000)); /* This record will be replicated to device with ID 1000 */
        CHECK(Config_param_id_put(&amp;obj, 1));
        CHECK(Config_value_put(&amp;obj, 3.1415));
        CHECK(Config_new(t, &amp;obj));
        CHECK(Config_agent_id_put(&amp;obj, MCO_IOT_ALL_AGENTS)); /* This record will be replicated to all devices */
        CHECK(Config_param_id_put(&amp;obj, 2));
        CHECK(Config_value_put(&amp;obj, 2.7182));
        CHECK(mco_trans_commit(t));
    }
    &#160;</pre>
                </div>
                <p>Note the use of the constant <code>MCO_IOT_ALL_AGENTS</code> to cause this record to be replicated to all devices. </p>
                <p>Then, the server could update the configuration parameters, print out the current <i>Sensor</i> data, and shut down with code like the following:</p>
                <div class="code-block"><pre>&#160;
        InsertConfig(db);
        &#160;
        PrintSensors(db);
    &#160;
        CHECK(mco_iot_replicator_stop(repl));
        CHECK(mco_iot_comm_stop(comm));
        CHECK(mco_iot_replicator_destroy(repl));
        CHECK(mco_iot_comm_destroy(comm));
        CHECK(mco_db_disconnect(db));
        CHECK(mco_db_close(db_name));
        free(dev.dev.conv.ptr);
        mco_runtime_stop();
        return 0;
    }
&#160;</pre>
                </div>
                <p>Note that the function <code>PrintSensors()</code> simply prints out the current <i>Sensor</i> data from the active devices.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>