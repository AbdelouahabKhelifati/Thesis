<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using the eXtremeDB Feed Handler</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Using the <i>e</i>X<i>treme</i>DB Feed Handler</h1>
            <blockquote>
                <h2>Introduction</h2>
                <p>In a general sense, feed handlers are a broad class of applications and frameworks that parse, process, aggregate, and/or store market data. Different kinds of market data feeds may supply different kinds of data, such as quote or trade data, orders and order books, yield curves, etc. Some feeds originate directly at the exchanges (NYSE, LSE, …), others are aggregated from multiple sources by third-party institutions and redistributed using a normalized representation.</p>
                <p>The <i>e</i>X<i>treme</i>DB Feed Handler receives market data using industry standard frameworks and stores it in an <i>e</i>X<i>treme</i>DB database.</p>
                <p>Market instrument subscriptions are configurable on a feed-by-feed basis. It is possible to subscribe only to the relevant instruments.</p>
                <p>The database schema is flexible and configurable, thus allowing users to store only the data relevant to their needs. The data can be accessed and manipulated using ordinary SQL expressions with <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>. The user is free to choose a persistent or an in-memory database depending on performance and data persistence requirements.</p>
                <p>Currently, the <i>e</i>X<i>treme</i>DB Feed Handler is only available for 64-bit Linux, Mac OS and Windows systems.</p>
                <p>The <a href="Feed_Handler_API_Overview.htm">Feed Handler Application Programming Interface</a> allows the users to create their own extension modules that handle market data feeds not currently supported by the <i>e</i>X<i>treme</i>DB Feed Handler.</p>
                <h2>Application Structure</h2>
                <p>The Feed Handler application consists of the primary executable and loadable modules. The executable is responsible for the Feed Handler configuration file and command line parsing, logging, launching and controlling market data handler modules. The loadable modules implement shared functionality and market data handlers.</p>
                <p>The market data handler modules are components that use third-party frameworks (SMDS, TR RFA) to subscribe to, receive and handle market data, and store it in the database. The <i>e</i>X<i>treme</i>DB Feed Handler includes modules for Refinitiv (formerlyThomson Reuters) RFA and Vela SMDS frameworks, as well as a test module provided for demonstration of the Feed Handler Module API.</p>
                <p>
                    <img src="../../../Resources/Images/FH1.PNG" />
                </p>
                <p>&#160;</p>
                <h2>Supported Frameworks</h2>
                <h3>Vela (formerly SRLabs) SMDS</h3>
                <p>From the vendor’s website: “Vela’s SMDS market data solution is a software-based feed handler that can be used in process or deployed as a stand-alone application.” SMDS supports more than 130 feeds and provides uniform access to market data originating from different vendors.</p>
                <p>The full list of supported feeds is available in the SMDS User Guide.</p>
                <h3>Thomson Reuters Enterprise Platform</h3>
                <p>Thomson Reuters (TR) supplies a wide range of financial products. Its Enterprise Platform (TREP) facilitates implementation of services compatible with the TR infrastructure. The same Enterprise Platform underlies many of TR’s own products. TREP’s Open Message Model (OMM) is the common object model used by the platform’s applications, which enables interoperability between components potentially supplied by multiple vendors.</p>
                <p>Data feed solutions from Refinitiv  include:</p>
                <ul>
                    <li value="1">	Reuters Data Feed (RDF): consolidated data feed; superseded by Elektron Real Time Feed.</li>
                    <li value="2">	Reuters Data Feed Direct (RDF-D): ultra low latency feed that supplies data directly from an exchange (i.e. non-consolidated).</li>
                    <li value="3">	Elektron Real Time: consolidated, real-time feed, which provides access to over 500 exchanges all over the world. Three delivery options are available:<ul style="list-style-type: circle;"><li value="1">	Managed</li><li value="2">	Deployed</li><li value="3">Connect</li></ul></li>
                </ul>
                <ul>
                    <li value="1">	Elektron Direct Feed: FPGA-accelerated real-time feed that supplies data directly from an exchange.</li>
                </ul>
                <p>TREP infrastructure can be accessed using a number of frameworks supplied by Refinitiv . The <i>e</i>X<i>treme</i>DB Feed Handler uses the  Robust Foundation API (RFA) and the Elektron Message API (EMA) C++ frameworks from Refinitiv (formerly Thomson Reuters).</p>
                <p>&#160;</p>
                <h1>Getting Started</h1>
                <p>The Feed Handler application is distributed as a part of the <i>e</i>X<i>treme</i>DB <i>Financial Edition</i> package.</p>
                <h2>Quick Start Guide</h2>
                <p>The <i>e</i>X<i>treme</i>DB <i>Financial Edition</i> package contains EMA redistributable libraries, EMA market data generator, and sample configuration files that make it possible to quickly get started with the Feed Handler application and explore its features. Below is a simple step-by-step guide to launching the application. For more detailed discussion of the application, its prerequisites, configuration and execution refer to the chapters below.</p>
                <p>First of all, extract the <i>e</i>X<i>treme</i>DB distribution archive. For brevity, file and directory paths below will be given relative to the <i>e</i>X<i>treme</i>DB root directory, e.g.:</p>
                <div class="code-block"><pre>    &#160;
    /home/user/eXtremeDB
    &#160;</pre>
                </div>
                <p>The Feed Handler demonstration setup includes the following key components:</p>
                <ul>
                    <li value="1">	The Feed Handler application: <code>target/bin/fh</code></li>
                    <li value="2">	The EMA market data generator: <code>target/feedhandler/EMA_redistributable/Generator/generator</code></li>
                    <li value="3"><span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>: <code>target/bin/xsql</code></li>
                </ul>
                <h3>Launching the Market Data Generator</h3>
                <p>The generator requires the RDM dictionary files (RDMFieldDictionary and enumtype.def) to run. These files can be obtained from the Elektron SDK distribution. Please place them in the Generator directory prior to running the application. </p>
                <p>Change the current directory to the market data generator subdirectory and launch the generator:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    cd target/feedhandler/EMA_redistributable/Generator
    ./generator
            
    &#160;</pre>
                </div>
                <p>On Windows, the generator is launched similarly:</p>
                <div class="code-block"><pre xml:space="preserve">&#160;
    cd target\feedhandler\EMA_redistributable\Generator
    generator.exe
    &#160;</pre>
                </div>
                <p>Upon a successful launch, the following message appears:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    OmmProvider ready
    &#160;</pre>
                </div>
                <h3>Launching the Feed Handler</h3>
                <p>When the Generator is ready, the Feed Handler application is ready to run. Open a second console window, change directories to the directory containing sample EMA scripts and start the Feed Handler:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    cd target/feedhandler/scripts/EMA
    ./feedhandler.sh -c feed_inmem.cfg
    &#160;</pre>
                </div>
                <p>On Windows, use the provided <code>feedhandler.bat</code> wrapper script:</p>
                <div class="code-block"><pre xml:space="preserve">&#160;
    cd target\feedhandler\scripts\EMA
    feedhandler.bat -c feed_inmem.cfg
    &#160;</pre>
                </div>
                <p>The files <code>feedhandler.sh</code> and <code>feedhandler.bat</code> are wrapper scripts that set up necessary environment variables, prepare symbolic links for shared libraries and start the Feed Handler application. The script’s command line arguments are passed to the Feed Handler application. The configuration file <code>feed_inmem.cfg</code> contains settings for an in-memory database. There is also <code>feed_disk.cfg</code>, a configuration file in the same directory, which can be used to evaluate the Feed Handler with a persistent database.</p>
                <p>When the application is run, you’ll see log output like the following:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    2017-01-18 01:55:32 INFO consumer.cpp:115: market data clients ready
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Examining Database Content</h2>
                <p>The market data produced by the Generator application is collected and stored in the <i>e</i>X<i>treme</i>DB database. It is recommended to use <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to connect to the database and execute SQL queries against it.</p>
                <p>Open a console window, change directories to the <i>e</i>X<i>treme</i>DB root directory and launch <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>:</p>
                <div class="code-block"><pre>    &#160;
    ./target/bin/xsql @localhost:5001
    &#160;</pre>
                </div>
                <p>When <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> is run and connected to the database, you’ll see the <code>XSQL&gt;</code> command prompt:</p>
                <div class="code-block"><pre><a name="kanchor204"></a>    &#160;
    xsql started
    Runtime configuration
    Remote node(s)       : localhost:5001
    Runtime              : Debug
    XSQL&gt;
    &#160;</pre>
                </div>
                <p>Now, you can use SQL queries to explore the database contents. For example:</p>
                <p>Get the number of Level 1 entries in table <i>MarketPrice</i>:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;select count(*) from MarketPrice;
    #1
    ------------------------------------------------
    1500
    Selected records: 1
    &#160;</pre>
                </div>
                <p>Get the RICs present in table <i>MarketPrice</i>:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;select distinct RIC from MarketPrice;
    RIC
    ------------------------------------------------
    ACN.N
    IBM.N
    TRI.N
    &#160;
    Selected records: 3
    &#160;</pre>
                </div>
                <p>Read some records:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    XSQL&gt;&gt;select RIC, BID, ASK from MarketPrice where RIC='TRI.N' limit 10;
    RIC	BID	ASK
    ----------------------------------------------------------------------
    TRI.N	18	19    
    TRI.N	17	19
    TRI.N	21	22
    TRI.N	20	21
    TRI.N	25	28
    TRI.N	22	24
    TRI.N	20	21
    TRI.N	21	23
    TRI.N	17	19
    TRI.N	19	20
    
    Selected records: 10    &#160;</pre><pre xml:space="preserve">&#160;</pre>
                </div>
                <p>Explore the <i>MarketByOrder</i> domain summary data:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;select RIC, CURRENCY, TRD_UNITS, PR_RNK_RUL, RDN_EXCHD2 from MarketByOrderSummary;
    
    RIC	CURRENCY	TRD_UNITS	PR_RNK_RUL	RDN_EXCHD2
    ------------------------------------------------
    TRI.ARC	USD	INT 	NOR	ASE
    &#160;
    Selected records: 1
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Using Web Console to Examine Application and Database Status</h2>
                <p>You may use a web browser to examine application status, database schema and performance indicators. In order to do that, launch the browser and type the Feed Handler web console’s default address:</p>
                <div class="code-block"><pre>    &#160;
    http://localhost:8082
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Shutting Down</h2>
                <p>To leave <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, type “<code>exit</code>” (or simply press Control-D). You’ll see the Linux command prompt again:</p>
                <div class="code-block"><pre>    &#160;
    XSQL&gt;exit
    user@ubuntu:~/eXtremeDB$
    &#160;</pre>
                </div>
                <p>To stop the Feed Handler, press Control-C in the console window (on Linux you may also send it a <code>SIGTERM</code> signal using the “kill” command). Since the Feed Handler was configured to use an in-memory database, its contents are lost when the application shuts down. To prevent accidental data loss, the Feed Handler application requests the user to repeat the Control-C key combination before shutting down the database. Until the confirmation is received, the database remains intact and can be accessed using <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>:</p>
                <div class="code-block"><pre>    &#160;
    ^C
            
    2017-01-18 02:15:48 INFO app.cpp:188: stopped
    2017-01-18 02:15:49 WARNING app.cpp:230: shutting down Feed handler, in-memory database will be destroyed; press Ctrl-C again or issue "kill 20189" command to complete shutdown
    &#160;</pre>
                </div>
                <p>When the Feed Handler is stopped, the Generator can be stopped as well, using the same Control-C key combination.</p>
                <p>&#160;</p>
                <h2>Prerequisites</h2>
                <p>The handler modules of the Feed Handler application require the corresponding frameworks: Vela SMDS, Refinitiv RFA and Refinitiv EMA.</p>
                <p>The Feed Handler application was designed to be used with the following versions of the frameworks:</p>
                <ul>
                    <li value="1">	Vela SMDS: 4.1.0</li>
                    <li value="2">	Thomson Reuters RFA: 8.1.0</li>
                    <li value="3">Refinitiv EMA: 1.3.1</li>
                </ul>
                <p style="font-weight: bold;">Failing to meet the framework version requirements may result in abnormal functioning.</p>
                <p style="font-weight: bold;">&#160;</p>
                <h2>Environment variables</h2>
                <p>The following environment variables need to be set:</p>
                <ul>
                    <li value="1"><code>MCO_ROOT</code>: path to the <i>e</i>X<i>treme</i>DB directory</li>
                    <li value="2"><code>SMDS_ROOT</code>: path to the Vela SMDS directory, if needed</li>
                    <li value="3"><code>EMA_ROOT</code>: path to the Refinitiv EMA directory, if needed</li>
                    <li value="4"><code>LD_LIBRARY_PATH</code> must include paths to:<ul style="list-style-type: circle;"><li value="1"><![CDATA[	]]><i>e</i>X<i>treme</i>DB shared libraries ($<code>MCO_ROOT/target/bin.so</code>)</li><li value="2">	SMDS shared libraries (e.g. $<code>SMDS_ROOT</code>/<code>lib/LINUX-2.6/rhel/gcc41/64/opt</code>)</li><li value="3">	EMA shared libraries (e.g. $<code>EMA_ROOT</code>/<code>Libs/RHEL6_64_GCC444</code>)</li></ul></li>
                    <li value="5"><code>ELEKTRON_ROOT</code>: path to the Refinitiv Elektron SDK directory, if needed</li>
                    <li value="6">
                        <p><code style="font-size: 10pt;">ELEKTRON_ARCH</code><span style="font-size: 10pt;">: Elektron libraries architecture, if needed (e.g. RHEL6_64_GCC444; all available architectures can be found in the <code>$ELEKTRON_ROOT/Cpp-C/Ema/Libs</code> directory)</span>
                        </p>
                    </li>
                    <li value="7"><code style="font-size: 10pt;">ELEKTRON_CONF</code><span style="font-size: 10pt;">: Elektron libraries configuration, if needed (Debug or Optimized)</span>
                    </li>
                </ul>
                <p>Please note that the frameworks may contain multiple sets of shared libraries for different target operating systems and compilers. For example, RFA may contain shared libraries for CentOS (Libs/OL7_64_GCC482) and Red Hat Enterprise Linux (Libs/RHEL6_64_GCC444). <b>Be careful to point the LD_LIBRARY_PATH entries to the correct directories.</b></p>
                <p>&#160;</p>
                <h2>Building the Feed Handler</h2>
                <p>If you have an <i>e</i>X<i>treme</i>DB <i>Financial Edition</i> source code package, you can build the Feed Handler application from source. The build procedure is described in section "<a href="#Building">Building the Feed Handler from Source Code</a>".</p>
                <p>&#160;</p>
                <h2>Running the Feed Handler</h2>
                <p>The application executable file is named <code>fh</code>. It is located in the<code> target/bin</code> subdirectory of the <i>e</i>X<i>treme</i>DB <i>Financial Edition</i> package.</p>
                <p>Before launching the application, make sure that the <code>LD_LIBRARY_PATH</code> environment variable contains entries for <i>e</i>X<i>treme</i>DB and SMDS shared library directories - no <code>LD_LIBRARY_PATH</code> settings are required for the EMA module, since it is linked statically with the Elektron API libraries. On Windows, the <code>PATH</code> environment variable can be used.</p>
                <p>To launch the application, prepare the required configuration files and launch the Feed Handler executable file. For information on Feed Handler <a href="#Command">command line arguments</a> and <a href="#Configur">configuration files</a>, refer to the sections below.</p>
                <p>To gracefully shut down the Feed Handler running in the foreground, press Ctrl-C. It is also acceptable to send it the <code>SIGTERM</code> signal on Linux (using the “<code>kill &lt;PID&gt;</code>” command), which is helpful when the application runs in the background, or as a daemon. The application will also stop on conditions making its further functioning impossible, such as running out of memory when using in-memory database.</p>
                <p>Unlike a shared-memory database, the conventional in-memory database is destroyed upon application exit. In order to prevent data loss, if the application uses a non-persistent database in conventional memory and its embedded RSQL server is enabled, it will pause and require confirmation before shutting down the database in order to make it possible for the user to export database contents, if needed. Refer to the “<a href="#Accessin">Accessing Feed Handler database contents</a>” section for further information.</p>
                <p>&#160;</p>
                <h2><a name="Accessin"></a>Accessing Feed Handler database contents</h2>
                <p>The Feed Handler application allows the user to set various parameters of the <i>e</i>X<i>treme</i>DB database such as: choose a persistent (disk) or in-memory database, set database size, file paths, etc.</p>
                <p>The recommended approach to accessing the database is to enable the embedded RSQL server in the Feed Handler application configuration file. In this case the database can be accessed from RSQL-enabled clients, as well as from <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>.</p>
                <p>When the Feed Handler application is running and its RSQL server is enabled, the user can connect to the database and execute SQL queries using <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>. For instance, if the RSQL server is configured to use <code>port 5001</code> and the Feed Handler is running on <code>localhost</code>:</p>
                <div class="code-block"><pre>    &#160;
    $ xsql @localhost:5001
    xsql started
    Runtime configuration
    Remote node(s)       : localhost:5001
    Runtime              : Debug
    XSQL&gt;select count(*) from MyQuotes;
    #1
    -------------------------------------------------
    248361
    &#160;
    Selected records: 1
    &#160;</pre>
                </div>
                <p>For more information on RSQL server configuration, refer to the “database” section of the “<a href="#Feed">Feed Handler Configuration</a>” section. For information on <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, refer to the <a href="../../../Getting_Started/Getting_Started_SQL.htm"><i>e</i>X<i>treme</i>SQL Quick Start</a>.</p>
                <p>&#160;</p>
                <h2>Using the Feed Handler Web Console to Examine Application and Database Status</h2>
                <p>The Feed Handler application has an embedded web console that allows the user to examine the following:</p>
                <ul>
                    <li value="1">	Application status and errors</li>
                    <li value="2">	Feed states and statistics</li>
                    <li value="3">	Database configuration and statistics</li>
                    <li value="4">	Database tables, their schemas and data rates</li>
                    <li value="5">	Log and configuration files</li>
                </ul>
                <p>The web console is always enabled. Its address and port are specified in the Feed Handler application configuration file’s “database” section (see the “<a href="#Feed">Feed Handler Configuration</a>” section for details). In order to access the console, launch a web browser and enter the address and port of the console in the address bar, e.g.:</p>
                <div class="code-block"><pre>    &#160;
    http://localhost:8082
    &#160;</pre>
                </div>
                <h2><a name="Feed"></a>
                </h2>
                <p>&#160;</p>
                <h2>Vertical Storage Support in Feed Handler</h2>
                <p>The Feed Handler is able to store incoming data in vertical storage, i.e. using <i>e</i>X<i>treme</i>DB <a href="../../Core/Sequences.htm">sequences</a>. Please see the <a href="#Vertical">Vertical Storage Table Configuration</a> section below for configuration details.</p>
                <h3>Sequence data buffering</h3>
                <p>It is inefficient to append elements to sequences one by one. Hence, the Feed Handler buffers the incoming records in a temporary "flat" table, and then moves them to the target table. The number of the buffered records is defined by the <code>sequenceBufferSize</code> parameter.</p>
                <h3>Ordered sequences</h3>
                <p>The common limitations for ordered sequences apply:</p>
                <ul>
                    <li value="1">the first field (or fields) of the table must be the primary key;</li>
                    <li value="2">only one sequence can be ordered, and it must be the first sequence.</li>
                </ul>
                <p>The Feed Handler checks the database table configuration upon startup and rejects it unless these requirements are met.</p>
                <p>If no sequence order is defined, the records will be stored in the order of their arrival.</p>
                <p>To define an ordered sequence,  set the <code><a href="#Vertical">sequenceOrder</a></code> parameter of the respective field to <code>asc</code> or <code>desc</code>, as needed.</p>
                <h3>Out-of-order record handling</h3>
                <p>It is possible for some records to arrive in the wrong order, breaking the ordering rule defined by the configuration. The Feed Handler supports optional recovery of the records' order.</p>
                <p>If the order cannot be recovered, the records are stored in the "out-of-order" table ("OO table" for brevity). This is a regular (i.e. "flat") table that has the same name as the data table, with an _OO_ prefix.</p>
                <h4>No recovery</h4>
                <p>This is the default behavior. The out-of-order records will be moved to the OO table.</p>
                <h4>Sequence order recovery</h4>
                <p>Due to the constraints of the out-of-order sequence element insertion, the Feed Handler will attempt to insert out-of-order records one by one. Those that still fail to be inserted will be moved to the OO table.</p>
                <p>This approach will obviously carry a performance penalty, but it can be convenient if out-of-order records are relatively rare.</p>
                <p>&#160;</p>
                <h1>Feed Handler Configuration</h1>
                <p>The Feed Handler application is configured using command line arguments and a configuration file.</p>
                <h2><a name="Command"></a>Command Line Arguments</h2>
                <p>Currently, only one command line argument is supported.</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>-c &lt;path_to_config_file&gt;</b>: optional, contains the path to the Feed Handler application configuration file; default: “<code>feed.cfg</code>”.</li>
                </ul>
                <h2><a name="Configur"></a>
                </h2>
                <h2>Configuration File</h2>
                <p>The Feed Handler application configuration file is a text file that contains generic application settings and database parameters, specifies frameworks to be used (EMA, SMDS), subscriptions, database schema definitions, etc. It is structured as a JSON file with a few extensions:</p>
                <ul>
                    <li value="1">	It allows hexadecimal (0x[0-9A-F]), octal (0[0-7]) and decimal numbers.</li>
                    <li value="2">	Numbers allow suffixes 'k', 'K' (kilo), 'm', 'M' (mega) and 'g', 'G' (giga). (For example, "100m" means 100*1024*1024.)</li>
                    <li value="3">	Quotes are not mandatory for strings without whitespace and/or special symbols.</li>
                    <li value="4">	Symbols after the '#' are comments (up to the end of the line).</li>
                </ul>
                <p>Apart from the Feed Handler application configuration file, the supported third-party frameworks (SMDS, EMA) also require separate configuration files in their own formats. The paths to these files are set in the application configuration file. Refer to the following sections for details.</p>
                <p>Refer to the <a href="#Feed2">examples below</a> that demonstrate usage off application configuration files.</p>
                <p>The configuration file has the following structure:</p>
                <ul>
                    <li value="1">The "application" Section<ul><li value="1">The "logging" subsection</li></ul></li>
                    <li value="2">The "handler" section<ul><li value="1">The “config” subsection</li><li value="2">The “tables” subsection</li><li value="3">The “dataSources” subsection</li><li value="4">The “subscriptions” subsection</li></ul></li>
                    <li value="3">The “database” section</li>
                </ul>
                <p>The contents of each of these sections and subsections are described below.</p>
                <h3>The "application" Section</h3>
                <p>This section contains settings for the application itself.</p>
                <h4>The "logging"&#160;subsection </h4>
                <p>This subsection contains a list of loggers. Each logger has the following parameters:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>type</b>: type of the logger (“<code>file</code>” or “<code>stdout</code>”)</li>
                    <li value="2"><![CDATA[	]]><b>level</b>: minimal log severity level (“<code>DEBUG</code>”, “<code>INFO</code>”, “<code>WARNING</code>”, “<code>ERROR</code>”)</li>
                    <li value="3"><![CDATA[	]]><b>filename</b>: name of the file for a “<code>file</code>” logger</li>
                </ul>
                <h4>The "handler" section</h4>
                <p>This section contains settings for market data retrieval, processing and storage.</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>name</b>: name of the market data handler module (e.g. “<code>smdsfeed</code>”, <code>"trfeed"</code> or “<code>emafeed</code>”)</li>
                </ul>
                <h3>The “config” subsection</h3>
                <p>This subsection contains handler module-specific settings. </p>
                <p>For the SMDS module:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>configPath</b>: path to the folder containing the SMDS configuration file</li>
                    <li value="2"><![CDATA[	]]><b>configFile</b>: name of the SMDS configuration file</li>
                </ul>
                <p>For the Refinitiv EMA module:</p>
                <ul>
                    <li value="1"><b>configPath</b>: path to the folder containing the EMA configuration file</li>
                    <li value="2"><![CDATA[	]]><b>configFile</b>: name of the EMA configuration file</li>
                </ul>
                <ul>
                    <li value="1"><![CDATA[	]]><b>login</b>: EMA login domain settings:<ul style="list-style-type: circle;"><li value="1"><b>userName</b>: username for authentication</li><li value="2"><![CDATA[	]]><b>appId</b>: application ID (if required by the provider)</li><li value="3"><![CDATA[	]]><b>position</b>: application position (if required by the provider)</li><li value="4"><b style="font-size: 14pt;">password</b><span style="font-size: 10pt;">: <span style="font-size: 14pt;">password (optional)</span></span></li></ul></li>
                </ul>
                <p>For the Refinitiv RFA module:</p>
                <ul>
                    <li value="1"><b>useAppLog: </b>use the Feed Handler application log for RFA event logging</li>
                    <li value="2"><b>configPath</b>: path to the folder containing the RFA configuration file</li>
                    <li value="3"><b>configFile</b>: name of the RFA configuration file</li>
                    <li value="4"><b>extraConfig</b>: additional RFA configuration files; a single JSON object (or an array of objects) containing these fields:<ul><li value="1">path: path to the folder containing the file</li><li value="2">&#160;file: name of the file</li><li value="3">namespace: RFA configuration namespace (“default” if left empty)</li></ul></li>
                    <li value="5"><b>sessionName</b>: RFA session name, must match settings in the RFA configuration file</li>
                    <li value="6"><b>consumerName</b>: RFA OMM consumer name, must match settings in the RFA configuration file</li>
                    <li value="7"><b>connStatsReportPeriod</b>: network connection statistics reporting period (seconds); set to 0 to disable</li>
                    <li value="8"><b>login</b>: RFA login domain settings:<ul><li value="1">userNameType: type of the username field (USER_NAME, USER_EMAIL_ADDRESS or USER_TOKEN; “USER_NAME” by default)&#160;&#160;</li><li value="2">userName: username for authentication</li><li value="3">appId: application ID (if required by the provider)</li><li value="4">position: application position (if required by the provider)</li><li value="5">appAuthToken: authorization token (optional)</li><li value="6">appName: name of the application (optional)</li><li value="7">instanceId: application instance identifier (optional)</li><li value="8">password: password (optional)</li></ul></li>
                </ul>
                <h3>The “tables” subsection</h3>
                <p>This subsection defines the mapping of the market data records’ fields to the database tables. Each table is described by a JSON object that contains the following fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>type</b>: type of the table contents (see module-specific table configuration sections)</li>
                    <li value="2"><![CDATA[	]]><b>name</b>: name of the table (must be a unique and valid SQL table name)</li>
                    <li value="3"><code style="font-weight: bold;font-family: Arial;font-size: 14pt;">sequenceBufferSize</code><span style="font-size: 14pt;">: the size of the sequence buffer (for </span><a href="../../Core/Sequences.htm" style="font-size: 14pt;">sequence</a><span style="font-size: 14pt;"> fields)</span>
                    </li>
                    <li value="4"><code style="font-family: Arial; font-weight: bold;">sequenceOrderRecovery</code>: if set to true, enable sequence order recovery mechanism</li>
                    <li value="5"><![CDATA[	]]><b>fields</b>: array of feed records’ fields to database column mappings; each mapping contains:<ul style="list-style-type: circle;"><li value="1"><![CDATA[	]]><b>source</b>: name of the source field (names are pre-defined for each market data source, see SMDS- and EMA-specific table configuration sections)</li><li value="2"><![CDATA[	]]><b>target</b>: name of the target field (must be unique per table and valid SQL field name)</li><li value="3"><code style="font-family: Arial; font-weight: bold;">sequence</code>: if set to true, this field will be stored in a <a href="../../Core/Sequences.htm">sequence</a></li><li value="4"><code style="font-family: Arial; font-weight: bold;">sequenceOrder</code>: order of the <a href="../../Core/Sequences.htm">sequence</a>, <code>asc</code> or <code>desc</code> (undefined by default)</li></ul></li>
                    <li value="6"><![CDATA[	]]><b>indexes</b>: list of table indexes; each index description is a JSON object that contains:<ul style="list-style-type: circle;"><li value="1"><![CDATA[	]]><b>name</b>: name of the index to be created in the database (must be a unique and valid SQL index name)</li><li value="2"><![CDATA[	]]><b>fields</b>: list of fields included in this index (as defined in the “fields” subsection; specify one or more “target” field names here)</li><li value="3"><![CDATA[	]]><b>unique</b>: “unique” index flag (“<code>true”</code> or “<code>false</code>”)</li></ul></li>
                </ul>
                <blockquote>
                    <p>
                        <img src="../../../Resources/Images/note.png" /> Please note that fields’ SQL types are not specified in the “fields” array. For SMDS feeds, these types are fixed and correspond to the types of fields of SMDS entity classes (<code>MDQuote</code>, <code>MDTrade</code>, etc.) For TR OMM-based feeds (RFA and EMA), the field types are retrieved from the provider's service dictionary.</p>
                    <h3><a name="Vertical"></a>Vertical Storage Table Configuration</h3>
                    <p>Sequences are declared in the table mappings, together with the related settings. For example:</p>
                    <div class="code-block"><pre>    &#160;
    "tables": [
        {
            "name": "MyQuotes",
            "sequenceBufferSize": 300,
            "sequenceOrderRecovery": "true",
            "fields":
            [
                { "source": "symbol", "target": "symbol" },
                { "source": "timestamp", "target": "timestamp", "sequence": "true", "sequenceOrder": "asc" },
                { "source": "bid", "target": "bid", "sequence": "true" },
                { "source": "ask", "target": "ask", "sequence": "true" },
            ],
            "indexes": [{ "name": "pk", "unique": "true", "fields": ["symbol"] }]
        }
    ]
    &#160;</pre>
                    </div>
                </blockquote>
                <h3>The “dataSources” subsection</h3>
                <p>This subsection contains a list of “data sources” in the given feed. For SMDS feeds, this must contain a list of session managers corresponding to the SMDS configuration file. For TR feeds, the services required by the user are listed here; these services must be available in the RFA Source Directory. Each data source is described by a JSON object that contains the following fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>type</b>: type of the data source</li>
                    <li value="2"><![CDATA[	]]><b>name</b>: name of the data source</li>
                </ul>
                <p>For the SMDS module, the “type” field must specify a valid SMDS session manager type name (e.g. “<code>CTASessionMgr</code>”, “<code>ITCH5SessionMgr</code>”). The list of available SMDS session managers is available in the SMDS User Guide. The “name” field must correspond to the session manager name specified in the session manager configuration section of the SMDS configuration file.</p>
                <p>For the RFA and EMA modules, the “type” field should be left empty, and the “name” field must contain the name of the service available in the provider's Source Directory (i.e. “<code>DIRECT_FEED</code>”). The list of available service names depends on the market data provider.</p>
                <h3>The “subscriptions” subsection</h3>
                <p>This subsection describes subscriptions to be made. </p>
                <p>Each subscription is described by a JSON object that contains the following fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>dataSource</b>: name of the data source for this instrument (as defined in the “name” field of the data source in the “dataSources” subsection)</li>
                    <li value="2"><![CDATA[	]]><b>sym</b>: either a single instrument name, or a JSON array of instrument names</li>
                    <li value="3"><![CDATA[	]]><b>symListFile</b>: symbol list file (see below*)</li>
                    <li value="4"><![CDATA[	]]><b>domain</b>: data domain (if required by the handler module)</li>
                </ul>
                <p>SMDS feeds support “wildcard” subscriptions: it is possible to subscribe to all symbols provided by a data source by passing an asterisk (‘*’) for the instrument name.</p>
                <p>Instrument subscriptions for the RFA and EMA feeds must list symbol names (RICs) explicitly, as wildcard subscriptions are not supported.</p>
                <p>*For convenience, it is possible to specify symbol lists for subscriptions in external files using the “symListFile” field, which must contain the path to the symbol list file. This file uses JSON syntax (same as the Feed Handler application configuration files) and should contain a single array called “symbols”. This array must contain strings representing symbol names, e.g.:</p>
                <div class="code-block"><pre>    &#160;
    "symbols": [
    "SYM1",
    "SYM2"
    ]
    &#160;</pre>
                </div>
                <p>If both the “<code>sym</code>” and “<code>symListFile</code>” fields are set, their symbol lists are merged. Duplicate symbol names are ignored.</p>
                <h3>The “database” section</h3>
                <p>This section contains <i>e</i>X<i>treme</i>DB database settings for the Feed Handler.</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>transactionManager</b><a name="kanchor205"></a>: eXtremeDB transaction manager (“<code>mursiw</code>” or “<code>mvcc</code>”)</li>
                    <li value="2"><![CDATA[	]]><b>useSharedMemory</b>: if set to “<code>true</code>”, the database will be created in shared memory; if set to “<code>false</code>”, the database will be created in the private memory region of the application (only makes sense for in-memory databases)</li>
                    <li value="3"><![CDATA[	]]><b>useDiskDatabase</b>: if set to “<code>true</code>”, the database and its tables will be persistent (i.e. stored in a persistent database)</li>
                    <li value="4"><![CDATA[	]]><b>databaseName</b>: name of the <i>e</i>X<i>treme</i>DB database; if the database does not exist, it will be created</li>
                    <li value="5"><![CDATA[	]]><b>databaseSize</b>: database size in bytes</li>
                    <li value="6"><![CDATA[	]]><b>freeMemoryThreshold</b>: minimum percentage of free memory remaining in the in-memory database; when this threshold is reached,  the application is stopped (defaults to 5% if not set)</li>
                    <li value="7"><![CDATA[	]]><b>databaseFileName</b>: filename for a persistent database (only used if “<code>useDiskDatabase</code>” is set to “true”)</li>
                    <li value="8"><![CDATA[	]]><b>databaseLogFileName</b>: filename for a persistent database log file (only used if “<code>useDiskDatabase</code>” is set to “<code>true</code>”)</li>
                    <li value="9"><![CDATA[	]]><b>diskCacheSize</b>: size of the database cache in bytes (only used if “<code>useDiskDatabase</code>” is set to “<code>true</code>”)</li>
                    <li value="10">
                        <p><b>diskPageSize</b>: size of the disk page in bytes (only used if “<code>useDiskDatabase</code>” is set to “<code>true</code>”)</p>
                    </li>
                    <li value="11">
                        <p><b>mainMemPageSize</b>: size of the memory page in bytes</p>
                    </li>
                    <li value="12">
                        <p><b>maxDictSize</b>: maximum size of the database dictionary</p>
                    </li>
                    <li value="13">
                        <p><b>maxClasses</b>: maximum number of classes</p>
                    </li>
                    <li value="14">
                        <p><b>maxIndexes</b>: maximum number of indexes</p>
                    </li>
                    <li value="15">
                        <p><b>logType</b>: type of the database log (“<code>none</code>”, “<code>undo</code>” or “<code>redo</code>”)</p>
                    </li>
                    <li value="16">
                        <p><b>redoLogLimit</b>: max redo log size, in bytes</p>
                    </li>
                    <li value="17">
                        <p><b>defaultCommitPolicy</b>: default commit policy (“<code>sync_flush</code>”, “<code>buffered</code>”, “<code>delayed</code>” or “<code>no_sync</code>”)</p>
                    </li>
                    <li value="18">
                        <p><b>transSchedPolicy</b>: transaction scheduling policy (“<code>fifo</code>”, “<code>reader_favor</code>” or “<code>writer_favor</code>”)</p>
                    </li>
                    <li value="19"><![CDATA[	]]><b>SQLstatements</b>: SQL statements to execute upon database startup (a single string, statements should be separated with semicolons)</li>
                    <li value="20"><![CDATA[	]]><b>SQLscripts</b>: array of SQL script names to run upon database startup</li>
                </ul>
                <p>An example of the “<code>database</code>” section specifying an in-memory database in conventional memory:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "false",
        "databaseName": "RFA_inmem_db",
        "databaseSize": "1073741824"
    }
    &#160;</pre>
                </div>
                <p>Please note that a persistent database will require additional parameters:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "true",
        "databaseName": "RFA_inmem_db",
        "databaseSize": "1073741824",
        "databaseFileName": "RFA_db.dbs",
        "databaseLogFileName": "RFA_db.log",
        "diskCacheSize": "1073741824",
    }
    &#160;</pre>
                </div>
                <p>Running SQL statements and scripts upon database startup:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "false",
        "databaseName": "RFA_inmem_db",
        "databaseSize": "1073741824"
        "SQLstatements": "create table test (t int);",
            
        "SQLscripts": ["create_tables.sql", "import_assets.sql"]
            
    }
    &#160;</pre>
                </div>
                <h3>The “RSQLserver” subsection</h3>
                <p>This subsection contains settings for the RSQL server.</p>
                <p>If enabled, the Feed Handler application will start an embedded RSQL server. It will then be possible to access the database contents using the <i>e</i>X<i>treme</i>DB RSQL protocol, e.g. using the <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, or a custom RSQL client (see <i>e</i>X<i>treme</i>SQL and <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> documentation for more details).</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>enable</b>: if set to “true”, RSQL server will be enabled (“<code>false</code>” by default)</li>
                    <li value="2"><![CDATA[	]]><b>port</b>: RSQL port for incoming connections (must be set explicitly)</li>
                </ul>
                <p>An example of an RSQL server configuration for an in-memory database:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "false",
        "databaseName": "RFA_inmem_db",
        "databaseSize": "1073741824",
        "RSQLserver": 
            
        {
            
            "enable": "true",
            
            "port": 5001
            
        }
    }
    &#160;</pre>
                </div>
                <h3>The “WebConsole” subsection</h3>
                <p>This subsection contains settings for the Feed Handler web console.</p>
                <p>The embedded web console is used to examine application status and statistics in real time.</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>addr</b>: address of the web console (default:<code> 0.0.0.0</code>)</li>
                    <li value="2"><![CDATA[	]]><b>port</b>: port of the web console (default: <code>8082</code>)</li>
                </ul>
                <p>An example of web console configuration subsection in the “database” section:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "false",
        "databaseName": "RFA_inmem_db",
        "databaseSize": "1073741824",
        "WebConsole":  
        {
            
            "addr": "0.0.0.0",
            
            "port": 8082
            
        }
            
    }
    &#160;</pre>
                </div>
                <h2>&#160;</h2>
                <h2>Vela SMDS-Specific Database Schema Configuration</h2>
                <p>SMDS provides multiple kinds of data through its <code>MDListener</code> interface callbacks. Except for “Custom Event” data, SMDS provides all of its records as C++ classes with fixed layout. SMDS module tables store data provided by the <code>MDListener </code>callbacks. The supported table types and their fields (as specified in the “source” field of the “fields” array of a table definition) are:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>Quote</b> ("condition", "isNBBO", "slowBid", "slowAsk", "status", "numBuyOrders", "numSellOrders", "bid", "ask", "bexchange", "oexchange", "bidSize", "askSize", "ibidSize", "iaskSize", "addnQuoteCondition", "isFINRANBBO", "participantTimeSeconds", "participantTimeMicro", "participantTimestamp")</li>
                    <li value="2"><![CDATA[	]]><b>Trade</b> ("side", "crossType", "compositeParticipantID", "tradeQualifier", "lastPrice", "status", "visibility", "lastSize", "cumVolume", "userField", "orderId", "subMktID", "vwap", "participantTimeSeconds", "participantTimeMicro", "participantTimestamp")</li>
                    <li value="3"><![CDATA[	]]><b>Order</b> ("numParts", "side", "size", "oldSize", "price", "oldPrice", "status", "orderId", "display", "extra1", "extra2")</li>
                    <li value="4"><![CDATA[	]]><b>OrderReplace</b> (“oldOrderId”, “newOrderId”)</li>
                    <li value="5"><![CDATA[	]]><b>Imbalance</b> ("when", "side", "regulatory", "crossType", "price", "farPrice", "nearPrice", "bidPrice", "askPrice", "bidSize", "askSize", "size", "pairedSize", "totalImbalance", "marketImbalance")</li>
                    <li value="6"><![CDATA[	]]><b>BestPrice</b> (same fields as in Quote)</li>
                    <li value="7"><![CDATA[	]]><b>SecurityStatusChange</b> (“newState”)</li>
                    <li value="8"><![CDATA[	]]><b>TradingIndicationAlert</b> ("financialStatus", "corporateAction", "securityStatus", "adjustment", "pDenom", "bid", "ask", "bidP", "askP")</li>
                    <li value="9"><![CDATA[	]]><b>TradeDisseminationTimeAlert</b> ("financialStatus", "corporateAction", "securityStatus", "tradeDisseminationTime", "tradeDisseminationSec", "tradeDisseminationMicro", "tradeDisseminationTimestamp")</li>
                    <li value="10"><![CDATA[	]]><b>Custom</b> <b>Event</b> tables (see below for detailed explanation)</li>
                </ul>
                <p>An example of a table containing Quote data:</p>
                <div class="code-block"><pre>    &#160;
    {
        "type": "Quote",
        "name": "MyQuotes",
        "fields":
        [
            { "source": "bid", "target": "bid" },
            { "source": "ask", "target": "ask" },
            { "source": "condition", "target": "condition" }
        ]
    }
    &#160;</pre>
                </div>
                <p>For a more detailed explanation of these classes and their fields, refer to the SMDS API Guide and SMDS User Guide. Refer to the feed specific information in the SMDS User Guide for information on data provided by certain feeds.</p>
                <p>&#160;</p>
                <h2>Fields Supported By Multiple Tables</h2>
                <p>Besides the table-specific fields listed above, all tables (except for OrderReplace) support the following fields from the <code>InstrumentDef</code> SMDS class: “symbol”, “exchange”.</p>
                <p>All of the tables corresponding to SMDS classes derived from <code>MDBaseData</code> (i.e. all but OrderReplace and SecurityStatusChange) also support the following fields: "exchTimeSec", "exchTimeMicro", "exchTimestamp", "recvTimeSec", "recvTimeMicro",  "recvTimestamp", "MDRCRecvTimeSec", "MDRCRecvTimeMicro", "MDRCRecvTimestamp".</p>
                <p>All of the tables listed above may also include DB write timestamp fields: "DBTimestamp".</p>
                <p>Thus, the table definition for Quotes may contain such common fields, e.g.:</p>
                <div class="code-block"><pre>    &#160;
    {"source": "symbol", "target": "symbol"},
    {"source": "exchTimeSec", "target": "exchTimeSec"},
    {"source": "exchTimeMicro", "target": "exchTimeMicro"},
    {"source": "DBTimestampSec", "target": "DBTimestampSec"},
    {"source": "DBTimestampMicro", "target": "DBTimestampMicro"}
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Custom Event Tables</h2>
                <p>Apart from well-defined records provided by the <code>MDListener</code> callbacks in the form of C++ classes, SMDS supports “custom” events, i.e. events that cannot be represented as any of these classes. These custom events are represented internally in SMDS as data structures containing event type code and a dynamic array of fields.</p>
                <p>SMDS custom events are stored in database tables just like other records, except for this limitation: custom event field data is always stored in textual (string) form.</p>
                <p>All table type names for custom events have the following structure: “Custom.” prefix followed by custom event type string, i.e. “<code>Custom.CE_OPN_CLS_HG_LW_STL_PRICE</code>”. Event type strings correspond to the enumeration values defined in <code>MDCustomEvent::EventType</code> enumeration in the SMDS MDCustomEvent.h header.</p>
                <p>Custom event field names correspond to the enumeration values defined in the <code>MDCustomEvent::EventFields</code> enumeration in the SMDS MDCustomEvent.h header, i.e. “<code>CF_AUCTION_PRICE</code>”.</p>
                <p>The exact number and names of custom event fields for each custom event type depend on the feed. They are specified in the feed-specific information section of the SMDS User Guide.</p>
                <p>Below is an example of a “custom event” table containing information on close prices for the CTA feed, corresponding to the description in the SMDS User Guide:</p>
                <div class="code-block"><pre>    &#160;
    {
        "type": "Custom.CE_OPN_CLS_HG_LW_STL_PRICE",
        "name": "MyClosePrice",
        "fields":
        [
            { "source": "symbol", "target": "symbol" },
            { "source": "exchange", "target": "exchange" },
            { "source": "CF_PREVCLOSE_PRICE", "target": "prevClosePrice" },
            { "source": "CF_PREV_CLOSE_DATE", "target": "prevCloseDate" }
        ]
    }
    &#160;</pre>
                </div>
                <p>For more information on the structure of custom events, refer to the SMDS API Guide.</p>
                <p>&#160;</p>
                <h2>Refinitiv RFA- and EMA-Specific Database Schema Configuration</h2>
                <p>Unlike SMDS, the content of TR OMM-based feed records is not predefined. For instance, MarketPrice refresh messages contain a list of fields (RDM <code>FieldList</code>), which may vary depending on the data source. The types of the fields are not known beforehand as well: they must be retrieved from the Refinitiv RFA and EMA dictionary. This makes it impossible to know the database structure beforehand. Thus, for TR OMM-based feeds, the database schema is not created until a connection to the service is established.</p>
                <p>The Refinitiv RFA and EMA handler modules currently supports data provided by MarketPrice and MarketByOrder RDM domains. So, the supported table types for TR OMM-based feeds are “MarketPrice”, “MarketByOrder.Summary” and “MarketByOrder.Entries”.</p>
                <p>The field mappings in the table definitions for TR OMM-based feeds contain field names as specified in the RDM dictionary of the service (e.g. “RDNDISPLAY”, “RDN_EXCHID”, etc.), e.g.:</p>
                <div class="code-block"><pre>    &#160;
    "fields":
    [
        { "source": "RDNDISPLAY", "target": "RDNDISPLAY" },
        { "source": "RDN_EXCHID", "target": "RDN_EXCHID" },
        { "source": "DIVPAYDATE", "target": "DIVPAYDATE" }
    ]
    &#160;</pre>
                </div>
                <p>For the structure of the MarketPrice and MarketByOrder messages, refer to the RDM Usage Guide. For exact contents and data structure of the records, please consult your service provider.</p>
                <p>Refinitiv RFA and EMA do not allow its users to perform “wildcard” subscriptions to all symbols provided by an exchange. The list of symbols must be specified explicitly in the “subscriptions” subsection of the configuration file.</p>
                <h3>Feed Handler-Defined Table Fields</h3>
                <p>In addition to the fields defined in the RDM dictionary, Feed Handler defines some additional fields that are specific to certain table types and are described in the sections below.</p>
                <p>Further, all TR tables may also include DB write <code>timestamp</code> fields: "DBTimestamp".</p>
                <h3>MarketPrice Tables</h3>
                <p>Tables of the MarketPrice type contain L1 market data provided by the MarketPrice domain of the RDM. Apart from the fields defined in the RDM dictionary, these tables may also contain the following fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>RIC</b>: instrument RIC (Reuters Instrument Code)</li>
                    <li value="2"><![CDATA[	]]><b>respTypeNum</b>: response type number as defined in the “MarketPrice update” subsection of the “MarketPrice Domain” section of RDM Usage Guide (may indicate quote, trade, alerts, etc.)</li>
                </ul>
                <p>An example of a MarketPrice table definition:</p>
                <div class="code-block"><pre>    &#160;
    {
        "type": "MarketPrice",
        "name": "MyMarketPrice",
        "fields":
        [
            { "source": "RIC", "target": "RIC" },
            { "source": "respTypeNum", "target": "respTypeNum" },
            { "source": "RDNDISPLAY", "target": "RDNDISPLAY" },
            { "source": "RDN_EXCHID", "target": "RDN_EXCHID" },
            { "source": "DIVPAYDATE", "target": "DIVPAYDATE" }
        ]
    }
    &#160;</pre>
                </div>
                <h3>MarketByOrder.* Tables</h3>
                <p>Tables of the MarketByOrder.* type store L2 order books provided by the MarketByOrder domain of the RDM. Currently, two table types are supported for this domain: “MarketByOrder.Summary” and “MarketByOrder.Entries”. The former stores the summary data provided in the “summary” section of the MarketByOrder refresh message. The latter stores data provided in the MarketByOrder update messages.</p>
                <p>MarketByOrder.Summary tables may contain the following fields in addition to the RDM fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>RIC</b>: instrument RIC</li>
                </ul>
                <p>MarketByOrder.Entries tables may contain the following fields in addition to the RDM fields:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><b>RIC</b>: instrument RIC</li>
                    <li value="2"><![CDATA[	]]><b>orderID</b>: order identification string</li>
                    <li value="3"><![CDATA[	]]><b>entryAction</b>: latest update to the record: ADD, UPD or DEL, corresponding to addition, update, or deletion of the order in the order book</li>
                </ul>
                <p>An example of a summary and a data table for MarketByOrder data:</p>
                <div class="code-block"><pre>    &#160;
    {
        "type": "MarketByOrder.Summary",
        "name": "MyMarketByOrderSummary",
        "fields":
        [
            { "source": "RIC", "target": "RIC" },
            { "source": "PROD_PERM", "target": "PROD_PERM" },
            { "source": "CURRENCY", "target": "CURRENCY" },
            { "source": "TRD_UNITS", "target": "TRD_UNITS" },
        ],
    },
    &#160;
    {
        "type": "MarketByOrder.Entries",
        "name": "MarketByOrderEntries",
        "fields":
        [
            { "source": "RIC", "target": "RIC" },
            { "source": "orderId", "target": "orderId" },
            { "source": "entryAction", "target": "entryAction" },
            { "source": "ORDER_PRC", "target": "ORDER_PRC" },
            { "source": "ORDER_SIDE", "target": "ORDER_SIDE" },
            { "source": "ORDER_SIZE", "target": "ORDER_SIZE" },
            { "source": "QUOTIM_MS", "target": "QUOTIM_MS" },
        ],
    }
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h1>Third-Party Frameworks Configuration</h1>
                <p>Vela SMDS and Refinitiv RFA and EMA frameworks require additional configuration files in their own formats. Paths to these configuration files must be specified in the Feed Handler application configuration file. For a brief description of the structure and contents of these files, please refer to the framework-specific subsections below.</p>
                <p>&#160;</p>
                <h2>Refinitiv RFA Configuration File</h2>
                <p>The Refinitiv RFA configuration file has a custom format. This file contains session and connection settings, logging parameters, etc. The format and the contents of this file are described in the RFA Configuration Guide (supplied as a part of the RFA distribution). For an example of an RFA configuration file, refer to Appendix D.</p>
                <p>The Feed Handler application requires at least one RFA configuration file to be present. Its location should be specified using the “configPath” and “configFile” keys of the “handler.tr” subsection in the Feed Handler configuration. All configuration nodes defined in this file are imported into the Default namespace of the RFA configuration database. However, it is possible to define additional configuration files and optionally import their contents into custom RFA namespaces. For further information, refer to the “Feed Handler Configuration” chapter.</p>
                <h2>Refinitiv EMA Configuration File</h2>
                <p>The Refinitiv EMA configuration file is an XML file. This file contains session and connection settings, logging parameters, etc. The format and the contents of this file are described in the EMA Configuration Guide (supplied as a part of the EMA distribution). For an example of an EMA configuration file, refer to <a href="#Appendix">Appendix B</a>.</p>
                <h2>Vela SMDS Configuration File</h2>
                <p>The SMDS configuration file is an <span class="Param">XML</span> file. Its structure is described in the SMDS User Guide. It contains both generic SMDS settings (license file location, logging, etc.) and feed-specific settings (session managers, connections, etc.). For an example of a SMDS configuration file, refer to <a href="#Appendix2">Appendix D</a>.</p>
                <h1>&#160;</h1>
                <h1>Appendices</h1>
                <p>Please note that all configuration files are provided for demonstration purposes only. Configuration settings must be chosen carefully on a case-by-case basis. Discussion of SMDS and Refinitiv RFA and EMA configuration files is beyond the scope of this document.</p>
                <h2>Appendix A - Sample Configurations</h2>
                <p>Below are some examples of the Feed Handler configuration sections. Parameters are explained inline.</p>
                <h3>Application Settings</h3>
                <p>The “application” section describes generic application settings. Below are settings for terminal log output and release mode:</p>
                <div class="code-block"><pre>    &#160;
    "application":
    {
        "logging":
        [
        # Print log messages with priorities "INFO" and above to the terminal
            { "type": "stdout", "level": "INFO" }
        ]
    }
    &#160;</pre>
                </div>
                <p>To write log messages of DEBUG severity and above to a log file, add the corresponding line to the “logging” array:</p>
                <div class="code-block"><pre>    &#160;
    "application":
    {
        "logging":
        [
            { "type": "stdout", "level": "INFO" },
            { "type": "file", "level": "DEBUG", "filename": "feedhandler.log" },
            
        ]
    }
    &#160;</pre>
                </div>
                <h3>Database Settings</h3>
                <p>The “database” section contains <i>e</i>X<i>treme</i>DB database settings. Below is an example of an in-memory database. RSQL server is enabled to allow for connecting to the database using <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> and RSQL-enabled applications.</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc", # Transaction manager
        "useSharedMemory": "false", # Don't use shared memory
        "useDiskDatabase": "false", # Don't use disk database
        "databaseName": "inmem_db", # Database name
        "databaseSize": "1073741824", # Size of the database, bytes
        # RSQL server parameters
        "RSQLserver": 
        {
            "enable": "true", # Enable RSQL server
            "port": 5001, # Port number for incoming RSQL connections
        },
    }
    &#160;</pre>
                </div>
                <p>To create a persistent (disk) database, add corresponding settings (RSQL server is still enabled for remote access):</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "true", # Use disk database
        "databaseName": "disk_db",
        "databaseSize": "1073741824",
        "databaseFileName": "RFA_db.dbs", # Name of the database file
        "databaseLogFileName": "RFA_db.log", # Name of the database log file
        "diskCacheSize": "1073741824", # Disk cache size, bytes
        &#160;
        "RSQLserver": 
        {
            "enable": "true",
            "port": 5001,
        },
    }
    &#160;</pre>
                </div>
                <p>Additionally, custom SQL statements and scripts can be run upon database startup:</p>
                <div class="code-block"><pre>    &#160;
    "database":
    {
        "transactionManager": "mvcc",
        "useSharedMemory": "false",
        "useDiskDatabase": "false",
        "databaseName": "inmem_db",
        "databaseSize": "1073741824",
        "SQLstatements": "create table test (t int);",
        "SQLscripts": ["create_tables.sql", "import_assets.sql"]
            
    }
    &#160;</pre>
                </div>
                <h3>Handler Module Settings</h3>
                <p>These settings describe which Feed Handler modules are used to connect to the market data sources, their specific settings (e.g. locations of configuration files, authentication settings), database tables, etc.</p>
                <p>An example of a Refinitiv RFA listener that subscribes to Level 1 (MarketPrice domain) data from the DIRECT_FEED service of the provider and stores it in table <i>MarketPrice</i>:</p>
                <div class="code-block"><pre>    &#160;
    # Handler Module settings
    "handler":
    {
        # Module name: TR RFA module
        "name" : "trfeed",
        # Module-specific settings
        "config":
        {
            "useAppLog": "false", # Don't send RFA log messages to the Feed Handler application log
            "configPath": "./", # Directory containing RFA configuration file
            "configFile": "RFA.cfg", # Name of the RFA configuration file
            "sessionName": "RFA_session", # RFA session name (must correspond to the settings in the 
                                # RFA configuration file)
            "consumerName": "RFA_OMM_Consumer", # RFA consumer name
            "connStatsReportPeriod": 5, # Period of connection statistics reporting, seconds
            # Login settings
            "login": 
            {
                "userName": "user1", # username
                "appId": "123", # application identifier
            },
        },
    &#160;
        # Database tables configuration
        "tables":
        [
            {
                "type": "MarketPrice", # Table contents' type: MarketPrice domain data
                "name": "MarketPrice", # Table name
                # Mapping of fields from the incoming data stream to the database table's columns
                "fields":
                [
                    { "source": "RIC", "target": "RIC" },
                    { "source": "BID", "target": "BID" },
                    { "source": "ASK", "target": "ASK" }
                ],
            }
        ],
    &#160;
        # Data sources: data provider's services to request data from
        "dataSources":
        [
            {
                "type": "", # Data source type: must be empty for TR feeds
                "name": "DIRECT_FEED" # Service name
            },
        ],
    &#160;
        # Level 1 subscriptions (MarketPrice domain)
        "subscriptions":
        [
            {
                "dataSource": "DIRECT_FEED", # Service name to request data from
                "sym": ["TRI.N","IBM.N","ACN.N"], # List of symbols to subscribe to
                "domain": "MarketPrice", # OMM MARKET_PRICE domain
            },
        ],
    }
    &#160;</pre>
                </div>
                <p>An example of a Vela SMDS listener that subscribes to Quote data from the CQS session manager (which must be defined in the SMDS configuration file):</p>
                <div class="code-block"><pre>    &#160;
    "handler":
    {
        # Module name: Vela SMDS module
        "name" : "smdsfeed",
    &#160;
        # Module-specific settings
        "config":
        {
            "configPath": "./", # location of the SMDS configuration file
            "configFile": "config.xml" # name of the SMDS configuration file
        },
        # Database tables configuration
        "tables":
        [
            {
                "type": "Quote", # Table contents' type: Quotes
                "name": "MyQuotes", # Table name
                &#160;
                # Mapping of fields from the incoming data stream to the database table's columns
                "fields":
                [
                    { "source": "symbol", "target": "symbol" },
                    { "source": "bid", "target": "bid" },
                    { "source": "ask", "target": "ask" }
                ],
            }
        ],
        # Data sources: types and names of the Session Managers defined in the 
        # SMDS configuration file
        "dataSources":
        [
            {
                "type": "CTASessionMgr", # type of the Session Manager
                "name": "cqs" # name of the session manager
            }
        ],
        # Market data subscriptions
        "subscriptions":
        [
            {
                "dataSource": "cqs", # name of the datasource defined above
                "sym": "*", # wildcard subscription
            }
        ],
    }
    &#160;</pre>
                </div>
                <p>An example of a Refinitiv EMA listener that subscribes to Level 1 (MarketPrice domain) data from the DIRECT_FEED service of the provider and stores it in table MarketPrice:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    "handler":
    {
        # Module name: Refinitiv EMA handler
        "name" : "emafeed",
    &#160;
        # Module-specific settings
        "config":
        {
             "configFile": "ema.xml" # name of the EMA configuration file
        },
        # Database tables configuration
        "tables":
        [
            {
                "type": "Quote", # Table contents' type: MarketPrice domain data                </pre><pre xml:space="preserve">		"name": "MarketPrice", # Table name
                &#160;
                # Mapping of fields from the incoming data stream to the database table's columns
                "fields":
                [
                    { "source": "RIC", "target": "RIC" },
                    { "source": "BID", "target": "BID" },
                    { "source": "ASK", "target": "ASK" }
                ],
            }
        ],
        # Data sources: data provider's services to request data from </pre><pre xml:space="preserve">        "dataSources":
        [
            {
                "type": "", # Data source type: must be empty for EMA feeds
                "name": "DIRECT_FEED" # Service name
            }
        ],
        # Level 1 subscriptions (MarketPrice domain)
        "subscriptions":
        [
            {
                "dataSource": "DIRECT_FEED", # Service name to request data from
                "sym": ["TRI.N","IBM.N","ACN.N"], # List of symbols to subscribe to</pre><pre xml:space="preserve">
                "domain": "MarketPrice", # OMM MARKET_PRICE domain
            }
        ],
    }
    &#160;</pre>
                </div>
                <h2>Putting It All Together</h2>
                <p>Below is a sample configuration file for a Refinitiv RFA handler using an in-memory <i>e</i>X<i>treme</i>DB database. The handler subscribes to both Level 1 and Level 2 market data (MarketPrice and MarketByOrder domains). Please note that the settings must be adjusted according to the usage scenarios. Please also note that the RFA configuration file is not provided in this appendix.</p>
                <p>A valid configuration file, along with an RFA configuration file, is also available in the target/feedhandler/scripts/TR_RFA subdirectory of the <i>e</i>X<i>treme</i>DB <i>for HPC</i> package.</p>
                <div class="code-block"><pre>    &#160;
    {
        # Application settings
        "application":
        {
            "logging":
            [
                # Print log messages with priorities "INFO" and above to the terminal
                { "type": "stdout", "level": "INFO" }
            ]
        },
        &#160;
        # Handler module settings
        "handler":
        {
            # Module name: TR RFA module
            "name" : "trfeed",
            &#160;
            # Module-specific settings
            "config":
            {
                "useAppLog": "false", # Don't send RFA log messages to the Feed Handler application log
                "configPath": "./", # Directory containing RFA configuration file
                "configFile": "RFA.cfg", # Name of the RFA configuration file
                "sessionName": "RFA_session", # RFA session name (must correspond to the settings in 
                                # the RFA configuration file)
                "consumerName": "RFA_OMM_Consumer", # RFA consumer name
                "connStatsReportPeriod": 5, # Period of connection statistics reporting, seconds
            &#160;
                # Login settings
                "login": 
                {
                    "userName": "user1", # username
                    "appId": "123", # application identifier
                },
            },
        &#160;
            # Database tables configuration
            "tables":
            [
                {
                    "type": "MarketPrice", # Table contents' type: MarketPrice domain data
                    "name": "MarketPrice", # Table name
                &#160;
                    # Mapping of fields from the incoming data stream to the database table's columns
                    "fields":
                    [
                        { "source": "RIC", "target": "RIC" },
                        { "source": "RDN_EXCHID", "target": "RDN_EXCHID" },
                        { "source": "BID", "target": "BID" },
                        { "source": "ASK", "target": "ASK" }
                    ],
                },
            &#160;
                {
                    "type": "MarketByOrder.Summary", # Table contents' type: 
                                            # MarketByOrder domain summary data
                    "name": "MarketByOrderSummary", # Table name
                &#160;
                    # Mapping of fields from the incoming data stream to the database table's columns
                    "fields":
                    [
                        { "source": "RIC", "target": "RIC" },
                        { "source": "CURRENCY", "target": "CURRENCY" },
                        { "source": "TRD_UNITS", "target": "TRD_UNITS" }
                    ],
                },
    &#160;
                {
                    "type": "MarketByOrder.Entries", # Table contents' type: 
                                            # MarketByOrder domain order data
                    "name": "MarketByOrderEntries", # Table name
                &#160;
                    # Mapping of fields from the incoming data stream to the database table's columns
                    "fields":
                    [
                        { "source": "RIC", "target": "RIC" },
                        { "source": "orderId", "target": "orderId" },
                        { "source": "entryAction", "target": "entryAction" },
                        { "source": "ORDER_PRC", "target": "ORDER_PRC" },
                        { "source": "ORDER_SIDE", "target": "ORDER_SIDE" },
                        { "source": "ORDER_SIZE", "target": "ORDER_SIZE" },
                        { "source": "QUOTIM_MS", "target": "QUOTIM_MS" },
                    ],
                },
            ],
        &#160;
            # Data sources: data provider's services to request data from
            "dataSources":
            [
                {
                    "type": "", # Data source type: must be empty for TR feeds
                    "name": "DIRECT_FEED" # Service name
                },
            ],
    &#160;
            # Level 1 and Level 2 subscriptions (MarketPrice and MarketByOrder domains)
            "subscriptions":
            [
                {
                    "dataSource": "DIRECT_FEED", # Service name to request data from
                    "sym": ["TRI.N","IBM.N","ACN.N"], # List of symbols to subscribe to
                    "domain": "MarketPrice", # OMM MARKET_PRICE domain
                },
                {
                    "dataSource": "DIRECT_FEED", # Service name to request data from
                    "sym": "TRI.ARC", # Symbol to subscribe to
                    "domain": "MarketByOrder", # OMM MARKET_BY_ORDER domain
                },
            ],
        &#160;
        },
    &#160;
        # Database configuration
        "database":
        {
            "transactionManager": "mvcc", # Transaction manager
            "useSharedMemory": "false", # Don't use shared memory
            "useDiskDatabase": "false", # Don't use disk database
            "databaseName": "RFA_inmem_db", # Database name
            "databaseSize": "1073741824", # Size of the database, bytes
            # RSQL server parameters
            "RSQLserver": 
            {
                "enable": "true", # Enable RSQL server
                "port": 5001, # Port number for incoming RSQL connections
            },
        },
    }
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h1><a name="Appendix"></a>Appendix B - Testing the Refinitiv EMA Handler Module Using the Feed Handler EMA Generator application</h1>
                <p>It is possible to use the bundled Generator application instead of a real market data feed for EMA handler evaluation purposes.</p>
                <p>The Generator is a C++ application based on the EMA C++ Interactive Provider samples. It implements a simplistic OMM Provider that emits pseudo-random market data. The Feed Handler application can subscribe to this data stream and store it just like “real” data, which is useful for evaluating and learning to use the Feed Handler application.</p>
                <h2>Running the Generator</h2>
                <p>The Generator binary is available in the<code> $(MCO_ROOT)/target/feedhandler/EMA_redistributable/Generator</code> directory. It requires the RDM dictionary files (RDMFieldDictionary and enumtype.def) to run. These files can be obtained from the Elektron SDK distribution. Please place them in the Generator directory prior to running the application.</p>
                <p>A sample EMA configuration file, <code>EmaConfig.xml</code>, is available in the Generator directory. It will be used by the EMA runtime by default.</p>
                <p>Run the Generator application from the Generator directory:</p>
                <div class="code-block"><pre>&#160;
    ./Generator
    &#160;</pre>
                </div>
                <p>If the application launches successfully, the following line will be printed:</p>
                <div class="code-block"><pre>&#160;
    OmmProvider ready
    &#160;</pre>
                </div>
                <h2>Configuring the Feed Handler</h2>
                <p>As described in this document, the Feed Handler application itself needs a configuration file. Furthermore, the EMA framework module needs its own configuration file. Examples of these files are given in the sections below.</p>
                <h2>Feed Handler Application Configuration File</h2>
                <p>Create a plain text file named "feed.cfg" in the directory from which you will launch the Feed Handler application. You can use the following configuration for testing:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
    {
       "application":
        {
            "logging":
            [
               { "type": "stdout", "level": "INFO" }
            ]
        },
        &#160;
       "handler":
        {
            "name" : "emafeed",
            "config":
            {
                "configFile": "ema.xml"</pre><pre xml:space="preserve">            },
        &#160;
             "tables":
            [
                {
                    "type": "MarketPrice", 
                    "name": "MarketPrice",
                    "fields":
                    [
                        { "source": "RIC", "target": "RIC" },
                        { "source": "BID", "target": "BID" },
                        { "source": "ASK", "target": "ASK" }
                    ],
                },</pre><pre xml:space="preserve">            ],
        &#160;
            "dataSources":
            [
                {
                    "type": "",
                    "name": "DIRECT_FEED"
                },
            ],
    &#160;
            "subscriptions":
            [
                {
                    "dataSource": "DIRECT_FEED", 
                    "sym": "TRI.N",
                    "domain": "MarketPrice"
                }
            ],
        &#160;
        },
    &#160;
        "database":
        {
            "transactionManager": "mvcc", 
            "useSharedMemory": "false",
            "useDiskDatabase": "true",
            "databaseName": "intradaydb",
            "databaseSize": "1073741824",
            "databaseFileName": "EMA.dbs",</pre><pre xml:space="preserve">  	    "databaseLogFileName": "EMA.log",</pre><pre xml:space="preserve">	    "diskCacheSize": "1073741824",</pre><pre xml:space="preserve">
            "RSQLserver": 
            {
                "enable": "true", 
                "port": 5001
            },
        },
    }
    &#160;</pre>
                </div>
                <p>Note a few important details.</p>
                <ul>
                    <li value="1">The handler.name parameter is set to “emafeed”, which corresponds to the Refinitiv EMA handler module</li>
                    <li value="2">&#160;The handler.config subsection contains important EMA-specific settings, such as the configuration file name (this file is discussed below)</li>
                    <li value="3">&#160;Only one table is defined; it is called MarketPrice and it will store the MarketPrice domain data emitted by the Generator</li>
                    <li value="4">&#160;The handler.dataSources subsection contains a single entry: “DIRECT_FEED” which corresponds to the only service that the Generator application provides by default</li>
                    <li value="5">&#160;The handler.subscriptions subsection lists a single subscription for the “TRI.N” symbol from the “DIRECT_FEED” service</li>
                    <li value="6">&#160;The database section defines a persistent database called “intradaydb” that will be stored in the “EMA.dbs” file and uses file “EMA.log” for the transaction log</li>
                    <li value="7">The database section defines the RSQL server which allows the user to access database contents</li>
                </ul>
                <h2>EMA Framework Configuration File</h2>
                <p>For detailed information on the EMA framework configuration file structure and contents, please refer to the EMA Configuration Guide (supplied with the EMA distribution archive).</p>
                <p>As we have defined in the Feed Handler application file, the EMA configuration file must be named ema.xml. Create a plain-text file called “ema.xml” in the same directory as the “feed.cfg” file with the following contents:</p>
                <div class="code-block"><pre xml:space="preserve">    &#160;
 &lt;?xml version="1.0" encoding="UTF-8"?&gt;
 &lt;EmaConfig&gt;
 &lt;ConsumerGroup&gt;
       &lt;DefaultConsumer value="Consumer_1"/&gt;
       &lt;ConsumerList&gt;
               &lt;Consumer&gt;</pre><pre xml:space="preserve">		   &lt;Name value="Consumer_1"/&gt;</pre><pre xml:space="preserve">		   &lt;Channel value="Channel_1"/&gt;</pre><pre xml:space="preserve">		   &lt;Logger value="Logger_1"/&gt;</pre><pre xml:space="preserve">		   &lt;Dictionary value="Dictionary_1"/&gt;</pre><pre xml:space="preserve">		   &lt;XmlTraceToStdout value="0"/&gt;</pre><pre xml:space="preserve">		&lt;/Consumer&gt;</pre><pre xml:space="preserve">        &lt;ConsumerList&gt;</pre><pre xml:space="preserve">&lt;/ConsumerGroup&gt;</pre><pre xml:space="preserve">&lt;ChannelGroup&gt;</pre><pre xml:space="preserve">	&lt;ChannelList&gt;</pre><pre xml:space="preserve">		&lt;Channel&gt;</pre><pre xml:space="preserve">		   &lt;Name value="Channel_1"/&gt;</pre><pre xml:space="preserve">
                   &lt;ChannelType value="ChannelType::RSSL_SOCKET"/&gt;
       	    &lt;CompressionType value="CompressionType::None"/&gt;
      		    &lt;GuaranteedOutputBuffers value="5000"/&gt;
       	    &lt;ConnectionPingTimeout value="30000"/&gt;
            	    &lt;TcpNodelay value="1"/&gt;
                   &lt;Host value="localhost"/&gt;
                   &lt;Port value="14002"/&gt;
                &lt;/Channel&gt;</pre><pre xml:space="preserve">         &lt;/ChannelList&gt;
&lt;/ChannelGroup&gt;
&lt;LoggerGroup&gt;
         &lt;LoggerList&gt;
                 &lt;Logger&gt;
                    &lt;Name value="Logger_1"/&gt;
                    &lt;LoggerType value="LoggerType::Stdout"/&gt;
                    &lt;LoggerSeverity value="LoggerSeverity::Success"/&gt;
                 &lt;/Logger&gt;
  	  &lt;/LoggerList&gt;</pre><pre xml:space="preserve">&lt;/LoggerGroup&gt;
&lt;DictionaryGroup&gt; 
         &lt;DictionaryList&gt;
           	 &lt;Dictionary&gt;
                    &lt;Name value="Dictionary_1"/&gt;
                    &lt;DictionaryType value="DictionaryType::ChannelDictionary"/&gt;
          	 &lt;/Dictionary&gt;
  	  &lt;/DictionaryList&gt;         
&lt;/DictionaryGroup&gt;
</pre><pre xml:space="preserve">
&lt;/EmaConfig&gt;</pre><pre xml:space="preserve">&#160;</pre>
                </div>
                <p>Note that the &lt;Port&gt; value corresponds to the port configured in the &lt;Server&gt; section of the Generator configuration file.</p>
                <p>Discussion of all possible configuration keys and values is beyond the scope of this document. For more information please refer to the EMA Configuration Guide.</p>
                <h2>Running the Feed Handler</h2>
                <p>Once all configuration files are ready and the Generator is launched successfully, one can start the Feed Handler application. To start it from the command line, change the current directory to the one containing the feed.cfg and ema.xml configuration files and launch the fh binary:</p>
                <div class="code-block"><pre>&#160;
    /home/user/eXtremeDB/target/bin/fh
    &#160;</pre>
                </div>
                <p>If no errors are reported, one can connect to the database using xSQL and examine the data being stored:</p>
                <div class="code-block"><pre>&#160;
    /home/user/eXtremeDB/target/bin/xsql @localhost:5001
    &#160;</pre>
                </div>
                <p>For more information on xSQL, refer to the eXtremeSQL Quick Start documentation.</p>
                <p>&#160;</p>
                <h1> Appendix C - Testing the Refinitiv RFA Handler Module Using the RFA Provider_Interactive Sample</h1>
                <p>It is possible to use the RFA Provider_Interactive sample (called “Provider” for brevity hereafter in this document) instead of a real market data feed for RFA handler evaluation purposes.</p>
                <p>The Provider is a C++ application that is a part of the RFA C++ framework. It implements a simplistic OMM Provider that emits pseudo-random market data. The Feed Handler application can subscribe to this data stream and store it just like “real” data, which is useful for evaluating and learning to use the Feed Handler application.</p>
                <p>&#160;</p>
                <h2>Building the Provider</h2>
                <p>The Provider application can be found in the Examples/Provider_Interactive subdirectory of the RFA distribution. It must be built and run according to the instructions in its Readme file, as well as the RFA Readme file. In general, it is sufficient to:</p>
                <ul>
                    <li value="1">	Extract the RFA distribution archive</li>
                    <li value="2">	Configure dynamic linker bindings (pass actual path to the RFA shared libraries):</li>
                </ul>
                <div class="code-block"><pre>&#160;
    ldconfig -n /home/user/rfa8/Libs/RHEL6_64_GCC444
    &#160;</pre>
                </div>
                <ul>
                    <li value="1">	Build RFA Provider_Interactive sample:</li>
                </ul>
                <div class="code-block"><pre>&#160;
    cd /home/user/rfa8/Examples/Provider_Interactive
    make
    &#160;</pre>
                </div>
                <p>Once the build process finishes, the binary can be found in a newly created subdirectory (typically named “RHEL6_64_GCC444”), alongside symbolic links to configuration files and dictionaries.</p>
                <p>&#160;</p>
                <h2>Configuring the Provider</h2>
                <p>Prior to launching the Provider application, one should edit its configuration files: ExampleRFA.cfg and Provider_Interactive.cfg. The former contains the session and connection parameters for the Provider (host, port, etc.). The latter file contains Provider-specific configuration (list of provided symbols, RDM domains, update frequency, etc.).</p>
                <p>The Provider_Interactive.cfg file contains a line with Provider session name which will be needed a bit later, e.g.:</p>
                <div class="code-block"><pre>    &#160;
    \Session = "SessionOMMProv"
    &#160;</pre>
                </div>
                <p>The ExampleRFA.cfg file contains settings for this session, alongside other settings:</p>
                <div class="code-block"><pre>    &#160;
    [...]
    \Connections\Connection_OMMProv\connectionType = "RSSL_PROV"
    \Connections\Connection_OMMProv\rsslPort = "&lt;rsslPort-for listening&gt;"
    [...]
    \Sessions\SessionOMMProv\connectionList = "Connection_OMMProv"
    &#160;</pre>
                </div>
                <p>Note that the settings for the Provider’s session (called “SessionOMMProv”) are located in the \Sessions\SessionOMMProv branch of the configuration file (other Sessions for other examples are configured in this file as well). The connectionList configuration key contains the single connection for this session: Connection_OMMProv, whose parameters we need to change in the \Connections\Connection_OMMProv branch of this file.</p>
                <p>The “rsslPort” parameter of the Connection_OMMProv must be set to an actual value instead of the placeholder. It must be set to any valid port value corresponding to an unoccupied TCP port on the machine (typically larger than 1023 on Linux systems); the Provider application will accept incoming connections on this port. Thus, this is the port the Feed Handler application will connect to.</p>
                <p>For demonstration purposes, we set the port number to 30000:</p>
                <div class="code-block"><pre>    &#160;
    \Connections\Connection_OMMProv\rsslPort = "30000"
    &#160;</pre>
                </div>
                <p>When the configuration is done, one can start the Provider by simply launching its executable file with the command line:</p>
                <div class="code-block"><pre>    &#160;
    ./provider_interactive
    &#160;</pre>
                </div>
                <p>If the Provider launches successfully, one will see a log output ending with text similar to this:</p>
                <div class="code-block"><pre>    &#160;
    Logger message comes from: RSSL_Adapter
    Log Id: 10114
    Event Type: 1
    Message Text: [Tue Nov 10 17:00:00 2016]: (ComponentName) RSSL_Adapter: (Severity) Information: Connection "Connection_OMMProv" listen socketID 10 success on port 30000
&#160;
    Logger message comes from: RSSL_Prov_Adapter
    Log Id: 7012
    Event Type: 1
    Message Text: [Tue Nov 10 17:00:00 2016]: (ComponentName) RSSL_Prov_Adapter: (Severity) Information: Listen Connection Status Changed, Connection: Default::Connection_OMMProv
    State:	Up
    StatusCode:	None
    StatusText:	Connection up
    &#160;
&#160;
    Listen Connection Connection_OMMProv - Up: Connection up
    &#160;</pre>
                </div>
                <p>Note that the port number that we configured appears in the message above:</p>
                <div class="code-block"><pre>    &#160;
    “Connection "Connection_OMMProv" listen socketID 10 success on port 30000”.
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Configuring the Feed Handler</h2>
                <p>As described in this document, the Feed Handler application itself needs a configuration file. Furthermore, the RFA framework module needs its own configuration file. Examples of these files are given in the sections below.</p>
                <p>&#160;</p>
                <h2>Feed Handler Application Configuration File</h2>
                <p>Create a plain text file called “feed.cfg” in the directory from which you will launch the Feed Handler application. You can use the following configuration for testing:</p>
                <div class="code-block"><pre>    &#160;
    {
        "application":
        {
            "logging":
            [ { "type": "stdout", "level": "INFO" } ]
        },
        &#160;
        "handler":
        {
            "name" : "trfeed",
            &#160;
            "config":
            {
                "useAppLog": "false",
                "configPath": "./",
                "configFile": "tr.cfg",
                "sessionName": "TR_app_session",
                "consumerName": "TR_OMM_Consumer",
                "connStatsReportPeriod": 5,
                "login": 
                {
                    "userName": "user1",
                    "appId": "123"
                }
            },
        &#160;
            "tables":
            [
                {
                    "type": "MarketPrice",
                    "name": "MyMarketPrice",
                    "fields":
                    [
                        { "source": "DBTimestampSec", "target": "DBTimestampSec" },
                        { "source": "DBTimestampMicro", "target": "DBTimestampMicro" },
                        { "source": "RIC", "target": "RIC" },
                        { "source": "respTypeNum", "target": "respTypeNum" },
                        { "source": "RDNDISPLAY", "target": "RDNDISPLAY" },
                        { "source": "RDN_EXCHID", "target": "RDN_EXCHID" },
                        { "source": "DIVPAYDATE", "target": "DIVPAYDATE" },
                        { "source": "TRDPRC_1", "target": "TRDPRC_1" },
                        { "source": "BID", "target": "BID" },
                        { "source": "ASK", "target": "ASK" },
                        { "source": "ACVOL_1", "target": "ACVOL_1" },
                        { "source": "NETCHNG_1", "target": "NETCHNG_1" },
                        { "source": "ASK_TIME", "target": "ASK_TIME" },
                    ],
                }
            ],
        &#160;
            "dataSources":
            [ { "type": "", "name": "DIRECT_FEED" } ],
        &#160;
            "subscriptions":
            [
                { 
                    "dataSource": "DIRECT_FEED", 
                    "sym": "TRI.N", 
                    "domain": "MarketPrice" 
                }, 
            ],
        },
    &#160;
        "database":
        {
            "transactionManager": "mvcc", 
            "useSharedMemory": "false", 
            "useDiskDatabase": "true",
            "databaseName": "intradaydb",
            "databaseSize": "1073741824",
            "databaseFileName": "TR.dbs",
            "databaseLogFileName": "TR.log",
            "diskCacheSize": "1073741824",
            "RSQLserver": 
            {
                "enable": "true", 
                "port": 5001,
            },
        },
    }
    &#160;</pre>
                </div>
                <p>Note a few important details.</p>
                <ul>
                    <li value="1">	The handler.name parameter is set to “trfeed”, which corresponds to the TR RFA handler module</li>
                    <li value="2">	The handler.config subsection contains important RFA-specific settings, such as the configuration file name (this file is discussed below) and user name (corresponding to the Provider application’s configuration)</li>
                    <li value="3">	Only one table is defined; it is called <i>MyMarketPrice</i> and it will store the MarketPrice domain data emitted by the Provider</li>
                    <li value="4">	The handler.dataSources subsection contains a single entry: “DIRECT_FEED” which corresponds to the only service that the Provider application provides by default</li>
                    <li value="5">	The handler.subscriptions subsection lists a single subscription for the “TRI.N” symbol from the “DIRECT_FEED” service</li>
                    <li value="6">	The database section defines a persistent database called “intradaydb” that will be stored in the “TR.dbs” file and uses file “TR.log” for the transaction log</li>
                    <li value="7">	The database section defines the RSQL server which allows the user to access database contents</li>
                </ul>
                <p>&#160;</p>
                <h2>RFA Framework Configuration File</h2>
                <p>For detailed information on the RFA framework configuration file structure and contents, please refer to the RFA Configuration Guide (supplied with the RFA distribution archive).</p>
                <p>As we have defined in the Feed Handler application file, the RFA configuration file must be named tr.cfg. Create a plain-text file called “<code>tr.cfg</code>” in the same directory as the “<code>feed.cfg</code>” file with the following contents:</p>
                <div class="code-block"><pre>    &#160;
    \Sessions\TR_app_session\connectionList = "Connection_TR_app"
&#160;
    \Connections\Connection_TR_app\connectionType = "RSSL"
    \Connections\Connection_TR_app\rsslPort = "30000"
    \Connections\Connection_TR_app\hostName = "localhost"
&#160;
    \Logger\AppLogger\useInternalLogStrings = True
    &#160;</pre>
                </div>
                <p>Note that the “<code>rsslPort</code>” value corresponds to the port we have set for the Provider. Also note that the session name (TR_app_session) corresponds to what  we set in the Feed Handler application configuration file.</p>
                <p>Discussion of all possible configuration keys and values is beyond the scope of this document. For more information please refer to the RFA Configuration Guide.</p>
                <p>&#160;</p>
                <h2>Running the Feed Handler</h2>
                <p>Once all configuration files are ready and the Provider is launched successfully, one can start the Feed Handler application. To start it from the command line, change the current directory to the one containing the feed.cfg and tr.cfg configuration files and launch the fh binary:</p>
                <div class="code-block"><pre>    &#160;
    /home/user/eXtremeDB/target/bin/fh
    &#160;</pre>
                </div>
                <p>If no errors are reported, one can connect to the database using xSQL and examine the data being stored:</p>
                <div class="code-block"><pre>    &#160;
    /home/user/eXtremeDB/target/bin/xsql @localhost:5001
    &#160;</pre>
                </div>
                <p>For more information on <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, refer to the  <a href="../../../Getting_Started/Getting_Started_SQL.htm"><i>e</i>X<i>treme</i>SQL Quick Start</a> documentation.</p>
                <p>&#160;</p>
                <h1><a name="Appendix2"></a>Appendix D - Testing the Vela SMDS Handler Module Using Feed Data Dumps</h1>
                <p>The SMDS framework is able to “replay” binary dumps of market data traffic. This feature is useful for SMDS handler evaluation.</p>
                <p>Market data “playback” is configured in the SMDS configuration file.</p>
                <p>&#160;</p>
                <h2>Configuring the Feed Handler</h2>
                <p>As described in this document, the Feed Handler application itself needs a configuration file. Furthermore, the SMDS framework needs its own configuration file. Examples of these files are given in the sections below.</p>
                <p>&#160;</p>
                <h2><a name="Feed2"></a>Feed Handler Application Configuration File</h2>
                <p>Create a plain text file called “<code>feed.cfg</code>” in the directory from which you will launch the Feed Handler application. You can use the following configuration for testing:</p>
                <div class="code-block"><pre>&#160;
    {
        "application":
        {
            "logging":
            [ { "type": "stdout", "level": "INFO" } ]
        },
        &#160;
        "handler":
        {
            "name" : "smdsfeed",
            "config":
            { "configPath": "./", "configFile": "config.xml" },
        &#160;
            "tables":
            [
                {
                    "type": "Quote",
                    "name": "MyQuotes",
                    "fields":
                    [
                        { "source": "symbol", "target": "symbol" },
                        { "source": "exchange", "target": "exchange" },
                        { "source": "DBTimestampSec", "target": "DBTimestampSec" },
                        { "source": "DBTimestampMicro", "target": "DBTimestampMicro" },
                        { "source": "bid", "target": "bid" },
                        { "source": "ask", "target": "ask" },
                    ],
                },
                {
                    "type": "Custom.CE_OPN_CLS_HG_LW_STL_PRICE",
                    "name": "MyClosePrice",
                    "fields":
                    [
                        { "source": "symbol", "target": "symbol" },
                        { "source": "exchange", "target": "exchange" },
                        { "source": "CF_PREVCLOSE_PRICE", "target": "prevClosePrice" },
                        { "source": "CF_PREV_CLOSE_DATE", "target": "prevCloseDate" },
                    ],
                },
            ],
        &#160;
            "dataSources":
            [
                { "type": "CTASessionMgr", "name": "cqs" }
            ],
        &#160;
            "subscriptions":
            [
                {
                    "dataSource": "cqs",
                    "sym": "*",
                },
            ],
        &#160;
        },
    &#160;
        "database":
        {
            "transactionManager": "mvcc", 
            "useSharedMemory": "false", 
            "useDiskDatabase": "true",
            "databaseName": "intradaydb",
            "databaseSize": "1073741824",
            "databaseFileName": "SMDS.dbs",
            "databaseLogFileName": "SMDS.log",
            "diskCacheSize": "1073741824",
            "RSQLserver": 
            {
                "enable": "true", 
                "port": 5001,
            },
        },
    }
    &#160;</pre>
                </div>
                <p>Note a few important details:</p>
                <ul>
                    <li value="1">	The handler.name parameter is set to “smdsfeed”, which corresponds to the SMDS handler module</li>
                    <li value="2">	The handler.config subsection contains the SMDS configuration file location (this file is discussed below)</li>
                    <li value="3">	Two tables are defined; one is called MyQuotes and will store quote data, another is called <i>MyClosePrice</i> and will store custom event data provided in the SMDS custom events of type <code>CE_OPN_CLS_HG_LW_STL_PRICE</code></li>
                    <li value="4">	The handler.dataSources subsection contains a single entry: “<code>cqs</code>” data source of type “CTASessionMgr” which corresponds to the SMDS CTA session manager</li>
                    <li value="5">	The handler.subscriptions subsection lists a single wildcard subscription for the “<code>cqs</code>” session manager</li>
                    <li value="6">	The database section defines a persistent database called “intradaydb” that will be stored in the “SMDS.dbs” file and uses file “SMDS.log” for the transaction log</li>
                    <li value="7">	The database section defines the RSQL server that allows the user to access database contents</li>
                </ul>
                <p>&#160;</p>
                <h2>SMDS Framework Configuration File</h2>
                <p>For information on the SMDS framework configuration file structure and contents please refer to the SMDS User Guide.</p>
                <p>As we have defined in the Feed Handler application file, the SMDS configuration file must be named “<code>config.xml</code>”. Create a plain-text file called “<code>config.xml</code>” in the same directory as the “<code>feed.cfg</code>” file with the following contents:</p>
                <div class="code-block"><pre>    &#160;
    &lt;config&gt;
    &lt;License file="PATH_TO_THE_LICENSE_FILE" /&gt;
    &lt;MDLibraryList&gt;
    &lt;MDLibrary name="libmd-cta.so" /&gt;
    &lt;/MDLibraryList&gt;
    &lt;Logger file="smds.log" level="debug" max-size-in-mb="300" /&gt;
    &lt;Resources&gt;
    &lt;Resource type="CTASessionMgr" name="cqs" lb-type="exchange-dictated" record="false" conn-type="file" pb-file="cqsE1-2015-11-03-4.1.0-record.1446568260.pb.gz" pb-buffer="1048576"&gt;
    &lt;MDConnections&gt;
        &lt;MDConnection max-record-size="1000" max-q-size="200000" name="CTA-GRP-2"&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L1" primary-mc-channel="233.200.79.32:61032"  secondary-mc-channel="233.200.79.48:61048"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L2" primary-mc-channel="233.200.79.33:61033" secondary-mc-channel="233.200.79.49:61049"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L3" primary-mc-channel="233.200.79.34:61034" secondary-mc-channel="233.200.79.50:61050"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L4" primary-mc-channel="233.200.79.35:61035" secondary-mc-channel="233.200.79.51:61051"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L5" primary-mc-channel="233.200.79.36:61036" secondary-mc-channel="233.200.79.52:61052"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L6" primary-mc-channel="233.200.79.37:61037"  secondary-mc-channel="233.200.79.53:61053"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L7" primary-mc-channel="233.200.79.38:61038"  secondary-mc-channel="233.200.79.54:61054"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L8" primary-mc-channel="233.200.79.39:61039" secondary-mc-channel="233.200.79.55:61055"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L9" primary-mc-channel="233.200.79.40:61040" secondary-mc-channel="233.200.79.56:61056"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L10" primary-mc-channel="233.200.79.41:61041" secondary-mc-channel="233.200.79.57:61057"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L11" primary-mc-channel="233.200.79.42:61042" secondary-mc-channel="233.200.79.58:61058"/&gt;
            &lt;MDLineHandler source="CQS" name="CQS-L12" primary-mc-channel="233.200.79.43:61043" secondary-mc-channel="233.200.79.59:61059"/&gt;
        &lt;/MDConnection&gt;
    &lt;/MDConnections&gt;
    &lt;/Resource&gt;
    &lt;/Resources&gt;
    &lt;/config&gt;
    &#160;</pre>
                </div>
                <p><b>Note that this file should be edited prior to launching the feed handler.</b>
                </p>
                <p>A few important details:</p>
                <ul>
                    <li value="1">	A valid license file must be specified in the &lt;License /&gt; key (instead of the PATH_TO_THE_LICENSE_FILE placeholder)</li>
                    <li value="2">	“libmd-cta.so” library is listed in the “MDLibraryList” section; this is an SMDS module that implements CTA support</li>
                    <li value="3">	The CTASessionMgr session manager is defined in the &lt;Resource&gt; subsection of the &lt;Resources&gt; section; it is important that:<ul style="list-style-type: circle;"><li value="1">The “name” parameter value (“cqs”) in the &lt;Resource&gt; section must correspond to the name of the data source defined in the “dataSources” section</li><li value="2">The “pb-file” parameter in the &lt;Resource&gt; section must point to a valid feed data dump file</li><li value="3">A number of &lt;MDLineHandler&gt; subsections are defined in the &lt;MDConnection&gt; section; these define addresses and ports of actual multicast channels and will vary from feed to feed</li></ul></li>
                </ul>
                <p>The SMDS configuration file is complex. Different session managers have different sets of supported settings. Discussion of all possible configuration keys and values is beyond the scope of this document. For more information please refer to the SMDS User Guide.</p>
                <p>&#160;</p>
                <h2>Running the Feed Handler</h2>
                <p>Once all configuration files are ready, one can start the Feed Handler application. To start it from the command line, change the current directory to the one containing the feed.cfg and config.xml configuration files and launch the fh binary:</p>
                <div class="code-block"><pre>    &#160;
    /home/user/eXtremeDB/target/bin/fh
    &#160;</pre>
                </div>
                <p>When the Feed Handler application is started, it loads the SMDS framework, which, in turn, loads its configuration file and begins playback of the feed data dump file. The Feed Handler receives the records extracted from the data dump file and stores them in the database.</p>
                <p>If no errors are reported, one can connect to the database using <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> and examine the data being stored:</p>
                <div class="code-block"><pre>    &#160;
    /home/user/eXtremeDB/target/bin/xsql @localhost:5001
    &#160;</pre>
                </div>
                <p>For more information on <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, refer to the <i>e</i>X<i>treme</i>DB <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> documentation.</p>
                <p>&#160;</p>
                <h1><a name="Building"></a>Appendix E - Building the Feed Handler Application from Source Code</h1>
                <p>The Feed Handler application consists of the primary executable and loadable modules. All of these are built using a single makefile in the application’s root directory.</p>
                <h2>Prerequisites</h2>
                <p>In addition to the framework libraries required for the application to run, the corresponding C++ header files are required for compilation as well. These are included in the framework distribution archives supplied by their vendors.</p>
                <h2>Environment Variables</h2>
                <p>The environment variables must be set according to the instructions in the “Prerequisites” section of the “Getting Started” chapter.</p>
                <p>If the <code>SMDS_ROOT</code> or <code>RFA_ROOT</code> environment variables are not set, the corresponding handler modules will be skipped during the build process.</p>
                <h2>Building the Application</h2>
                <p>When the third-party frameworks are prepared and the environment variables are set, one can build the Feed Handler simply by issuing make in the root folder of the application:</p>
                <div class="code-block"><pre>    &#160;
    cd /home/user/eXtremeDB/target/feedhandler
    make
    &#160;</pre>
                </div>
                <p>If some Feed Handler modules should not be built, one can remove them from the <code>FEED_MODULES</code> list in the root makefile.</p>
                <p>On Windows, Visual Studio project files can be used to build the Feed Handler application and the modules.</p>
                <p>&#160;</p>
                <h2>Appendix F - Testing the Feed Handler Application Using the Test Data Provider</h2>
                <p>It's possible to use the provided test data provider with the Feed Handler application. It may be useful to evaluate software without any need for external dependencies, for assessing hardware, measuring hardware capabilities, etc.</p>
                <p>The test provider can generate test trades and quotes. It will start a thread for each table, and perform inserts at maximum speed.</p>
                <p>Generated tables and fields are:</p>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><b>Table</b>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><b>Field name</b>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1"><b>Data type</b>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1" rowspan="8">Quote</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">symbol</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">string</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">exch</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">char</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">qtime</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">int8</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">bid</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">float</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">ask</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">float</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">bidsz</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">int4</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">asksz</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">int4</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mode</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">char</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1" rowspan="7">Trade</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">symbol</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">string</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">exch</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">char</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">ttime</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">int8</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">price</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">float</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">size</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">int4</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">stop</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">bool</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">condition</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">char</td>
                        </tr>
                    </tbody>
                </table>
                <p>To use the test provider, include the following snippet into the feed handler configuration file:</p>
                <div class="code-block"><pre>    &#160;
    # Market data handler module configuration
    "handler":
    {
        # Use Test generator
        "name" : "testfeed",
        &#160;
        # Database tables subsection
        "tables":
        [
            # Table definition subsection for storage of quote data
            {
                # Type of the table. Depends on feed module.
                "type": "Quote",
                # Name of the table in the database
                "name": "MyQuotes",
                # Array of field mappings
                "fields":
                [
                    { "source": "symbol", "target": "symbol" },
                    { "source": "exch", "target": "exchange" },
                    { "source": "bid", "target": "bid" },
                    { "source": "ask", "target": "ask" },
                ],
            },
            &#160;
            # Another table definition subsection for storage of
            # trade data
            {
                "type": "Trade",
                "name": "MyTrades",
                "fields":
                [
                    { "source": "price", "target": "lastPrice" },
                    { "source": "size", "target": "lastSize" },
                ],
            },
        ],
    }
    &#160;</pre>
                </div>
                <p>This will load the test generator, define 2 tables in the output database and define some field mappings.</p>
                <p>&#160;</p>
                <h1>Appendix G - References</h1>
                <ul>
                    <li value="1"><![CDATA[	]]><b>RDM Usage Guide</b>: available in the RFA C++ distribution archive, in Docs/RDMUsageGuide.pdf</li>
                    <li value="2"><![CDATA[	]]><b>RFA Configuration Guide</b>: available in the RFA C++ distribution archive, in Docs/RFA_ConfigGuide.pdf</li>
                    <li value="3"><![CDATA[	]]><b>RFA Developers Guide</b>: available in the RFA C++ distribution archive, in Docs/RFA_DevelopersGuide.pdf</li>
                    <li value="4"><![CDATA[	]]><b>SMDS User Guide</b>, <b>SMDS API Guide</b>: provided by Vela upon request</li>
                </ul>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>