<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Lua eXtremeSQL Interface</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Lua <i>e</i>X<i>treme</i>SQL Interface</h1>
            <blockquote>
                <h2>Connections</h2>
                <p>A connection is used to access most of the database features. When a UDF is called, the database connection is already established as  predefined variable <code>con</code>.</p>
                <p>When a script or the console is used, it’s necessary to call function <code>connect()</code> to explicitly make a connection. The argument of the <code>connect()</code> function is a table with specified keys. This function can connect to local database, a remote RSQL database, or a distributed database depending on it’s arguments.</p>
                <h3>Examples:</h3>
                <p>The following code snippet creates a local in-memory (IM) database (in process ) and makes a connection to it.</p>
                <div class="code-block"><pre>    &#160;
    db = create("luadb", devices, dbparams)
    c = connect{db=db}
    &#160;</pre>
                </div>
                <p>The following command will create an IM database named <code>testdb</code> with size of 100Mb and page size 512 bytes. (Parameter <code>pagesize</code> could be omitted as it has default value of 256 bytes).</p>
                <div class="code-block"><pre>&#160;
    c = connect{dbname=”testdb”, dbsize=100*1024*1024, pagesize=512}
    &#160;</pre>
                </div>
                <p>The following command will  connect to remote <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> server located on the same machine on port 5000. </p>
                <div class="code-block"><pre>    &#160;
    c = connect{host=”localhost”, port=5000}
    &#160;</pre>
                </div>
                <p>The following command will create a distributed connection to 2 shards.</p>
                <div class="code-block"><pre>    &#160;
    c = connect{nodes={"localhost:5000", "localhost:5001"}}
    &#160;</pre>
                </div>
                <p>The following additional parameters are supported for connections:</p>
                <ul>
                    <li value="1"><code>nReplicas</code>: The number of HA&#160;replics</li>
                    <li value="2"><code>maxConnectAttempts</code>: The number of times to attempt to connect</li>
                    <li value="3"><code>connectTimeout</code>: The timeout for connection attempts</li>
                    <li value="4"><code>sql_login</code>: Security login name</li>
                    <li value="5"><code>sql_password</code>: Security password</li>
                </ul>
                <h2>Running SQL queries</h2>
                <p>Once a connection is established, we can perform statements and queries using that connection. A statement does not return data from the database, while a query does.</p>
                <p>The following is an example of statement:</p>
                <div class="code-block"><pre>&#160;
    con:statement("create table MyTable (pk int, value string)")
    &#160;</pre>
                </div>
                <p>This can be run from a UDF or as a script.</p>
                <p>To make it possible to retrieve data from the query, the function <code>con:query()</code> returns a <i>cursor</i> object. Cursor objects allow iteration over their content, and return data represented as rows. The rows are <i>Lua</i> tables in the form <code>key=value</code> where <code>key</code> is the column name and <code>value</code> is the corresponding row value.</p>
                <p>The following is an example of cursor iteration:</p>
                <div class="code-block"><pre>&#160;
    for row in con:query("select pk,value from MyTable"):tuples() do
        return print row.pk, row.value
    end
    &#160;</pre>
                </div>
                <h2>Passing Parameters to an SQL Query</h2>
                <p>It is possible to pass parameters into a query or statement. The <i>e</i>X<i>treme</i>SQL <i>Lua</i> interface is a thin layer on top of the <i>e</i>X<i>treme</i>SQL C++ SQL API, and the <i>LuaJIT FFI</i> intreface is used to bind and pass parameters. All parameters of a query are passed "as is", without any checking or processing. Note the following rules regarding parameters:</p>
                <ul>
                    <li value="1">Parameters in the query are specified in the "%" form, exactly as in the <a href="../../../Programming/Common/Format_Specifiers/Format_Specifiers_C_Cpp.htm">C++ SQL API</a></li>
                    <li value="2">	Parameter values are passed as <i><a href="http://luajit.org/ext_ffi.html"><i>FFI</i></a></i> data types</li>
                    <li value="3">Passing parameters is unsafe. No extra checking is performed in <i>e</i>X<i>treme</i>SQL layer and <i>FFI</i> translates parameters into low level C-compatible data and data structures. So, an error  specifying parameters or parameter types will result in undefined behavior. Most likely it will cause a program (server) crash, but not necessarily. It could cause data corruption, data loss, etc.</li>
                </ul>
                <p>The following is an example of passing parameters:</p>
                <div class="code-block"><pre>&#160;
    for row in con:query("select k from t where i=%i", ffi.new("int", i)):tuples() do
        return row.k
    end
    &#160;</pre>
                </div>
                <p>The supported format specifiers and corresponding <i>FFI</i> expressions are listed in the table below:</p>
                <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" class="TableStyle-FunctionReference" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 328px;" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <thead>
                        <tr class="TableStyle-FunctionReference-Head-Header1">
                            <th class="TableStyle-FunctionReference-HeadE-Column2-Header1"><i>Format specifier</i>
                            </th>
                            <th class="TableStyle-FunctionReference-HeadE-Column2-Header1"><i>e</i>X<i>treme</i>DB data type</th>
                            <th class="TableStyle-FunctionReference-HeadD-Column2-Header1"><i>FFI</i> expression</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%b</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>bool</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("bool", true)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%i</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>int</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("int", 1)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%i8</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>int64_t</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("int64_t", 1000000000000)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%u</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>unsigned</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("unsigned", 2)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%l</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>int64_t</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("int64_t", 1000000000000)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%L</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>integer</code> value, passed as <code>double</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Native Lua type, a lua value can be passed. 
123456
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%I1</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 1 byte integers. <code>size_t,int8_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">2 values expected – size and an array. Array is passed as zero-based, while lua array is 1-based, so actual size of allocated array should be size+1

ffi.new('size_t', 3), ffi.new('int8_t[4]', {1,2,3}) 
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%I2</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 2-byte integers.<code> size_t,int16_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('int16_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%I4</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 4-byte integers.<code> size_t,int32_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('int32_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%I8</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 8-byte integers. <code>size_t,int64_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('int64_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%U1</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 1-byte unsigned integers.<code> size_t,uint8_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new('size_t', 3), ffi.new('uint8_t[4]', {1,2,3})</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%U2</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 2-byte unsigned integers. <code>size_t,uint16_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('uint16_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%U4</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 4-byte unsigned integers. <code>size_t,uint32_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('uint32_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%U8</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of 8-byte unsigned integers. <code>size_t,uint64_t*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('uint64_t[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%F4

</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of floats. <code>size_t,float*</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('float[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%F8</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Array of doubles. <code>size_t,double*
</code><![CDATA[	
]]></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Same as above. 
ffi.new('size_t', 3), ffi.new('double[4]', {1,2,3})
</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%A</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>size_t</code> nElems, <code>size_t</code> elemSize, <code>char*</code> body</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">&#160;</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%f</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>double</code>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("double", 10.1) or just Lua numeric value – 10.1</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">%t</td>
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><code>mco_datetime</code>. This is an internal representation of <code>datetime</code>, represented as <code>uint64_t</code></td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">ffi.new("uint64_t", ticks)

</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">%s</td>
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1"><code>char*</code>, but <i>Lua</i> string is properly converted</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">'hello world'</td>
                        </tr>
                    </tbody>
                </table>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>