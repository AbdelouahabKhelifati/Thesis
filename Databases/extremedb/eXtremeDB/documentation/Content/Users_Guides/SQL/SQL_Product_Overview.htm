<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB SQL Product Overview</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>DB SQL Product Overview</h1>
            <blockquote>
                <p><i>e</i>X<i>treme</i>SQL is implemented in the C library <code>libmcosql</code>.  C and C++ developers link these libraries directly into their applications and can use the C language API functions, such as <code>mcosql_execute_query()</code> and <code>mcosql_execute_statement()</code>,or the rich set of C++ classes, such as <i>McoSqlEngine</i> for executing SQL statements and queries and <i>QueryResult</i> for processing result sets. The Java, C# and Python APIs also support SQL through classes <i>SqlLocalConnection</i>, <i>SqlRemoteConnection </i>and<i> SqlResultSet. </i></p>
                <p>In addition the highly configurable command-line utility <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> is provided to allow for development and testing of SQL scripts, either interactively or via SQL script files, on <i>e</i>X<i>treme</i>DB databases with all possible options, including <a href="../Core/MVCC_Transaction_Manager.htm" name="kanchor151">MVCC</a> or <a href="../Core/MURSIW_Transaction_Manager.htm" name="kanchor152">MURSIW</a> transaction managers, debug or release libraries, <i>e</i>X<i>treme</i>DB<i> High Availability</i> and <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i>. The <a href="../../Getting_Started/Quick_Start/QS_xSQL_Embedded.htm">Quick Start Tutorial</a> provides examples demonstrating the use of <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>.</p>
                <h2>Operational Overview</h2>
                <p>The following diagram illustrates the <i>e</i>X<i>treme</i>SQL application structure and operational flow:</p>
                <p>
                    <img src="../../Resources/Images/SQL_1.PNG" />
                </p>
                <p>This diagram depicts the major operational steps and elements of <i>e</i>X<i>treme</i>SQL. SQL statements are embedded within application code and submitted to <i>e</i>X<i>treme</i>SQL through the APIs mentioned above. The SQL statements are parsed to verify their syntactical correctness.  Then, if no errors are found, the <a href="SQL_Optimizer.htm">optimizer</a><a name="kanchor153"></a> is invoked.  The optimizer attempts to determine the most efficient means of processing the statement by interrogating the database dictionary to discover potential indexes and autoid/reference relationships between classes. This step results in an execution plan that identifies the procedural steps <i>e</i>X<i>treme</i>SQL will take in producing the result set. (e.g., locate an object of class X by the index on field A; use the value of field B of the found object as a search value on indexed field D of class Y, and so on.).</p>
                <p>After the statement has been parsed, optimized, and an execution plan formed, the database is updated or queried.</p>
                <h2><i>e</i>X<i>treme</i>SQL Processing</h2>
                <p>Most commonly, <i>e</i>X<i>treme</i>SQL statements are embedded in C, C++, Java or C# within a single-threaded application by instantiating an <b>engine</b> object  and calling its <b>execute</b> method. However, multiple processes can simultaneously access a database in shared memory, or two or more threads within a single process can simultaneous access an in-memory or disk-based database using the <b>engine</b>.</p>
                <p>The number of concurrent threads accessing the database through <i>e</i>X<i>treme</i>SQL should be considered carefully. The nature of any dynamic SQL implementation is that it requires fairly extensive use of dynamic memory allocation, for holding tokens during parsing, for temporary results during execution, and miscellaneous other uses.  It is prudent to restrict the number of tasks (threads) simultaneously processing SQL to keep memory consumption within reasonable bounds.</p>
                <p>In <i>e</i>X<i>treme</i>SQL version 6.5 or later a number of significant enhancements were implemented that address performance issues for complex SQL statement processing.</p>
                <p>Specifically:</p>
                <ul>
                    <li value="1">dynamic memory allocation that was previously occurring during statement compilation and building the execution plan has been replaced with static memory “block” allocation</li>
                    <li value="2">“materialization” takes place only when necessary for sort and aggregation operations</li>
                    <li value="3">the <i>e</i>X<i>treme</i>SQL C++ and C APIs have been slightly modified to reduce the number of virtual and indirect calls, and use arrays instead of iterators where possible</li>
                    <li value="4">database metadata is shared between sessions to avoid caching</li>
                    <li value="5">a reference to the current memory allocator is used to eliminate the use of thread-specific memory.</li>
                </ul>
                <h2><i>e</i>X<i>treme</i>SQL Query Optimization</h2>
                <p>Creating the optimal plan for execution of SQL statements is a very complex and challenging task.  SQL optimizers analyze SQL queries sent to the database and select the best search strategies for accessing the database.</p>
                <p>There are two classes of SQL optimizers: cost-based and rule-based. Disk-based database systems generally use a cost-based optimizer.  With cost-based optimizers, query optimization greatly depends on data distribution.  Often, optimizers take samples and use statistics provided by the database engine, and collect statistical information themselves, to calculate the cost of candidate execution plans.  Building optimal plans is CPU-intensive and inherently unpredictable; the amount of time spent in the optimizer varies from query to query and execution plans can change from one invocation to another as the distribution of data changes.</p>
                <p>To provide faster and more deterministic performance, <i>e</i>X<i>treme</i>SQL uses a rule-based optimizer that enables the developer to specify query execution plans within an application.  For example, the optimizer never reorders tables in the query: the joins are performed in the sequence the tables were specified.  Some of the other key rules that are used for query optimization include:</p>
                <ul>
                    <li value="1">If possible, an index is used.</li>
                    <li value="2">Each table is assigned an ordinal number representing its position in the <code>FROM</code> list.</li>
                    <li value="3">The search predicate is divided into the set of conjuncts and the conjuncts are sorted. Therefore the expressions accessing the tables with smaller ordinal numbers are checked first.</li>
                    <li value="4">The execution of subqueries is optimized by checking the dependencies of the subquery expression. The results of the subquery are saved and recalculated only if the subquery expression refers to fields from the enclosing scope.</li>
                </ul>
                <p>For more information about query optimization in <i>e</i>X<i>treme</i>SQL, see the <a href="SQL_Optimizing_Query_Performance.htm">Optimizing Query Performance</a> page.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>