<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Managing eXtremeSQL Transactions in C </title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Managing <i>e</i>X<i>treme</i>SQL Transactions in C </h1>
            <blockquote>
                <p>As explained in the <a href="../../Core/Transaction_Control.htm"><i>e</i>X<i>treme</i>DB User Guide</a>, all <i>e</i>X<i>treme</i>DB database operations are performed within the context of a transaction. A <code>READ_ONLY</code> transaction is started for database read operations, and then the transaction is committed or rolled back after the read is completed. Likewise, all database updates (<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, operations) are performed within a <code>READ_WRITE</code> transaction that is either committed or rolled back when the operation is complete.</p>
                <p>This “transaction blocking” is done implicitly by the query and update statements. When <code>mcosql_execute_query()</code> or  <code>mcosql_execute_prepared_query()</code> is called with a <code>NULL</code> transaction handle (second argument) as in the above examples, a <code>READ_ONLY</code><a name="kanchor71"></a> transaction is started and closed by the runtime. Likewise, when calling functions <code>mcosql_execute_statement()</code> or  <code>mcosql_execute_prepared_statement()</code>, a <code>READ_WRITE</code> transaction is started and closed by the runtime.</p>
                <p>If the application needs to group a number of SQL statements in a single database transaction, it takes charge of the transaction blocking explicitly by first opening the transaction with <code>mcosql_begin_transaction()</code> which returns a transaction handle; then, after all of the SQL statements have been completed, closing the transaction with <code>mcosql_commit_transaction()</code> or <code>mcosql_rollback_transaction()</code>. The function <code>mcosql_begin_transaction()</code> is as follows:</p>
            </blockquote>
            <blockquote>
                <div class="code-block"><pre>&#160;
    mcosql_begin_transaction(database_t database, transaction_t* trans,
                    enum mcosql_transaction_mode mode,
                    int priority);
    &#160;</pre>
                </div>
            </blockquote>
            <blockquote>
                <p>This function returns a valid transaction in argument trans, or an error code if a transaction cannot be started. The third argument mode specifies the transaction type: <code>MCO_READ_ONLY</code> or <code>MCO_READ_WRITE</code>. And the fourth argument specifies the transaction priority which should always be <code>MCO_TRANS_FOREGROUND</code> (though other transaction priority options are available, they are not recommended. (Please refer to the <a href="../../Core/Concurrency_Transaction_Managers.htm">Concurrency Control</a> page  for a detailed explanation of transaction processing and priority management.)</p>
                <p>The functions  <code>mcosql_commit_transaction()</code> and  <code>mcosql_rollback_transaction()</code> simply require a valid transaction handle argument. They are as follows:</p>
                <div class="code-block"><pre>    &#160;
    mcosql_commit_transaction(transaction_t trans);
    mcosql_rollback_transaction(transaction_t trans);
    &#160;</pre>
                </div>
                <h2>Checkpoint and Autocheckpoint</h2>
                <p>As explained in the <a href="../SQL_Transaction_Control.htm"><i>e</i>X<i>treme</i>SQL Transaction Control</a> page, a <b>checkpoint</b> operation may be necessary in complex transactions to update indexes prior to the <b>transaction commit</b>. The C API function to cause a checkpoint is <a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/checkpoint.htm"><code>mco_trans_checkpoint()</code></a>. Or the following SQL statement can be used to cause a checkpoint:</p>
                <div class="code-block"><pre>&#160;
    executeStatement("CHECKPOINT TRANSACTION");
    &#160;</pre>
                </div>
                <p>To enable the <b>autocheckpoint</b> feature set the <code>MCO_DB_SQL_AUTOCHECKPOINT</code> flag in database parameter <code>mco_db_params_t.mode_mask</code>.  For example:</p>
                <div class="code-block"><pre>&#160;
    int main(int argc, char* argv[])
    {
        ...
        mco_db_params_t       db_params;
        ...
        mco_db_params_init( &amp;db_params );               /* Initialize the params with default values */
        ...
        db_params.mode_mask = MCO_DB_SQL_AUTOCHECKPOINT;
            
        ...
    }
    &#160;</pre>
                </div>
                <h2>Isolation level</h2>
                <p>It is also possible to set the <code><a href="../../Core/Isolation_Levels.htm">isolation level</a></code>  for a transaction by calling the extended version <code>mcosql_begin_transaction_ex()</code> whose signature is as follows :</p>
            </blockquote>
            <blockquote>
                <div class="code-block"><pre>&#160;
    mcosql_begin_transaction_ex(database_t database, transaction_t* trans,
                    enum mcosql_transaction_mode mode,
                    int priority,
                    enum mcosql_transaction_isolation_level level);
    &#160;</pre>
                </div>
            </blockquote>
            <blockquote>
                <h2>Upgrading a Transaction</h2>
                <p>It is possible to upgrade a <code>READ_ONLY</code> transaction started for a query to a <code>READ_WRITE</code> transaction for updating data within the same transaction by calling the following:</p>
            </blockquote>
            <blockquote>
                <div class="code-block"><pre>&#160;
    mcosql_upgrade_transaction(transaction_t trans);
    &#160;</pre>
                </div>
            </blockquote>
            <blockquote>
                <h2>Releasing a Transaction</h2>
                <p>Once the transaction block is complete, the transaction handle should be “released” to release all resources associated with this transaction. This is done by calling the following function:</p>
            </blockquote>
            <blockquote>
                <div class="code-block"><pre>&#160;
    mcosql_release_transaction(transaction_t trans);
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>