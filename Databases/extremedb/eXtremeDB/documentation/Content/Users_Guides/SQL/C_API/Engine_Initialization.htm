<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeSQL SQL Engine Initialization in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>SQL SQL Engine Initialization in C</h1>
            <blockquote>
                <p>Once the database is opened and connected, SQL access to the database is performed via a SQL database “engine” structure defined as type <code>database_t</code>. This structure is used, for all calls to the <code>mcosql_*</code> functions. The database engine can be created in two ways depending on how the application wants to manage dynamic memory allocations.</p>
                <p>The simplest method is demonstrated in the following code snippet:</p>
                <blockquote>
                    <div class="code-block"><pre>    &#160;
    /* Create a SQL engine */
    rc = (MCO_RET)mcoapi_create_engine(db, &amp;engine);
                
    if ( MCO_S_OK == rc ) 
    {
        /* Do database processing ... */
        /* Destroy the SQL engine */
        &#160;
        rc = (MCO_RET)mcoapi_destroy_engine( engine );
                
        &#160;
        /* Disconnect from and close the database, then free database memory */
        rc = mco_db_disconnect(db);
        rc = mco_db_close(db_name);
        free( dev.dev.conv.ptr );
    }
    &#160;</pre>
                    </div>
                </blockquote>
                <p>The pair of functions <code>mcoapi_create_engine()</code> and  <code>mcoapi_destroy_engine()</code><a name="kanchor495"></a> take care of all initialization and cleanup associated with the SQL  database engine. However, it is still the application’s responsibility to disconnect from and close the database as well as to free the database memory. Using this method, the standard C runtime dynamic memory allocation functions <code>malloc()</code> and <code>free()</code> are called internally by the <i>e</i>X<i>treme</i>SQL runtime for all SQL processing; i.e. parsing and compiling SQL statements, producing result sets, etc.</p>
                <p>Since these memory requirements can be large and unpredictable, some applications prefer to manage the dynamic memory with custom memory management functions. To allow for this, a second method is provided as demonstrated in the following snippet:</p>
                <blockquote>
                    <div class="code-block"><pre>    &#160;
    #define ALLOC_QUANTUM   1024*1024
    #define ALLOC_RETAIN    8*1024*1024
    &#160;
    /* define custom memory management functions */
    void * mem_alloc( size_t n_bytes )
    {
        buffer = (void*)malloc( n_bytes );
        printf("\n\n\tmem_alloc(): %u bytes allocated at address 0x%" INT8_FORMAT "x\n",
        (unsigned int)n_bytes, (int64_t)buffer);
        return buffer;
    }
    &#160;
    void mem_free( void * buf )
    {
        printf("\n\tmem_free(): memory freed at address 0x%" INT8_FORMAT "x\n", (int64_t)buf);
        free(buf);
    }
    &#160;
    /* connect to the database by name */
    rc = mco_db_connect( db_name, &amp;db );
    &#160;
    if ( MCO_S_OK == rc ) 
    {
        /* Set SQL memory allocator to custom malloc/free */
        rs = mcosql_initialize_dynamic_memory_manager(
					&amp;mem_alloc, &amp;mem_free,
                
        ALLOC_QUANTUM, ALLOC_RETAIN);
        &#160;
        /* Initialize eXtremeDB SQL mapper */
        rs = mcoapi_initialize(db);
                
        &#160;
        /* Open SQL engine */
        rs = mcosql_open( &amp;engine );
                
        &#160;
        /* Do normal database processing ... */
        /* Close SQL engine and disconnect from database */
        rs = mcosql_close( engine );
                
    }
    &#160;
    /* close the database, shutdown runtime and free database memory */
    rc = mco_db_close(db_name);
    mco_runtime_stop();
    free( dev.dev.conv.ptr );
    &#160;
    &#160;</pre>
                    </div>
                </blockquote>
                <p>Note the following in this example code:</p>
                <ul>
                    <li value="1"> two custom memory management functions <code>mem_alloc()</code> and <code>mem_free()</code> are defined (these are simple examples that use standard <code>malloc()</code> and <code>free()</code> with a printf() to display the memory operation; clearly more sophisticated custom memory management is possible).</li>
                    <li value="2">	the function <code>mcosql_initialize_dynamic_memory_manager()</code> is called to register and initialize the custom functions with the <i>e</i>X<i>treme</i>SQL runtime. The two pre-defined arguments <code>ALLOC_QUANTUM</code> and <code>ALLOC_RETAIN</code> provide the runtime with necessary allocation block size and total memory allocation size values.</li>
                    <li value="3">	the function <code>mcoapi_initialize(db)</code> is called to map  runtime internals to the  SQL database engine.</li>
                    <li value="4">	after these preparatory steps, the SQL database engine is now created using function <code>mcosql_open( &amp;engine )</code>.</li>
                    <li value="5">	when the SQL database engine is initialized in this way, the function <code>mcosql_close()</code> is called to disconnect the database and “destroy” the engine (NB: It is not necessary to call <code>mco_db_disconnect()</code> as is required when using <code>mcoapi_create_engine()</code> and  <code>mcoapi_destroy_engine()</code>, however it is necessary to call <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/close.htm">mco_db_close()</a></code> to close the database).</li>
                    <li value="6">	The return code variable <code>rs</code> is used to distinguish SQL return codes from the <i>e</i>X<i>treme</i>DB runtime codes in variable <code>rc</code>. SQL return codes are defined in the header file “<code>include/sql/sqlc.h</code>”, whereas <i>e</i>X<i>treme</i>DB runtime codes are defined in “<code>include/mco.h</code>”.</li>
                </ul>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>