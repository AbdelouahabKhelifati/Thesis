<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Aggregating User-Defined Functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <h1>Aggregating User-Defined Functions</h1>
            <blockquote>
                <p>The <i>Sql Engine</i> allows user-defined functions (UDF) to perform custom aggregation, i.e. functions used with the SQL <code>group by</code> operator. These user-defined functions can be used like SQL functions <code><a href="../SQL_Language_Reference/Functions/Aggregate_Functions.htm"><code>sum()</code></a></code>, <code><a href="../SQL_Language_Reference/Functions/Aggregate_Functions.htm">count()</a></code>, <code><a href="../SQL_Language_Reference/Functions/Aggregate_Functions.htm">max()</a></code> etc. (Please see page <a href="Stored_Procedures.htm"><i>e</i>X<i>treme</i>SQL User Defined Functions</a> for further details.)</p>
                <h3>For an overview see page <a href="../SQL_Language_Reference/Functions.htm">eX<i>treme</i>SQL Functions</a></h3>
                <p>To use user-defined aggregating functions the following steps must be performed:</p>
                <ul>
                    <li value="1">Use the SQL <code>set</code> statement to set parameter <code>implicit_aggregates</code> to enable using aggregating functions:</li>
                </ul>
                <div class="code-block"><pre>    &#160;
    set implicit_aggregates=true;
    &#160;</pre>
                </div>
                <ul>
                    <li value="1">Write the <a href="Stored_Procedures.htm">UDF</a> code in C++, Lua or Python that has exactly 2 arguments: <code>state</code> and <code>ops</code> of type <code>array(T)</code> that returns an <code>array(T)</code> where <code>T</code> is function type. (Parameter <code>state</code> is expected to be an internal state variable to accumulate temporary results and <code>ops</code> is an array of function arguments.</li>
                    <li value="2">Call the <a href="Stored_Procedures.htm">UDF</a> in the following sequence:<ul><li value="1">First call with NULL as the <code>state</code> value and <code>ops</code> is non-NULL. Here the <a href="Stored_Procedures.htm">UDF</a> is expected to create a <code>state</code> array and use <code>ops</code> as the first set of values. The <code>state</code> array is returned as function result.</li><li value="2">Next call the <a href="Stored_Procedures.htm">UDF</a> with a non-NULL <code>state</code> value and non-NULL value for <code>ops</code> to process the next set of <code>ops</code> values.</li><li value="3">When dataset has been processed, call the <a href="Stored_Procedures.htm">UDF</a> with NULL for <code>ops</code>  to cause the function to perform final calculations and return its result as an array.</li></ul></li>
                </ul>
                <p>Note that even if the <a href="Stored_Procedures.htm">UDF</a> is expected to take a scalar argument and return single scalar value, the aggregating <a href="Stored_Procedures.htm">UDF</a> must pass array arguments and return an array.</p>
                <h3>Lua Example</h3>
                <p>The <a href="Stored_Procedures.htm">UDF</a> could be created with Lua code like the following:</p>
                <div class="code-block"><pre>    &#160;
    create function my_avg(state array(int), ops array(int)) returns array(int) in 'lua' as '
        require("test_udf")
        return my_avg_impl(state, ops)
        end
        ';
    &#160;</pre>
                </div>
                <p>The function <code>my_avg_body()</code>  could be implemented as follows:</p>
                <div class="code-block"><pre>    &#160;
    function my_avg_impl(state, ops)
        if ops ~= nil then
            -- Aggregating part
            v = ops[1]
            if state == nil then
                state = {v, 1}
            else
                state[1] = state[1] + v
                state[2] = state[2] + 1
            end
            return state
        else
            -- Finalizing part
            local avg = {state[1] / state[2]}
            return avg
        end
    end
    &#160;</pre>
                </div>
                <p>Consider table <i>Employee</i> initialized with the following data:</p>
                <div class="code-block"><pre>    &#160;
    create table Employee( id integer, dept_no integer, salary integer);
    insert into Employee values(1, 1      90000);
    insert into Employee values(2, 1      100000);
    insert into Employee values(3, 1      110000);
    insert into Employee values(4, 2      100000);
    insert into Employee values(5, 2      120000);
    insert into Employee values(6, 2      130000);
    &#160;</pre>
                </div>
                <p>Then the <a href="Stored_Procedures.htm">UDF</a> would be invoked with SQL statements like the following:</p>
                <div class="code-block"><pre>&#160;
    set implicit_aggregates=true;
    select dept_no, my_avg([null]) from Employee group by dept_no;
    select dept_no, my_avg([salary]) from Employee group by dept_no;
    select dept_no, my_avg([null]) from Employee group by dept_no;
    &#160;</pre>
                </div>
                <p>and would return the following result set:</p>
                <div class="code-block"><pre>&#160;
    dept_no #2
    --------------------------------------------------------
    1       [100000]
    2       [120000]
    &#160;</pre>
                </div>
                <h3>C++ Example</h3>
                <p>For a C++ <a href="Stored_Procedures.htm">UDF</a>, the SQL function registration might look like the following:</p>
                <div class="code-block"><pre>&#160;
    create function bx_wt_avg(state array(double), ops array(double)) returns array(double)
        as 'api-sql-09-functions-aggregate',  'bx_wt_avg';
&#160;</pre>
                </div>
                <p>The corresponding C++ function prototype could be as follows:</p>
                <div class="code-block"><pre><a name="kanchor127"></a>&#160;
    McoSql::Value* bx_wt_avg(McoSql::Runtime* runtime, McoSql::Vector&lt;McoSql::Value&gt;* params);
    &#160;</pre>
                </div>
                <p>The actual function implementation can be found in the SDK sample source file "<code>samples/native/sql/api/sql-09-functions/aggregate.udf.cpp</code>".</p>
                <p>Then the <a href="Stored_Procedures.htm">UDF</a> would be invoked with SQL statements like the following:</p>
                <div class="code-block"><pre>&#160;
    create table t(x double,y double);
    insert into t values (1,10),(2,20),(3,30);
    select bx_wt_avg([x,y]) from t;
    &#160;</pre>
                </div>
                <p>and would return the following result set:</p>
                <div class="code-block"><pre>&#160;
     #1
    --------------------------------------------------------
    [2.33333333333333, 0.014, 140, 60, 3, 6.95335580371252e-310, 360]
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>