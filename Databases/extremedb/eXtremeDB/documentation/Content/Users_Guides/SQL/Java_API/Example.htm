<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeSQL Java Example</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>SQL Java Example</h1>
            <blockquote>
                <p>The following code snippet demonstrates the basic embedded <i>e</i>X<i>treme</i>SQL Java application implementation:</p>
                <div class="code-block"><pre><a name="kanchor702"></a>&#160;
    import com.mcobject.extremedb.*;
    import java.io.Console;
    &#160;
    @Persistent // class will be stored in eXtremeDB database
    class MyTable
    {
        int pk;
        String value;
    };
    &#160;
    public class Sql
    {
        static final int PAGE_SIZE = 128;
        static final int DISK_PAGE_SIZE = 4096;
        static final int DISK_CACHE_SIZE = 8*1024*1024;
        static final int DATABASE_SIZE = 16*1024*1024;
        &#160;
        public static void main(String[] args)
        {
            Database db;
            int config = Database.MCO_CFG_SQL_SUPPORT;
            boolean is_dptr = false;
            Database.Device devs[];
            Database.Parameters params = new Database.Parameters();
            &#160;
            // get config parameters from the command line
            for (String s : args) 
            {
                if ("disk".equals(s))  config |= Database.MCO_CFG_DISK_SUPPORT;
                if ("shm".equals(s))   config |= Database.MCO_CFG_SHARED_MEMORY;
                if ("debug".equals(s)) config |= Database.MCO_CFG_DEBUG_LIBRARY;
                if ("mvcc".equals(s))  config |= Database.MCO_CFG_MVCC_TRANSACTION_MANAGER;
                if ("dptr".equals(s))  is_dptr = true;
                if (s.startsWith("license:")) params.license_key = s.substring(8);
            }
            &#160;
            params.memPageSize = PAGE_SIZE; // memory page size
            params.classes = new Class[] { MyTable.class }; // list of classes which should
            // be stored in eXremeDB
            // database. The classes must use
            // the @Persistent annotation
            params.maxConnections = 10;
    &#160;
            if ((config &amp; Database.MCO_CFG_DISK_SUPPORT) != 0) 
            { // on-disk configuration
                java.io.File file = new java.io.File("opendb.dbs");
                file.delete();
                file = new java.io.File("opendb.log");
                file.delete();
                params.diskPageSize = DISK_PAGE_SIZE; // disk page size
                params.diskClassesByDefault = true; // mark @Persistent classes as on-disk
                // classes by default
                // declare memory devices
                devs = new Database.Device[4];
                &#160;
                if ((config &amp; Database.MCO_CFG_SHARED_MEMORY) != 0)
                 {
                    devs[0] = new Database.SharedMemoryDevice(Database.Device.Kind.Data,
                    "opendb-db", 0, DATABASE_SIZE);
                    devs[1] = new Database.SharedMemoryDevice(Database.Device.Kind.DiskCache,
                    "opendb-cache", 0,
                    DISK_CACHE_SIZE);
                    &#160;
                }
                 else 
                {
                    &#160;
                    devs[0] = new Database.PrivateMemoryDevice(Database.Device.Kind.Data,
                    DATABASE_SIZE);
                    devs[1] = new atabase.PrivateMemoryDevice(Database.Device.Kind.DiskCache,
                    DISK_CACHE_SIZE);
                }
    &#160;
                devs[2] = new Database.FileDevice(Database.Device.Kind.Data, "opendb.dbs");
                devs[3] = new Database.FileDevice(Database.Device.Kind.TransactionLog,
                "opendb.log");
                &#160;
            } 
            else 
            { // in-memory configuration
                    &#160;
                devs = new Database.Device[1];
                if ((config &amp; Database.MCO_CFG_SHARED_MEMORY) != 0) 
                {
                    long hint = 0;
                    if (is_dptr)
                    hint = 0x20000000;
                    devs[0] = new Database.SharedMemoryDevice(Database.Device.Kind.Data,
                    "opendb-db", hint,
                    DATABASE_SIZE);
                    &#160;
                } else 
                {
                &#160;
                    devs[0] = new Database.PrivateMemoryDevice(Database.Device.Kind.Data,
                    DATABASE_SIZE);
                }
            }
            &#160;
            // create Database object
            db = new Database(config);
            db.open("sqldb", params, devs); // open database.
            &#160;</pre>
                </div>
            </blockquote>
            <blockquote>
                <p> Once the database has been opened, a connection must be created to access it. Applications can create connections via the <i>Database</i> class, for example:</p>
            </blockquote>
            <blockquote>
                <div class="code-block"><pre>&#160;
    Database db = new Database(Database.Mode.DebugSupport,“../../target/bin.so");
    int maxAttempts = 10;
    SqlLocalConnection conLocal = db.connectSql();
    SqlRemoteConnection conRemote = db.connectRemoteSql(host, port, maxAttempts);
    &#160;</pre>
                </div>
                <p>Or connections can be instantiated by calling the <i>SqlLocalConnection</i> or <code>SqlRemoteConnection</code> constructor. Note that one limitation for remote connections is that it is currently not possible to execute more than one query simultaneously in a single connection. So, for example, something like the following will not work:</p>
                <div class="code-block"><pre>    &#160;
    SqlResultSet rs1 = conRemote.executeQuery("select * from Class1");
    SqlResultSet rs2 = conRemote.executeQuery("select * from Class2");
    Iterator&lt;Class1&gt;  i1 = rs1.iterator();
    Iterator&lt;Class2&gt;  i2 = rs2.iterator();
    while (i1.hasNext() &amp;&amp; i2.hasNext()) 
    {
        ...
    }
    &#160;</pre>
                </div>
                <p>SQL queries are then performed using the <code>executeQuery()</code> method which executes an SQL <code>select</code> and returns an <i>SqlResultSet</i> or the <code>executeStatement()</code> method which executes an SQL <code>insert</code>, <code>update</code> or <code>delete</code> statement and returns the number of rows affected. For example:</p>
                <div class="code-block"><pre>&#160;
            SqlLocalConnection con = db.connectSql();
            con.startTransaction(Database.TransactionType.ReadWrite);
            con.executeStatement("insert into MyTable (pk,value) values (?,?)", 2012,
                            "Good bye");
            con.executeStatement("insert into MyTable (pk,value) values (?,?)", 2013,
                        "Hello");
            con.commitTransaction();
            con.startTransaction(Database.TransactionType.ReadOnly);
            SqlResultSet result = con.executeQuery("select pk,value from MyTable”
                                “ where pk&gt;=?", 2013);
            for (String column : result.getColumnNames())
             {
                System.out.print(column + ", ");
            }
            System.out.println();
            for (SqlTuple tuple : result) 
            {
                System.out.println(tuple.getInt(0) + ", " + tuple.get("value"));
            }
        con.commitTransaction();
        con.disconnect();
        db.close();
    }
    &#160;</pre>
                </div>
                <p>Note that a database transaction must be explicitly started with <code>con.startTransaction()</code>and closed with <code>con.commitTransaction()</code> or <code>con.rollbackTransaction()</code>. And the connection must be closed with <code>con.disconnect()</code> and the database closed with <code>db.close()</code>. Also note that both methods <code>executeQuery()</code> and <code>executeStatement()</code> allow substitution of parameters into the  statement for placeholders marked by <code>?</code> or <code>%x,</code> where <code>x</code> specifies a parameter type which can be one of the following:</p>
                <div class="code-block"><pre>&#160;
    %b = bool
    %i = signed&lt;4&gt;
    %u = unsigned&lt;4&gt;
    %l = signed&lt;8&gt;
    %t = datetime
    %s = string
    %w = nstring
    &#160;</pre>
                </div>
                <p>In most cases it is possible to use the traditional <code>ODBC/JDBC</code> placeholder <code>?</code>. The specific parameter type specifiers are needed if you want to pass a <code>string</code> as <code>unicode</code> (<code>wide character</code>) <code>string</code> (<code>%w</code> ) rather than a <code>multibyte-character string</code> (<code>%s</code>). For example:</p>
                <div class="code-block"><pre>    &#160;
    con.executeQuery("select * from Employee where department=? and salary &gt; ?", "HR", 50000);
    &#160;</pre>
                </div>
                <p><code>executeQuery()</code> returns an <i>SqlResultSet</i> object which implements the <i>IEnumerable&lt;SqlTuple&gt;</i> interface. The <i>tuple</i> values are then extracted in a for loop as shown in the code snippet above.</p>
                <p>It is also possible to get the number and list of the result column names. An <i>SqlCursor</i> instance is returned by <code>SqlResultSet.getEnumerator()</code> which implements the <i>IEnumerator&lt;SqlTuple&gt;</i> interface and provides a one-way iteration through the selected tuples. (Note that it is not possible to reset the iterator to restart traversal.) The <i>SqlTuple</i> class represents a collection of column values. It provides methods for getting the number of columns (though it is better to get this number from <i>SqlResultSet</i> set rather than from the <i>tuple</i>) and for extracting the value of a particular column.</p>
                <p>Columns can be accessed either by index (0-based), or by name as in the example above. The type of the returned value is:</p>
                <ul>
                    <li value="1"><![CDATA[	]]><code>bool</code> for boolean types,</li>
                    <li value="2"><![CDATA[	]]><code>long</code> for integer types,</li>
                    <li value="3"><![CDATA[	]]><code>double</code> for floating point types,</li>
                    <li value="4"><![CDATA[	]]><code>decimal</code> for floating numeric types,</li>
                    <li value="5"><![CDATA[	]]><code>String</code> for character types</li>
                    <li value="6"><![CDATA[	]]><code>byte[]</code> for <code>blob</code> types, and</li>
                    <li value="7"><![CDATA[	]]><code>DateTime</code> for the datetime type.</li>
                </ul>
                <p>Accessing a tuple's value by index is recommended since using the column name requires a <code>hash</code> lookup. The column name can be used once by the <code>SqlResultSet.getColumnNo(string columnName)</code> method to get the column’s index; then use the returned index to fetch the tuple's value.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>