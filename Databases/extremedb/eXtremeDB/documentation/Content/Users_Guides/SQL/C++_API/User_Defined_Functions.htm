<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using eXtremeSQL User Defined Functions in C++</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Using <i>e</i>X<i>treme</i>SQL User Defined Functions in C++</h1>
            <blockquote>
                <p><i><i>e</i>X<i>treme</i>SQL</i><a name="kanchor379"></a> supports User Defined Functions (UDF) that can optimize the performance of database operations. UDFs are written in C++ and compiled into dynamic load libraries which can then be loaded at runtime by C++ applications.</p>
                <p>For example, the following code snippet defines then registers a UDF <code>mod()</code>:</p>
                <div class="code-block"><pre>    &#160;
    static Value* mod(Value* a, Value* b) 
    {
        if (a-&gt;isNull() || b-&gt;isNull()) 
        {
            return NULL;
        }
        return new IntValue(a-&gt;intValue() % b-&gt;intValue());
    }
    &#160;
    // Below, f1 is an instance of the SqlFunctionDeclaration class.  The
    // constructor links this declaration of a UDF named “mod” to the list
    // of all UDFs maintained internally by eXtremeSQL:
    &#160;
    static SqlFunctionDeclaration f1(
        tpInt,      // tpInt is the return value of the UDF
        "mod",      // the name of the function as we’ll use it in a query
        (void*)mod, // the function pointer
        2          // the number of arguments to the UDF
    );
    &#160;</pre>
                </div>
                <p>Once registered, the UDF can then be called from within this application in a normal SQL <code>select</code> statement.  For example, the following statement selects records where the value of the column named code is divisible by 3:</p>
                <div class="code-block"><pre>&#160;
    QueryResult result(engine.executeQuery("select * from T where mod(code,3) = 0;"));
    &#160;</pre>
                </div>
                <h2>Loadable UDFs</h2>
                <p>UDFs can also be compiled into a dynamic load library. Then these UDFs can be loaded by the SQL engine from any embedded <i>e</i>X<i>treme</i>SQL application. To illustrate, consider the following code snippet extracted from SDK sample source file <code>samples/xsql/data_loaders/CME/modcme/modcme.cpp</code>, which creates UDF <code>load_cme_trades</code>:</p>
                <div class="code-block"><pre>&#160;
    extern "C" {
        CME_EXPORTS McoSql::Value *load_cme_trades(McoSql::Runtime *runtime, McoSql::Vector&lt;McoSql::Value&gt; *args)
        {
            return load_security_rec&lt;securityTrades, int, Trade&gt; (runtime-&gt;engine, runtime-&gt;trans, args, 11);
        }
    }
    &#160;</pre>
                </div>
                <p>This UDF calls function <code>load_security_rec()</code> that is performs a relatively complex set of database operations:</p>
                <div class="code-block"><pre>&#160;
    template &lt;class secAcc, class sKey, class secRec&gt;
    McoSql::Value *load_security_rec(McoSql::SqlEngine *engine, 
        McoSql::Transaction *currTrans,  McoSql::Vector&lt;McoSql::Value&gt; *args, int ncolumns)
    {
        McoSql::Value *input = args-&gt;at(0);
        McoSql::Value *book = args-&gt;at(1);
        std::map&lt;sKey, secAcc *&gt; securities;
&#160;
        if (input-&gt;type() != McoSql::tpString) 
        {
            throw McoSql::InvalidArgument("input - string sxpected");
        }
&#160;
        char *fname = input-&gt;stringValue(currTrans-&gt;allocator)-&gt;cstr();
        &#160;
        if (book-&gt;type() != McoSql::tpString) 
        {
            throw McoSql::InvalidArgument("book - string sxpected");
        }
        char *Book = book-&gt;stringValue(currTrans-&gt;allocator)-&gt;cstr();
&#160;
        CsvReader r(currTrans-&gt;allocator, fname, ',', 2, ncolumns);
        secRec s;
&#160;
        while (r.next(&amp;s)) 
        {
            secAcc *st = NULL;
            sKey key = s.key();
            typename std::map&lt;sKey, secAcc*&gt;::iterator f = securities.find(key);
            if (f == securities.end()) 
            {
                st = new secAcc(engine, currTrans, Book, key, BATCH_SIZE);
                st-&gt;findRecord();
                securities[key] = st;
            } 
            else 
            {
                st = f-&gt;second;
            }
            &#160;
            st-&gt;apply(&amp;s);
        }
        &#160;
        typename std::map&lt;sKey, secAcc *&gt;::iterator it;
        for (it = securities.begin(); it != securities.end(); it++) 
        {
            it-&gt;second-&gt;store();
            delete it-&gt;second;
        }
&#160;
        return McoSql::IntValue::create(currTrans-&gt;allocator, securities.size());
    }
    &#160;</pre>
                </div>
                <p>In order to build this file into a dynamic load library, a number of linker parameters must be specified like the following:</p>
                <div class="code-block"><pre>    &#160;
    $(QUIET_PREFIX)$(LDCXX) $(SOLDFLAGS) $(LDOUTPUTF) $(MCO_BIN_SO)/libmcocme$(MCO_BUILDRT_SFX)$(MCO_CFG_SUFFIX_SO) $(OBJ_L) $(QUIET_SUFFIX)
    &#160;</pre>
                </div>
                <p>Note that this makefile snippet uses several macros from file <code>include/header.mak</code> in the <i>e</i>X<i>treme</i>DB SDK build system. (For further details please see the full makefile  <code>samples/xsql/data_loaders/CME/modcme/makefile</code>.)</p>
                <h2>Loading and Executing UDFs</h2>
                <p>To load UDFs  from external dynamic load libraries, an embedded <i>e</i>X<i>treme</i>SQL application calls the SQL DDL command <code><a href="../../../Programming/SQL/DDL_Statements/Create_Function.htm"><code>create function</code></a></code> specifying the file and UDF name. For example:</p>
                <div class="code-block"><pre>&#160;
    create function load_trades(fname string, book string) returns integer as 'mcocme', 'load_cme_trades';
    &#160;</pre>
                </div>
                <p>The create function command can be included in the <code>sql_statements</code> section of the <a href="../../xSQL/Startup_Options/Config_File_Sections/ExtremeSQL_Params.htm"><span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> configuration file</a> to cause <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to create the UDF and load its implementation from the dynamic load library. Or UDFs can be loaded when the SQL engine is opened in a C++ application by setting the <i><a href="../../../Programming/C++/Classes/SqlOptimizerParameters.htm">SqlOptimizerParamter</a></i> class parameter <code>preloadUDF</code> to true to enable the <i><a href="../SQL_Features/Functions_Preload.htm">preload functions</a></i> feature. Then the optimizer parameters are added to the <i><a href="../../../Programming/C++/Classes/McoSqlOpenParameters.htm">McoSqlOpenParameters</a></i> passed the <i><a href="../../../Programming/C++/Classes/McoSqlEngine.htm"><i>McoSqlEngine</i></a></i> method <code><a href="../../../Programming/C++/Classes/McoSqlEngine/open1.htm">open()</a></code>. For example:</p>
                <div class="code-block"><pre>&#160;
    McoSqlEngine engine;
    McoSqlOpenParameters params;
    SqlOptimizerParameters oParams;
    oParams.preloadUDF = true;
    ...
    params.optimizerParams = oParams;
    engine.open(params);
    ...
    &#160;</pre>
                </div>
                <p>Once loaded by the SQL engine, any <i>e</i>X<i>treme</i>SQL application can invoke the UDF through an SQL <code>select</code> statement. For example, the following Python snippet executes the <code>load_trades</code> UDF defined above:</p>
                <div class="code-block"><pre>&#160;
    is_shm = False
    is_debug = True
    is_disk = True
    tmgr='mursiw'
    &#160;
    exdb.init_runtime(is_disk, tmgr, is_shm, is_debug)
    conn = exdb.connect("localhost:5001")
    &#160;
    cursor = conn.cursor()
    &#160;
    sql =  '''SELECT load_trades('%s', '%s')''' % (fname, book)
    cursor.execute(sql)
    cursor.fetchall()
    ...
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>