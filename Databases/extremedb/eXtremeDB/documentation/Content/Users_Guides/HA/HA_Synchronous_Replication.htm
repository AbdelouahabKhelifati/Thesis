<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>HA Synchronous Replication</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Synchronous Replication</h1>
            <blockquote>
                <p>Synchronous replication using the time-cognizant, two-phase commit protocol is the default mode. So it is sufficient for C/C++  master applications to call:</p>
                <div class="code-block"><pre>    &#160;
    mco_HA_master_params_t MasterParams;
    mco_HA_master_params_init( &amp;MasterParams );
    mco_HA_set_master_params( db, &amp;MasterParams );
    &#160;</pre>
                </div>
                <p>In C# and Java applications:</p>
                <div class="code-block"><pre>&#160;
    MasterConnection.Parameters MParams = new MasterConnection.Parameters();
    con.SetReplicationMode( MParams );
    &#160;</pre>
                </div>
                <p>The <i>e</i>X<i>treme</i>DB<i> High Availability</i><a name="kanchor132"></a> runtime does the initial synchronization in C/C++ master applications during the <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code> call and all other replication happens during the call to <code><a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit.htm">mco_trans_commit()</a></code>; in C# and Java applications during the <code>MasterConnection.AttachReplica()</code> and <code>MasterConnection.CommitTransaction()</code> method.</p>
                <p>On the replica side the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime manages initial replication for C/C++ applications within <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code>. When <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code> is called, control is passed to the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime which manages the initial synchronization of the replica database and then waits for and processes transaction data sent from the master during the master call to <code><a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit.htm">mco_trans_commit()</a></code>. In C# and Java replica applications initial synchronization and subsequent transaction replication is managed by the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime during the <code>ReplicaConnection.AttachMaster()</code> method.</p>
                <p>
                    <img src="../../Resources/Images/HA_11.PNG" />
                </p>
                <h2>Implementation</h2>
                <p>Most C/C++ applications using <i>e</i>X<i>treme</i>DB<i> High Availability</i> will employ just the following functions from the protocol layer API:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_HA_start();
    void mco_HA_master_params_init();
    MCO_RET mco_HA_set_master_params();
    MCO_RET mco_HA_attach_replica();
    void mco_HA_replica_params_init();
    MCO_RET mco_HA_attach_master();
    MCO_RET mco_HA_stop();
    &#160;</pre>
                </div>
                <p>Equivalently, most C# and Java applications using <i>e</i>X<i>treme</i>DB<i> High Availability</i> will employ just the following API methods:</p>
                <div class="code-block"><pre>    &#160;
    Database db = new Database();
    db.Open();
    MasterConnection con = new MasterConnection(db);
    con.SetReplicationMode();
    con.AttachReplica();
    con.StopReplication();
    ReplicaConnection con = new ReplicaConnection(db);
    con.AttachMaster();
    con.Disconnect();
    db.Close();
    &#160;</pre>
                </div>
                <p>Using the HA “interface” API on the master side:</p>
                <p>To initiate replication on the master side the application must:</p>
                <ul>
                    <li value="1">	Initialize the HA runtime in C/C++ applications by calling <code><a href="../../Programming/C/HA_Functions/start.htm">mco_HA_start()</a></code>; in C# and Java applications by instantiating a Database object with High Availability Support enabled, eg:</li>
                    <li value="2"><code>Database db = new Database( new ExtremedbWrapper(),Database.Mode.HighAvailabilitySupport);</code>
                    </li>
                    <li value="3">	In C/C++ applications, call <code><a href="../../Programming/C/HA_Functions/master_params_init.htm">mco_HA_master_params_init()</a></code> to initialize the <code>mco_HA_master_params_t</code> structure (<code>include/ha/mcoha.h</code>); in C# and Java applications instantiate a <code>MasterConnection.Parameters</code> object.</li>
                    <li value="4">	Define the master mode and master flags in C/C++ applications by filling in the <code>mco_HA_master_params_t</code> structure. (Note that the <code>MCO_MASTER_MODE</code> flag value must be set.); in C# and Java applications by setting the properties of the <code>MasterConnection.Parameters</code> object.</li>
                    <li value="5">	Set up master replication mode flags in C/C++ applications by calling <code><a href="../../Programming/C/HA_Functions/set_master_params.htm">mco_HA_set_master_params()</a></code>; in C# and Java applications by calling the <code>MasterConnection.SetReplicationMode()</code> method.</li>
                    <li value="6">	Create a <code>listener</code> task.</li>
                    <li value="7">	In the listener thread, for C/C++ applications call <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code>; in C# and Java applications by call the  <code>MasterConnection.AttachReplica()</code> method.</li>
                    <li value="8">	To initiate asynchronous replication a couple of more steps are required (discussed later).</li>
                </ul>
                <p>The following code fragment illustrates a simple C/C++ master implementation.</p>
                <div class="code-block"><pre>&#160;
    void* ListenToReplicas ( void *p )
    {
        while ((! stop_flag ) {
            ret = mco_HA_attach_replica(...);
            &#160;
            if ( MCO_S_OK != ret )
            // something went wrong, examine the return code
            ...
            else
            // replica is connected successfully
        }
    &#160;
    }
    &#160;
    int main(int argc, char* argv[])
    {
        mco_HA_master_params_t MasterParams;
        …
        /* initialize HA subsystem */
        mco_HA_start();
        /* create the database */
        rc = mco_db_open_dev( dbName, dbname_get_dictionary(),°
        dev, n_dev, &amp;db_params);
        …
        &#160;
        /* connect to the database, obtain a database handle */
        rc = mco_db_connect( dbName, &amp;db );
        …
        /* set MASTER mode */
        mco_HA_master_params_init( &amp;MasterParams );
        mco_HA_set_master_params( db, &amp;MasterParams );
        /* create a ‘listener’ thread */
        rc = pthread_create (&amp;ConnThread, NULL,
        (void*)ListenToReplicas, &amp;ha);
        &#160;
        /* Continue with the regular database processing */
        while (master_has_some_work_to_do) {
        rc = mco_trans_start( db, MCO_READ_WRITE,
        MCO_TRANS_FOREGROUND, &amp;t );
        ...
        rc = mco_trans_commit(t);
    }
    &#160;
    /* Detach and close connections to replicas */
    mco_HA_stop(db);
    }
    &#160;</pre>
                </div>
                <p>Note that <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code> is called in the context of a separate “listener” task.  Upon receiving a connection request, this function performs the following actions to “activate” the replica:</p>
                <ul>
                    <li value="1">	Wait for the replica connection</li>
                    <li value="2">	Accept the connection, create a channel</li>
                    <li value="3">	Transmit initial synchronization data to the replica</li>
                    <li value="4">	Register the replica with the HA runtime</li>
                </ul>
                <p>The <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code> function is described in detail in the API Reference section, but briefly its prototype is:</p>
                <div class="code-block"><pre>&#160;
    mco_HA_attach_replica( mco_db_h db, char* masterport,
                timer_unit timeout);
                &#160;</pre>
                </div>
                <p>The timeout argument represents the “accept connection” timeout.</p>
                <p>
                    <img src="../../Resources/Images/note.png" />Note that	If the master database is a shared-memory database and several processes access it, only one process (called the <code>primary</code> master) handles connections to replicas.  So only the primary master process can call network-related functions such as <code><a href="../../Programming/C/HA_Functions/keep_alive.htm">mco_HA_keep_alive()</a></code>, <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code>,etc.</p>
                <p>&#160;</p>
                <p>A similar simple C# master implementation would look like the following:</p>
                <div class="code-block"><pre>    &#160;
    public void Listen() {
    MasterConnection con = new MasterConnection(db);
        &#160;
        while (listening) {
        if (con.AttachReplica(PORT, ATTACH_TIMEOUT)) {
            // Replica connected…
            }
        }
    con.Disconnect();
    }
    &#160;
    Master()
    {
        Database.Parameters parameters = new Database.Parameters();
        db = new Database(new ExtremedbWrapper(),
        Database.Mode.HighAvailabilitySupport);
        db.Open( dbName, parameters, DATABASE_SIZE);
        MasterConnection con = new MasterConnection(db);
        &#160;
        // set HA mode
        MasterConnection.Parameters MParams = newMasterConnection.Parameters(
        MasterConnection.MCO_HAMODE_HOTSYNCH );
        con.SetReplicationMode( MParams );
        MParams.listening = true;
        &#160;
        // start listen thread
        Thread listenThread = new Thread(new ThreadStart(Listen));
        listenThread.Start();
    &#160;
        // continue with the regular database processing
        while (master_has_some_work_to_do) {
        con.StartTransaction(Database.Transaction.ReadWrite);
        ...
        con.CommitTransaction();
    }
    &#160;
    // stop thread
    listening = false;
    listenThread.Join();
    &#160;
    con.Disconnect();
    db.Close();
    }
    &#160;</pre>
                </div>
                <p><i style="font-weight: bold;">Using the HA “interface” API on the replica side:</i>
                </p>
                <p>To initiate replication on the replica-side the application must:</p>
                <ul>
                    <li value="1">	Initialize the HA runtime in C/C++ applications by calling <code><a href="../../Programming/C/HA_Functions/start.htm">mco_HA_start()</a></code>; in C# and Java applications by instantiating a <i>Database</i> object with High Availability Support enabled, eg:</li>
                    <li value="2"><code>Database db = new Database( new ExtremedbWrapper(),Database.Mode.HighAvailabilitySupport);</code>
                    </li>
                    <li value="3">	Create and connect to the database.</li>
                    <li value="4">	Initialize the replica mode flags in C/C++ applications by calling <code><a href="../../Programming/C/HA_Functions/replica_params_init.htm">mco_HA_replica_params_init()</a></code>; in C# and Java applications by setting the properties of the <code>ReplicaConnection.Parameters</code> object.</li>
                    <li value="5">	Begin replication in C/C++ applications by calling <code>mco_HA_attach_master()</code>; in C# and Java applications by method <code>ReplicaConnection.AttachMaster()</code>.</li>
                </ul>
                <p>The following code fragment illustrates a simple C/C++ replica implementation.</p>
                <div class="code-block"><pre>&#160;
    int main(int argc, char* argv[])
    {
        int stopReason = 0;
        mco_HA_replica_params_t ReplicaParams;
        ...
    &#160;
        /* initialize HA subsystem */
        mco_HA_start();
        &#160;
        /* create the database */
        rc = mco_db_open_dev( dbName, dbname_get_dictionary(),°
                    dev, n_dev, &amp;db_params);
        …
        /* connect to the database, obtain a database handle */
        rc = mco_db_connect( dbName, &amp;db );
        …
        /* set replica params */
        mco_HA_replica_params_init( &amp;ReplicaParams );
        rc = mco_HA_attach_master( &amp;db, mastername,
                        &amp;ReplicaParams,
                        &amp;stopReason,
                        TM_CONNECTION_TIMEOUT);
        return stopReason;
    }
    &#160;</pre>
                </div>
                <p>Note that <code>mco_HA_attach_master()</code> is a blocking call.  Essentially all control is turned over at this point to the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime which manages the initial synchronization and then commits transactions sent from the master.  The function is described in detail in the API Reference section, but briefly its prototype is:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_HA_attach_master( mco_db_h db,
    const char* conn_string,
    const mco_HA_replica_params_t* params,
    MCO_E_HA_REPLICA_STOP_REASON* stop_reason,
    timer_unit timeout);
    &#160;</pre>
                </div>
                <p>The <code>stop_reason</code> indicates why the runtime has returned control to the application (<code>include/ha/mcoha.h</code>).  When control is returned to the replica application, it should examine the <code>stop_reason</code> and make a decision on the course of further action. It could, for example, become the master application itself, or simply terminate.  The timeout represents the <code>connection</code> timeout (the period of time the replica waits while attempting to make a connection to the master).  The <code>params</code> structure contains a set of replica control flags (<code>include/ha/mcoha.h</code>). For example <code>MCO_HAMODE_REPLICA_NOTIFICATION</code>, etc.</p>
                <p>A similar simple C# replica implementation would look like the following:</p>
                <div class="code-block"><pre>&#160;
    public Slave()
    {
        Database.Parameters parameters = new Database.Parameters();
        parameters.MemPageSize = PAGE_SIZE;
        db = new Database(new ExtremedbWrapper(),
        Database.Mode.HighAvailabilitySupport);
        db.Open( dbName, parameters, DATABASE_SIZE );
        &#160;
        // start working thread
        running = true;
        Thread inspectThread = new Thread(new ThreadStart(Run));
        inspectThread.Start();
&#160;
        ReplicaConnection con = new ReplicaConnection(db);
        ReplicaConnection.Parameters RParams = new ReplicaConnection.Parameters();
        &#160;
        if (!con.AttachMaster("localhost:" + PORT, replParams, CONNECT_TIMEOUT)) {
            Console.WriteLine("Failed to connect to master");
        }
&#160;
        //stop working thread
        running = false;
        inspectThread.Join();
        &#160;
        Console.WriteLine("Replica is terminated");
        con.Disconnect();
        db.Close();
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>