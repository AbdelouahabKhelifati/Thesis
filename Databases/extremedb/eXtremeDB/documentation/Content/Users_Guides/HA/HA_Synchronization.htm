<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>HA Synchronization Modes</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Synchronization Modes</h1>
            <blockquote>
                <p>For <i>e</i>X<i>treme</i>DB<i> High Availability</i> applications there are two orthogonal operations to be aware of: <b>initial synchronization</b> and <b>transaction replication</b>. The initial synchronization is performed once after the replica has attached and can be <i>static</i> (the default) or <i>hot-sync</i>. These initial synchronization modes are described in detail below. It is important to note that <i>static</i> initialization blocks the application's write transactions on the master, while <i>hot-sync</i> allows <code>READ_WRITE</code> transactions during initialization.</p>
                <p>The transaction replication can be <b><a href="HA_Synchronous_Replication.htm">synchronous</a></b> or <b><a href="HA_Applications.htm"><b>asynchronous</b></a></b>. In synchronous replication mode the master waits for acknowledgment (<i>ack</i><a name="kanchor114"></a>) from the replicas for each transaction and thus a transaction commit on the master returns only after the changes were applied to the replica's database. In asynchronous replication mode the master puts serialized transactions to the asynchronous buffer and sends them later. (The asynchronous buffer is processed in a thread  different from the one that created the database connection. So here “later” means that the transaction is sent to the network “after” the commit call has returned control to the database thread. The exact time at which the transaction is sent to the network is not known and is outside the control of the database runtime.)</p>
                <h2>Static Synchronization</h2>
                <p>Static Synchronization (illustrated below) is the default means of initializing a newly attached replica. In this mode, the master database begins a read-only transaction, which causes any read-write transactions to be queued until the initial synchronization is completed.  (When using the <a href="../Core/MURSIW_Transaction_Manager.htm" name="kanchor115">MURSIW</a><a name="kanchor116"></a> Transaction Manager, other read-only transactions can execute in parallel with the initial synchronization, but only if they are started before all read-write transactions, or started with a higher priority - a read-only transaction started at the same priority and after a read-write transaction will enter the queue after the read-write transaction and will wait for the read-write transaction’s completion.  For a more detailed explanation of Transaction Manager behavior see the <i>e</i>X<i>treme</i>DB User Guide.)  This is the fastest synchronization mode and the default means of initializing a newly attached replica. Note that the database runtime initializes and performs the synchronization on its own – no action from the application is necessary.</p>
                <p>Static synchronization is the default mode, so in C/C++ applications it is sufficient to call function <code><a href="../../Programming/C/HA_Functions/master_params_init.htm">mco_HA_master_params_init()</a></code> to initialize the synchronization mode. In C# and Java applications the default constructor for <code>MasterConnection.Parameters</code> sets the default static synchronization mode.</p>
                <p>
                    <img src="../../Resources/Images/HA_8.PNG" />
                </p>
                <h2><b style="font-style: italic;">“Hot” Synchronization</b>
                </h2>
                <p>If a database is very large, the communication channel is slow, or the target system at the master or replica are slow, static synchronization can make the master database unavailable for read-write transactions for too long.  These conditions are the case for hot synchronization (illustrated below).  In this mode, the master database may still be updated during the initial synchronization.  Initial synchronization will take longer because data that is modified after initial synchronization started but before it completed will have to be retransmitted, and because the master database system is simply busier.  Similarly, database response times will be somewhat degraded because the database run-time is also busy with the initial synchronization.  Also asynchronous replication mode is temporarily turned off while the initial synchronization completes.</p>
                <p>Hot synchronization is enabled in C/C++ master applications by setting the <code>mode_flags</code> element to <code>MCO_HAMODE_HOTSYNCH</code> in the master:</p>
                <div class="code-block"><pre>    &#160;
    mco_HA_master_params_t MasterParams;
    mco_HA_master_params_init( &amp;MasterParams );
    MasterParams.mode_flags = MCO_MASTER_MODE | MCO_HAMODE_HOTSYNCH;
    …
    mco_HA_set_master_params( db, &amp;MasterParams );
    &#160;</pre>
                </div>
                <p>In C# and Java master applications the  <code>MasterConnection.Parameters</code> constructor is invoked with the <code>MasterConnection.MCO_HAMODE_HOTSYNC</code> flag:</p>
                <div class="code-block"><pre>    &#160;
    MasterConnection.Parameters MParams = new MasterConnection.Parameters(
    MasterConnection.MCO_HAMODE_HOTSYNCH );
    con.SetReplicationMode( MParams );
    &#160;</pre>
                </div>
                <p>
                    <img src="../../Resources/Images/HA_9.PNG" />
                </p>
                <h3>Combining Asynchronous Replication and Hot Synchronization</h3>
                <p>If the application uses both <i>hot-sync</i> initial synchronization and asynchronous replication, then the transaction replication will be asynchronous <i>except during time intervals when a newly attached replica is initialized</i>. In other words, during the initial synchronization of a newly attached replica the replication is temporarily switched to synchronous mode.</p>
                <p>To combine asynchronous replication with <i>hot-sync</i> initial synchronization in C/C++ master applications, set both flags as follows:</p>
                <div class="code-block"><pre>    &#160;
    MasterParams.mode_flags = MCO_MASTER_MODE | MCO_HAMODE_HOTSYNCH | MCO_HAMODE_ASYNCH;
    &#160;</pre>
                </div>
                <p>In C# and Java master applications:</p>
                <div class="code-block"><pre>&#160;
    MasterConnection.Parameters MParams = new MasterConnection.Parameters(
        MasterConnection.MCO_HAMODE_HOTSYNCH |
        MasterConnection.MCO_HAMODE_ASYNCH );
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2><b style="font-style: italic;">Binary Schema Evolution</b>
                </h2>
                <p>In order to maintain availability of the system during upgrades of the application, <i>e</i>X<i>treme</i>DB<i> High Availability</i> supports binary schema evolution. In this mode, the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime automatically converts objects from the master schema to the replica's schema.  When the replica receives a copy of the master’s database, the initial synchronization step can accommodate the presence of new classes, new fields, new indexes, dropped classes, dropped fields, dropped indexes, changes to indexes, and changes to fields as long as the change does not cause loss of precision.</p>
                <p>Synchronization with binary schema evolution is enabled in C/C++ master applications by setting the <code>mode_flags</code> element to <code>MCO_HAMODE_BINEVOLUTION</code> in the master:</p>
                <div class="code-block"><pre>    &#160;
    mco_HA_master_params_t MasterParams;
    mco_HA_master_params_init( &amp;MasterParams );
    MasterParams.mode_flags = MCO_MASTER_MODE | MCO_HAMODE_BINEVOLUTION;
    …
    mco_HA_set_master_params( db, &amp;MasterParams );
    &#160;</pre>
                </div>
                <p>In C# and Java master applications the  <i>MasterConnection.Parameters</i> constructor is invoked with the <code>MasterConnection.MCO_HAMODE_BINEVOLUTION</code> flag:</p>
                <div class="code-block"><pre>    &#160;
    MasterConnection.Parameters MParams = new MasterConnection.Parameters(
    MasterConnection.MCO_HAMODE_BINEVOLUTION );
    con.SetReplicationMode( MParams );
    &#160;</pre>
                </div>
                <p>In general, the process of porting an online database to a new schema is as follows:</p>
                <ul>
                    <li value="1">	Build the new version of the replica application, with the updated schema</li>
                    <li value="2">	Install the new replica application</li>
                    <li value="3"> Start the new replica</li>
                    <li value="4">	In the C/C++ replica, upon return from <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code>, call <code><a href="../../Programming/C/HA_Functions/set_master_params.htm">mco_HA_set_master_params()</a></code>, in C#  and Java replicas when returning from method <code>ReplicaConnection.AttachMaster()</code> instantiate a <code>MasterConnection()</code>, to  become the new master.</li>
                    <li value="5">	Stop the old master</li>
                    <li value="6">	If any other replicas exist, they reconnect to the new master</li>
                    <li value="7">	One by one, update the old master application and any other replicas.</li>
                    <li value="8">	If desired, when the updated old master application is restarted, it can become master once again</li>
                    <li value="9">	In this manner, there is always a master application executing and maintaining system availability.</li>
                </ul>
                <p>The replication process with <code>BSE</code> is illustrated in the following diagram:</p>
                <p>
                    <img src="../../Resources/Images/HA_10.PNG" />
                </p>
                <h3>Example</h3>
                <p>The C SDK sample <a href="../../Programming/C/SDK_Samples/HA/Binev.htm">Binenv</a> demonstrates how the <code>MCO_HAMODE_BINEVOLUTION</code> mode flag turns binary schema evolution ON to automatically convert objects from the master schema to the replica's schema. The Java SDK sample <a href="../../Programming/Java/SDK_Samples/HA/habinev.htm">habinenv</a> demonstrates the same using the connection parameters <code>MasterConnection.MCO_HAMODE_BINEVOLUTION.</code></p>
                <h2>Stateful Replication</h2>
                <p>Normally, when a replica attaches to a master, it receives a copy of the master’s entire database through the initial synchronization step (either static or hot).  This can take a relatively long time.  With “stateful” replication enabled, the master runtime retains a number of transactions (specified by the application and depending on available system memory) in a circular buffer in addition to transmitting them to replicas.  When synchronization is required, the master transmits only the buffer, not the entire database.</p>
                <p>For example, a brief interruption in the communication channel may cause a few transactions to be missed by a replica between the time that it was disconnected by the network and when it is able to reconnect.  When the replica reconnects, if the missed transactions are in the master’s buffer, the initial synchronization step can be bypassed in favor of re-transmitting (replicating) just the missed transactions. This is termed <code>stateful</code> replication because the master is informed of the state of the replica’s database when the replica requests to attach to the master.</p>
                <p>Synchronization with stateful replication is enabled in C/C++ master applications by setting the <code>mode_flags</code> element to <code>MCO_HAMODE_STATEFUL_REPLICATION</code> in the master:</p>
                <div class="code-block"><pre>    &#160;
    mco_HA_master_params_t MasterParams;
    mco_HA_master_params_init( &amp;MasterParams );
    MasterParams.mode_flags = MCO_MASTER_MODE | MCO_HAMODE_STATEFUL_REPLICATION;
    MasterParams.trans_log_length = 25;
    …
    mco_HA_set_master_params( db, &amp;MasterParams );
    &#160;</pre>
                </div>
                <p>Note that the size of the circular transaction buffer is determined by specifying the value of  <code>MasterParams.trans_log_length = value</code>.</p>
                <p>In C# and Java master applications the  <code>MasterConnection.Parameters</code> constructor is invoked with the <code>MasterConnection.MCO_HAMODE_STATEFUL_REPLICATION</code> flag:</p>
                <div class="code-block"><pre>    &#160;
    MasterConnection.Parameters MParams = new MasterConnection.Parameters(
                                MasterConnection.MCO_HAMODE_STATEFUL_REPLICATION );
    con.SetReplicationMode( MParams );
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>