<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB HA Applications</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>DB HA Applications</h1>
            <blockquote>
                <h2>Two-layered architecture</h2>
                <p><i>e</i>X<i>treme</i>DB<i> High Availability</i> uses a two-layered architecture that facilitates the development of HA-enabled <i>e</i>X<i>treme</i>DB-based applications.  The higher layer is called the <i>protocol</i> layer.  This layer is responsible for the high availability logic of the application.  The lower layer is called the <i>transport</i> or <i>network</i> layer which implements the actual transmission of data between the master and replica nodes.</p>
                <p>Applications use the higher layer <i>protocol</i> API to implement high availability. The <i>protocol</i> layer uses the <i>transport</i> layer API to send and receive data between network nodes so that application developers normally do not need to interact with the lower level API.  Only if implementing a custom transport layer will the developer be concerned with these lower layer functions.</p>
                <h2>Application structure</h2>
                <p>Several host language APIs are provided to incorporate <i>e</i>X<i>treme</i>DB<i> High Availability</i> functionality. The C/C++, Java and C# APIs are described below. It is also possible to use <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to act as an HA <i>master</i> or <i>replica</i> application. (For more information and instructions on using the <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> please refer to the <a href="../xSQL_Users_Guide.htm"><span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> User's Guide</a>.)</p>
                <p>To incorporate <i>e</i>X<i>treme</i>DB<i> High Availability</i>:</p>
                <h3>C / C++</h3>
                <p>To incorporate <i>e</i>X<i>treme</i>DB<i> High Availability</i>, C/C++ applications need to do the following:</p>
                <blockquote>
                    <p>1.	Include <code>mcoha.h</code> into the application sources</p>
                    <p>2.	Declare an <code>auto_oid</code> in the database schema</p>
                    <p>3.	Link with two libraries that implement the <code>protocol layer</code> (HA) and the <code>transport layer</code> (NW)</p>
                    <p>4.	Link with the serialization library <code>libmcoseri.a</code> or <code>libmcoseri_debug.a</code>.</p>
                    <p>
                        <img src="../../Resources/Images/HA_6.PNG" />
                    </p>
                </blockquote>
                <p>The protocol layer is implemented in the <code>mcoha</code> library (<code>libmcoha.a</code> for Unix, <code>mcoha.lib</code> for Windows), and the platform-independent <i>transport</i> layer is implemented in a library with the name <code>mconwXXX</code> (<code>libmconwXXX.a</code> for Unix, <code>mconwXXX.lib</code> for Windows) where the “XXX” indicates the type of network protocol used. And more than one transport layer library may be linked with a single <i>e</i>X<i>treme</i>DB<i> High Availability</i> application.</p>
                <p>The following network transport layer protocols are provided with <i>e</i>X<i>treme</i>DB<i> High Availability</i>:</p>
                <blockquote>
                    <p><code>TCP</code>: <code>libmconwtcp.a</code> for Unix, <code>mconwtcp.lib</code> for Windows</p>
                    <p><code>UDP</code>: <code>libmconwudp.a</code> for Unix, <code>mconwudp.lib</code> for Windows</p>
                    <p>Named Pipes: <code>libmconwpipes.a</code> for Unix, <code>mconwpipes.lib</code> for Windows</p>
                    <p>QNX Messaging: <code>libmconwqnxm.a</code> (only for QNX OS).</p>
                </blockquote>
                <p>To initialize <i>e</i>X<i>treme</i>DB<i> High Availability</i>, all C and C++&#160;applications must call <code>mco_HA_start()</code><a name="kanchor97"></a> to start the HA&#160;runtime and  <code>mco_HA_channel_implementation_add()</code> to register one or more NW channels. For example</p>
                <div class="code-block"><pre>&#160;
    ...
    mco_runtime_start();
    mco_HA_start();
    mco_HA_channel_implementation_add(mco_nw_tcpip_vt());
    ...
    &#160;</pre>
                </div>
                <h3>C#</h3>
                <p>To incorporate <i>e</i>X<i>treme</i>DB<i> High Availability</i>, C# applications need to:</p>
                <blockquote>
                    <p>1.	Include the <i>e</i>X<i>treme</i>DB namespace (<code>using ExtremeDB;</code>)  in application sources</p>
                    <p>2.	Set the <code>HighAvailabilitySupport</code> flag in the constructor of <i>Database</i> object to cause the HA&#160;support library to be dynamically loaded</p>
                </blockquote>
                <h3>Java</h3>
                <p>To incorporate <i>e</i>X<i>treme</i>DB<i> High Availability</i>, Java applications need to:</p>
                <blockquote>
                    <p>1.	Include the <i>e</i>X<i>treme</i>DB namespace (<code>import com.mcobject.extremedb.*;</code>) in application sources</p>
                    <p>2. Set the <code>HighAvailabilitySupport</code> flag in the constructor of <i>Database</i> object to cause the HA&#160;support library to be dynamically loaded</p>
                    <p>&#160;</p>
                </blockquote>
                <h2>Replication Data flow</h2>
                <p>The following diagram illustrates the basic <i>e</i>X<i>treme</i>DB<i> High Availability</i> application data flow:</p>
                <p>
                    <img src="../../Resources/Images/HA_7.PNG" />
                </p>
                <p><i>e</i>X<i>treme</i>DB<i> High Availability</i> applications may use <code>synchronous</code> or <code>asynchronous</code> replication and will normally implement <code>hot switch</code> logic where the <i>master</i> and <i>replica</i> will be copies of the same application, aware that they are operating as <i>master</i> or <i>replica</i>, with the <i>replica</i> able to switch roles if necessary.  All of the replication functionality is managed internally by the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime, though additional custom processing can be implemented in <i>replicas</i> by responding to specific replication events.</p>
                <p>The <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime does the initial synchronization in the <i>master</i> application during the C/C++ function <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code>, in C# or Java applications the <code>MasterConnection.AttachReplica()</code> method, and in <i>replicas</i> during the C/C++ function <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code>, in C# or Java applications the <code>ReplicaConnection.AttachMaster()</code> method. After the initial synchronization, replication is managed synchronously or asynchronously by the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime when the <i>master</i> calls the C function <code><a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit.htm">mco_trans_commit()</a></code>, in C# or Java applications the <code>MasterConnection.CommitTransaction()</code> method.</p>
                <p>The management of the communications channel operations inside, asynchronous buffer processing and other important internal functions within the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime are controlled by timeout values set in C application in the <code><a href="../../Programming/C/Structures/HA_Parameters.htm">mco_HA_master_param_t</a></code> structure values passed to function <code> <a href="../../Programming/C/HA_Functions/set_master_params.htm">mco_HA_set_master_params()</a></code> and the <a href="../../Programming/C/Structures/HA_Parameters.htm"><code>mco_HA_replica_param_t</code></a> structure values passed to function  <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code>.  In C# and Java applications these timeouts values are properties of the <i>MasterConnection.Parameters</i> and <i>ReplicaConnection.Parameters</i> classes and are set in the master by calling the <code>MasterConnection.SetReplicationMode()</code> method; in replicas by the <code>ReplicaConnection.AtachMaster()</code> method.</p>
                <h2>DDL requirements</h2>
                <p>The schema for a C/C++  application using a database that might be replicated in HA mode must include the <code>auto_oid</code> declaration.</p>
                <div class="code-block"><pre>    &#160;
    declare auto_oid [100000];
    &#160;</pre>
                </div>
                <p>In C# and Java applications the <code>auto_oid</code> implementation is automatic when a database instance is created by invoking the <i>Database</i> class constructor with High Availability support. In C# this is done as follows:</p>
                <div class="code-block"><pre>    &#160;
    Database db = new Database( …, Database.Mode.HighAvailabilitySupport);
    &#160;</pre>
                </div>
                <p>In Java the <code>MCO_CFG_HA_SUPPORT</code> flag is specified as follows:</p>
                <div class="code-block"><pre>    &#160;
    Database db = new Database( Database.MCO_CFG_HA_SUPPORT );
&#160;</pre>
                </div>
            </blockquote>
            <blockquote>
                <p>Whether the database actually participates in the HA synchronization is determined at run-time. When the data definition is compiled for HA, the <i>e</i>X<i>treme</i>DB<i> High Availability</i> DDL compiler inserts an 8-byte unique identifier (called <code>auto_OID</code>, not to be confused with the field type <code><a name="kanchor98"></a>autoid</code>) into each object. This <code>auto_OID</code> is used by the runtime in the standby application to perform a synchronized commit outside the <i>master</i> application’s address space.  Think of it as a global object identifier.  A hash index is maintained for it, so the <i>replica</i> runtime can locate objects quickly when necessary.</p>
                <p>(These implementation details are provided for information value only. There is no published interface to access the index).</p>
                <h2>Initial Synchronization</h2>
                <p>The first step in replication is initial synchronization which is managed by the <i>e</i>X<i>treme</i>DB<i> High Availability</i> runtime.  On the master side this happens in C/C++ applications when the function <code><a href="../../Programming/C/HA_Functions/attach_replica.htm">mco_HA_attach_replica()</a></code> is called; in C# and Java applications the <code>MasterConnection.AttachReplica()</code> method. In the replica initial synchronization happens during its call to the C/C++ function <code><a href="../../Programming/C/HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code> or the C# or Java <code>ReplicaConnection.AttachMaster()</code> method.</p>
                <p>There are four ways to initially synchronize all newly attached replicas: <code>static</code>, <code>hot</code>, with <code>BSE</code> and <code>stateful</code>. The differences between these modes are described in the <a href="HA_Synchronization.htm">Synchronization</a> page.  In C/C++ applications, the master application chooses the mode by setting <code>mode_flags</code> element in the <code>mco_HA_master_params_t</code> structure. In C# and Java applications the mode is set in the <code>MasterConnection.Parameters</code> passed to the <code>MasterConnection.SetReplicationMode()</code> method.</p>
                <p>Note that though it is not possible to combine the <code>static</code> and <code>hot</code> modes, other modes can be combined.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>