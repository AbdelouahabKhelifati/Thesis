<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB HA Theory of Operation</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>DB HA Theory of Operation</h1>
            <blockquote>
                <p>Computing environments configured to provide nearly full-time availability are known as <i>high availability</i> systems. Typically they have redundant hardware and software and do not have single “points-of-failure”, i.e. hardware or software components that could fail. When failures occur, the <b>failover</b> process moves processing performed by the failed component to the backup component.  This requires that highly available systems have accurate instance monitoring or heartbeat mechanisms, and they must be able to quickly and accurately synchronize resources during failover.  As a part of high availability systems, databases often must be highly available.</p>
                <p>Consider a few highly available, database-equipped systems that provide service with absolutely no down time:</p>
                <blockquote>
                    <p>Industrial controllers incorporate an <code>in-memory</code> database that holds measurements made throughout the factory by sensors attached to machinery</p>
                    <p>Internet IP routers use in-memory databases to maintain their internal storage subsystems – the routing tables</p>
                    <p>Aircraft control and navigation systems. An aircraft has multiple data sources such as antennas, pilot tubes, gyros, etc. It must collect data from all these devices in addition to monitoring its own infrastructure -- power, telemetry, etc.</p>
                    <p>Operating room theater, organ transport and other medical equipment</p>
                </blockquote>
                <p>All of these systems require reliable failover processes and high availability data stores.  To achieve high availability, a data store will normally offer a means of maintaining copies of data.  The traditional mechanism for implementing a high availability database application is called <b>database replication</b> (as illustrated below).  In this solution fail-over procedures allow the system to continue using the database.</p>
                <p>A replicated database is one in which transactions are replicated at different failure-independent nodes.  The node at which a transaction was initiated is referred to as a master or a primary node.  The node to which the transaction is replicated is referred to as a replica or a secondary node.  Database changes are propagated from the master to the </p>
                <p>secondary nodes <b>within database transactions</b>.</p>
                <p>
                    <img src="../../Resources/Images/HA_2B.PNG" />
                </p>
                <p><i>Replica</i> control mechanisms configured at the <i>Master</i> node facilitate data propagation between the <i>Master</i> site and <i>Replica</i> copies of the database. These mechanisms can be categorized according to when updates – changes introduced by transactions – are propagated to all database copies.</p>
                <p>Update propagation can be done within or outside transaction boundaries. In the first case, replication is termed eager or <code>synchronous</code>.  If it occurs outside the boundaries of a transaction, the replication is termed lazy or <code>asynchronous</code>. Regardless of when the propagation occurs, the unit of propagation is a transaction (i.e. all <code>insert/update/delete</code> operations within a transaction are applied together, and succeed or fail together).</p>
                <h2>Eager Replication</h2>
                <p>Eager (<code>synchronous</code>) replication (illustrated below) provides data consistency in a straightforward way, and the quickest application recovery time when a fault occurs. No transactions are ever lost in the eager replication scheme, there is no overhead associated with node synchronization during fail-over, and the replica database is available immediately. At the same time, synchronous replication has a higher processing cost and higher communications overhead that can increase the response times during normal use.</p>
                <p>
                    <img src="../../Resources/Images/HA_3.PNG" />
                </p>
                <h2>Lazy Replication</h2>
                <p>In contrast to eager replication, lazy replication schemes propagate updates to <i>replica</i> nodes asynchronously and after the transaction is committed on the <i>master</i> node (illustrated below). These updates are applied to <i>replica</i> nodes as separate transactions. Compared to eager propagation, lazy update propagation can improve transaction responsiveness by saving on the message round-trip within the transaction. However, since updates are applied to replica nodes asynchronously, replica transactions run the risk of operating with stale data or falsely reporting certain data as available if a sequence of updates and lookups occurs. For example, a <i>replica</i> application can read a data element that has been removed by a <i>master</i> node transaction, if the read occurs before this transaction is propagated to the <i>replica</i> node.</p>
                <p>
                    <img src="../../Resources/Images/HA_4.PNG" />
                </p>
                <h2>Time-cognizant eager replication</h2>
                <p>To facilitate predictable fail-over and other response times in the face of unpredictable network latency, time-cognizant eager replication protocols can be used (illustrated below) . Because embedded and other real-time systems frequently impose strict processing deadlines, the time-cognizant approach ensures on-time delivery of the transaction data from master to replica sites.  As with any synchronous replication scheme, fail-over procedures are extremely short.</p>
                <p>
                    <img src="../../Resources/Images/HA_5.PNG" />
                </p>
                <h2>Terminology</h2>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Master database</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The main database instance</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Master application (or simply “master”)</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The process that creates and maintains the master database.  In some cases (usually shared memory applications) there can be more than one application acting as master.  In these cases one application will be the “main master” while all other applications acting as master will be referred to as “secondary master”.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Standby database or replica database</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">A database that holds a copy of the master database</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Replica application (or simply “replica”)</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">A process that interacts with the replica database.  There may be more than one process acting as replica.  Replicas should be mirror images of masters, differing only in the role they play a given moment in time.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">Synchronization</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The process of initializing a newly attached replica by sending a copy of the master’s database to the replica</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">Replication</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">The process of transmitting committed transactions from the master to the replica(s)</td>
                        </tr>
                    </tbody>
                </table>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>