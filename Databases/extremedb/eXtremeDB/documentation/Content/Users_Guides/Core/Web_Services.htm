<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>eXtremeDB Web Services</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><i>e</i>X<i>treme</i>DB Web Services</h1>
            <blockquote>
                <p><i>e</i>X<i>treme</i>DB provides Web Services using the popular REST (<a href="./​https://en.wikipedia.org/wiki/Representational_state_transfer">Representational State Transfer</a>) protocol. The REST server can be accessed using any language that supports HTTP and JSON, which includes but is not limited to C/C++, Python, Java and C#. Note that the REST server is simply an HTTP server that serves JSON content, and thus conforms to the HTTP and JSON standards.</p>
                <p>The RESTful Web services support Basic HTTP authentication and encrypted communications using SSL. The Basic HTTP authentication mechanism implements the <i>username</i> and <i>password</i> authentication according to RFC 2617. As per the RFC, the <i>username</i> and the <i>password</i> are not encrypted, which means that this authentication method cannot be deemed secure when used without SSL (or an alternative encryption method).</p>
                <p>SSL for the RESTful Web services is implemented in a manner similar to the other networking components of <i>e</i>X<i>treme</i>DB (for details see the <a href="Network_Communications.htm">Network Communications pages</a>).</p>
                <h1>Overview</h1>
                <p><i>e</i>X<i>treme</i>DB implements the ​<a href="https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htm">RESTful</a> web services to publish internal state and other information including </p>
                <ul>
                    <li value="1">database statistics, </li>
                    <li value="2">schema definition, </li>
                    <li value="3">performance metrics, </li>
                    <li value="4">database content (available soon). </li>
                </ul>
                <p>The <i>e</i>X<i>treme</i>DB REST API is enabled in one of the following ways:</p>
                <ul>
                    <li value="1">via <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> configuration parameters if the database is started by <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, or</li>
                    <li value="2">if the database is embedded in an application, the <code>mcorest</code> library provides REST C API functions using the <code>mcoews</code> embedded web service library.</li>
                </ul>
                <blockquote>
                    <p>
                        <img src="../../Resources/Images/note.png" /> Note that <i>e</i>X<i>treme</i>DB supports nested data types of arbitrary depth, e.g. a class may contain a structure, which may contain an array of other structures, which, in turn, may contain other fields, etc. However, RESTful API methods that implement individual array, sequence, or structure element access are only available for the top-level fields (i.e. the fields of the classes). Additionally, it is possible to access the individual fields of structures contained by the top-level objects using the <code><a href="Web_Services/db_classes_struct_no_byindex_index_no_eq_key_field_at_elem_resource.htm">api/db/&lt;dbname&gt;/classes/&lt;struct_no&gt;/byindex/&lt;index_no&gt;/eq/&lt;key&gt;/field/&lt;field_no&gt;/at/&lt;elem_index&gt;</a></code> resource.</p>
                </blockquote>
                <p>The C API implemented in the <code>mcorest</code> library is described in page <a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services_C.htm">Web Services C API Reference</a>. The following section demonstrates how  <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> can be used to expose the REST server.</p>
                <h2> <i>xSQL</i> REST API Demonstration</h2>
                <p>To start the REST server from <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>, create a configuration file <code>xsql.cfg</code> like the following in directory <code>eXtremeDB/target/bin</code>:</p>
                <div class="code-block"><pre>    &#160;
    database_name : xsqldb,
    database_size : 100m, 
    &#160;
    rest : {
        addr : 127.0.0.1,
        port : 8083
    }
    &#160;</pre>
                </div>
                <p>
                    <img src="../../Resources/Images/note.png" />  Note that the IP address parameter <code>addr</code> is explicitly set to the localhost loop back address <code>127.0.0.1</code> for demonstration purposes. If omitted, this  parameter defaults to <code>0.0.0.0</code> which allows the REST server to accept incoming connections on all available network interfaces (LAN, WiFi, whatever is installed). Be aware that <i>this default behavior can be undesirable or even dangerous</i>. To restrict network access any valid IP address may be specified; for example "<code>addr : 192.168.0.5</code>".</p>
                <p>Using this configuration file, you could start <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> and request a REST resource on a Unix-Linux system with the commands like the following:</p>
                <div class="code-block"><pre>&#160;
    ~/mcobject/eXtremeDB_8.0$ ./eXtremeDB/target/bin/xsql -c xsql.cfg &amp;  
    [1] 11721
    ~/mcobject/eXtremeDB_8.0$ NOTICE:  Starting XSQL
    NOTICE:  xsql started
    NOTICE:  mcorest started at port 8083
    Ctrl-C to stop SQL server
&#160;
    ~/mcobject/eXtremeDB_8.0$ curl http://localhost:8083/api/db
    {
        "databases":
        [
            "xsqldb",
            "eXDB_perf"
        ]
    }
    &#160;</pre>
                </div>
                <p>Or on a Windows system, launch <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> with the following command from directory <code>eXtremeDB/target/bin</code>:</p>
                <div class="code-block"><pre>    &#160;
    xsql -c xsql.cfg  
    NOTICE:  Starting XSQL
    NOTICE:  xsql started
    NOTICE:  mcorest started at port 8083
    &#160;
    press Enter to stop SQL server
    &#160;</pre>
                </div>
                <p>Now type the URL <code>http://localhost:8083/api/db</code> into your browser which will then display the following resource:</p>
                <div class="code-block"><pre>&#160;
    {
        "databases":
        [
            "xsqldb"
        ]
    }
    &#160;</pre>
                </div>
                <p>The <code><a href="Web_Services/db_resource.htm"><code>db</code></a></code>  resource simply lists the names of the available databases in JSON format. Please see page  <a href="Web_Services/McoREST_Resources_Responses.htm"><i>e</i>X<i>treme</i>DB Web Service Resources</a> for descriptions of the resources provided by the REST server.</p>
                <h1>Using the mcorest Library API</h1>
                <p>The <code>mcorest</code> library can be used either in <i>manual</i> or in <i>automatic multithreaded</i> mode. The latter is easier to configure, since the <code>mcorest</code> library manages the interfaces and connections internally. However, there are circumstances when the single-threaded model is required, or a higher degree of control over the API is preferred; <i>manual</i> mode should be used in these cases. Both modes are described below. This description is intended to give an overview of the library.</p>
                <h2>Initialization</h2>
                <p>The <code>mcorest</code> library is initialized by calling <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/initialize.htm">mcorest_initialize()</a></code> before any other <code>mcorest</code> function calls. Next, the application creates a <code>mcorest</code> server instance by calling <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/create.htm">mcorest_create()</a></code>.The application receives the handle of the server through the <code>mcorest_h *rest</code> output parameter.  One server instance should be created for each database served. </p>
                <p>The application then calls <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/add_interface.htm">mcorest_add_interface()</a></code> to tell the REST server which address(es) and port(s) to listen on. Multiple interfaces can be specified with consecutive calls to this function.</p>
                <p>If the application wishes to use the provided web services <i>database</i>, <i>perf</i> and <i>SQL</i>, then it must call the corresponding functions (<code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/svc_db_init.htm">mcorest_svc_db_init()</a></code>, <a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/svc_perf_init.htm"><code>mcorest_svc_perf_init()</code></a>, or <a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/svc_sql_init.htm"><code>mcorest_svc_sql_init()</code></a>) to explicitly initialize the services.</p>
                <h2>Basic HTTP authentication</h2>
                <p>To enable the Basic HTTP authentication, use the mcorest_set_basic_auth() C API function. When using xSQL, set the http_realm, http_username, and http_password parameters of the rest section.</p>
                <p>To enable SSL, pass a pointer to the SSL parameters structure to the mcorest_add_interface() C API function. When using xSQL, set either the global settings in the global ssl_params section, or the REST-specific settings in the ssl_params subsection of the rest section.</p>
                <h2>Execution</h2>
                <p>As mentioned above, the server can run in <i>automatic</i> multithreaded mode. Alternatively, the application may drive its execution <i>manually</i>. Both modes are discussed below.</p>
                <h3>Automatic multithreaded mode</h3>
                <p>To start the server, the application calls <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/start.htm">mcorest_start()</a></code>. The application is not allowed to call any of the <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services_C.htm">mcorest_*()</a></code> methods while the server is running in automatic mode, except for <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/stop.htm">mcorest_stop()</a></code> which is called when the application needs to stop the REST server (e.g. upon shutdown).</p>
                <h3>Manual mode</h3>
                <p>This mode may be preferred by the applications that need a finer degree of control over the web server. It is also the only choice when multithreading is not available on the target platform.</p>
                <p>In a single-threaded environment, the application would typically incorporate the following steps into its run loop, wherever convenient:</p>
                <ul>
                    <li value="1">Call function <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/interface_check.htm">mcorest_interface_check()</a></code> to wait for and accept new connections. (Pass 0 to poll the interface without blocking.) If a new connection is accepted, this call returns <code>MCO_S_REST_CONN_ACCEPTED</code> and passes the connection handle to the caller through the <code>mcorest_conn_h *conn</code> argument. The application should store this handle until the connection is finished or cancelled.</li>
                    <li value="2">Call function <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/conn_execute.htm">mcorest_conn_execute()</a></code> for some or all active connections to let them exchange data with their peers. If the connection is executed normally and closed, this function returns the <code>MCO_S_REST_CONN_FINISHED</code> status code. Alternatively, if the connection is still alive, <code>MCO_S_OK</code> code is returned. The application may choose to close the active connections it doesn't need using function <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/conn_cancel.htm">mcorest_conn_cancel()</a></code>.</li>
                </ul>
                <p>When the application does not need the REST server anymore, it should cancel all active connections using function <a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/conn_cancel.htm"><code>mcorest_conn_cancel()</code></a> .</p>
                <p>In multithreaded mode, care should be taken to <i>avoid sharing the REST server instance, interfaces and connections between threads</i>. </p>
                <h3>Numeric values as strings</h3>
                <p>The RESTful Web Services' clients may request numeric values to be transmitted as strings in all JSON requests and responses by sending the <code>X-Numeric-Format: string</code> header with the HTTP requests. The server does not attempt to remember this setting; the header has to be sent with every request that requires this behavior. Furthermore, it is allowed to intermix requests with and without this setting.</p>
                <h2>Deinitialization</h2>
                <p>All interfaces must be closed by calling <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/interface_close.htm">mcorest_interface_close()</a></code> and the REST server(s)  destroyed by calling <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/destroy.htm">mcorest_destroy()</a></code>. Finally, the <code>mcorest</code><a name="kanchor201"></a> runtime should be shut down by calling <code><a href="../../Programming/C/Core_Functions/Static/Auxiliary/Web_Services/shutdown.htm"><code>mcorest_shutdown()</code></a></code>.</p>
                <h2>Examples</h2>
                <p>The following SDK Samples directories provide examples of Web Service C API usage: </p>
                <ul>
                    <li value="1"> <code>eXtremeDB/samples/native/core/24-rest/singlethreaded</code></li>
                    <li value="2"><code>eXtremeDB/samples/native/core/24-rest/multithreaded</code>
                    </li>
                </ul>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>