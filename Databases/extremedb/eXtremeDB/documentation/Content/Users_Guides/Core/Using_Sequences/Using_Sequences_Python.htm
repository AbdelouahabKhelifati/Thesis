<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Python API|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using Sequences in Python</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/IndentedFunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Using Sequences in Python</h1>
            <p>As explained in the <a href="../Using_Sequences.htm">User's Guide</a> page, a sequence is an unbounded array of <i>e</i>X<i>treme</i>DB-supported scalar data elements. The Python<i><a href="../../../Programming/Python/Classes/SequenceIterator.htm"> SequenceIterator</a></i> class is used to manage database fields of type <a href="../Sequences.htm">sequence</a>. As <a href="../Sequences.htm">sequences</a> are effectively vectors of values, they are accessed through <i>iterators</i>. Where the C type <code><a href="../../../Programming/C/Structures/SequenceIterator.htm">mco_seq_iterator_h</a></code> is used in C applications, the Python class <i><a href="../../../Programming/Python/Classes/SequenceIterator.htm">SequenceIterator</a></i> serves the equivalent role in Python applications. The <i><a href="../../../Programming/Python/Classes/SequenceIterator.htm">SequenceIterator</a></i> class also provides  a powerful set of <i><a href="../../../Programming/Python/Analytics_Methods/Methods_By_Category.htm">Analytics Methods</a></i> for performing mathematical and statistical operations on <a href="../Sequences.htm">sequences</a>.</p>
            <h2>Inserting and Updating Sequences in Python</h2>
            <p>Normally sequence data is inserted using the <i>SequenceIterator</i> <code><a href="../../../Programming/Python/Analytics_Methods/Iterator_Methods.htm">append()</a></code> method. For example consider the following schema definition:</p>
            <div class="code-block"><pre>&#160;
    #define uint4 unsigned&lt;4&gt;
    &#160;
    class Quote {
        char&lt;16&gt;            symbol;
        sequence&lt;uint4 asc&gt; day;
        sequence&lt;float&gt;     price;
        &#160;
        tree&lt;symbol&gt; by_symbol;
    };
    &#160;</pre>
            </div>
            <p>With this class definition, the <i>Quote</i> sequence fields <code>day</code> and <code>price</code> can be populated with code like the following:</p>
            <div class="code-block"><pre>&#160;
    con.startTransaction()
    tick = generate_random_quote()
    quote = con.new("Quote")
    quote.symbol = tick.symbol
    quote.day.append(tick.day)
    quote.price.append(tick.price)
    con.commit()
    &#160;</pre>
            </div>
            <p>It may sometimes be necessary to insert values into an ordered time series. Values can be  inserted into an existing sequence using the <code href="../../../Programming/Python/Analytics_Methods/Iterator_Methods.htm"><a href="../../../Programming/Python/Analytics_Methods/Iterator_Methods.htm">insert()</a></code> method. For example, the following code snippet searches for the <i>Quote</i> object with symbol "<code>IBM</code>", then inserts <code>day</code> and <code>price</code> values:</p>
            <div class="code-block"><pre>&#160;
    con.startTransaction()
    for quote in cursor:
        dayit = quote.day.search(20130101, exdb.SeqIteratorBoundary.MCO_SEQ_BOUNDARY_INCLUSIVE, 
                        20130101, exdb.SeqIteratorBoundary.MCO_SEQ_BOUNDARY_INCLUSIVE)
        dayit = append(20130102)
        quote.day.next()
        quote.day.insert(dayit)
        
        &#160;
    con.commit()
    &#160;</pre>
            </div>
            <h2>Sequence Interface to NumPy</h2>
            <p>If Python has the <a href="http://www.numpy.org/">numPy</a> module installed, it is possible to load and save data from sequences directly to a <a href="http://www.numpy.org/">numPy</a> array. (Note that due to the nature of <a href="../Sequences.htm">sequence</a> data in <i>e</i>X<i>treme</i>DB, only 1-dimensional <a href="http://www.numpy.org/">numPy</a> arrays are supported.)</p>
            <h3>Appending a numPy Array to a Sequence.</h3>
            <p>The <i>SequenceIterator</i><code><a href="../../../Programming/Python/Analytics_Methods/Iterator_Methods.htm">append()</a></code> method can accept a <code>numpy.ndarray</code> as an argument. For example:</p>
            <div class="code-block"><pre>&#160;
    &gt;&gt;&gt; ac = numpy.arange(10,  dtype='uint32')
    &gt;&gt;&gt; ac
    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint32)
    &gt;&gt;&gt; quote.volume.append(ac)
    &#160;</pre>
            </div>
            <p>Both <a href="http://www.numpy.org/">numPy</a> and <i>e</i>X<i>treme</i>DB<a href="../Sequences.htm">sequences</a> use C-Style binary array representation for efficiency. So the data types for <a href="../Sequences.htm">sequence</a> and <code>nparray</code> must match. This is why <code>dtype=uint32</code> is the argument specified.</p>
            <p>The <a href="../../../Programming/Python/Analytics_Methods/Iterator_Methods.htm">append()</a> method recognizes the following argument types:</p>
            <ul>
                <li value="1">A Python <code>object</code>:</li>
            </ul>
            <blockquote>
                <div class="code-block"><pre>&#160;
    o.price.append(1)
    &#160;</pre>
                </div>
                <p>This will simply append a value to the end of the <a href="../Sequences.htm">sequence</a>. (This is the slowest way to update a <a href="../Sequences.htm">sequence</a>.)</p>
            </blockquote>
            <ul>
                <li value="1">A Python <code>list</code>:</li>
            </ul>
            <blockquote>
                <div class="code-block"><pre>&#160;
    o.price.append([1,2,3,4,5])
    &#160;</pre>
                </div>
                <p>Here the 5 values in the list are appended to the <a href="../Sequences.htm">sequence</a>.</p>
            </blockquote>
            <ul>
                <li value="1">A Python <code>tuple</code>:</li>
            </ul>
            <blockquote>
                <div class="code-block"><pre>&#160;
    o.price.append( (1,2,3,4,5) )
    &#160;</pre>
                </div>
                <p>Again the 5 values in the list are appended to the sequence.</p>
            </blockquote>
            <ul>
                <li value="1">An <code>array.array</code>:</li>
            </ul>
            <blockquote>
                <p>The Python standard library supports a homogenous typed <code>array</code> with elements of the same size. In fact, this is the wrapper over C-style array, and it can be used to fill a <a href="../Sequences.htm">sequence</a> with data as follows:</p>
                <div class="code-block"><pre>    &#160;
    import array
    a = array.array('f', [1,2,3,4])
    o.price.append(a)
    &#160;</pre>
                </div>
                <p>From the database point of view, this is the fastest way of inserting data, but keep in mind the following considerations:</p>
            </blockquote>
            <blockquote>
                <blockquote>
                    <p>1. The data type for <code>array.array</code> must exactly match the data type for the database <a href="../Sequences.htm">sequence</a>. Type mappings between <i>e</i>X<i>treme</i>DB database types, Python and C types are shown in the following table:</p>
                    <table class="TableStyle-IndentedFunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                        <col class="TableStyle-IndentedFunctionReference-Column-Column1" />
                        <col class="TableStyle-IndentedFunctionReference-Column-Column2" />
                        <col class="TableStyle-IndentedFunctionReference-Column-Column1" />
                        <thead>
                            <tr class="TableStyle-IndentedFunctionReference-Head-Header1">
                                <th class="TableStyle-IndentedFunctionReference-HeadE-Column1-Header1">Sequence type</th>
                                <th class="TableStyle-IndentedFunctionReference-HeadE-Column2-Header1">array.array typecode</th>
                                <th class="TableStyle-IndentedFunctionReference-HeadD-Column1-Header1"> C type</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">signed&lt;1&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'b'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">signed char</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">unsigned&lt;1&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'B'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">unsigned char</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">signed&lt;2&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'h'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">signed short</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">unsigned&lt;2&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'H'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">unsigned short</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">signed&lt;4&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'i'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">signed int </td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">unsigned&lt;4&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'I'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">unsigned int </td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">signed&lt;8&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'l'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">signed long long</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">unsigned&lt;8&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'L'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">unsigned long long</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">float </td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'f'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">float</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">double </td>
                                <td class="TableStyle-IndentedFunctionReference-BodyE-Column2-Body1">'d'</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyD-Column1-Body1">double</td>
                            </tr>
                            <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">char&lt;n&gt;</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyB-Column2-Body1">-</td>
                                <td class="TableStyle-IndentedFunctionReference-BodyA-Column1-Body1">-</td>
                            </tr>
                        </tbody>
                    </table>
                    <p>(Note, that the char&lt;n&gt; type is not supported in <code>array.array</code>.)</p>
                    <p>2. Speed. Although this is the fastest way to insert data into a database, the creation of <code>array.array</code> incurs its own overhead. Tests show that the longer the array being used to insert, the greater the improvement in performance. (It's feasible to use <code>array.array</code> with data chunks of much more that a 100 items.) Also, the Python interpreter is quite slow filling <code>array.array</code> with values. A real advantage can be achieved using other methods for filling that array, like: <code>array.fromfile(f, n)</code>or <code>array.fromstring(s)</code>. (Please consult the Python documentation for these methods.)</p>
                </blockquote>
            </blockquote>
            <h3>Retrieving Sequence Data to an nparray</h3>
            <p>If a <a href="../Sequences.htm">sequence</a> is of moderate size, it is possible to represent the entire <a href="../Sequences.htm">sequence</a> as a <code>numPy array</code> using the <i>SequenceIterator</i> method <code>tonparray()</code>. Its signature is:</p>
            <div class="code-block"><pre>&#160;
    SequenceIterator.tonparray([size_hint])
    &#160;</pre>
            </div>
            <p>For a <a href="../../../Programming/Common/Analytics/Materialized.htm">materialized</a><code>sequence</code>, the <i>e</i>X<i>treme</i>DB<a name="kanchor666"></a> runtime knows exactly what the <a href="../Sequences.htm">sequence</a> size is, so the required memory for the resulting array is allocated immediately. For a non-materialized <a href="../Sequences.htm">sequence</a>, it is not possible to know in advance the size of the resulting array. In this case, memory is allocated by chunks as the temporary result is built. This is not very efficient, so if the application knows the expected array size, this can be passed to <code>tonparray()</code> as  the <code>size_hint</code> argument.</p>
            <p>&#160;</p>
            <h2>Sequences in Python Embedded SQL Applications</h2>
            <p>The <i>e</i>X<i>treme</i>DB Python wrapper extends the <a href="https://www.python.org/dev/peps/pep-0249/">Python DB API Specification</a> by allowing operations with <a href="../Sequences.htm">sequences</a>. A <a href="../Sequences.htm">sequence</a> may appear as a result of a <code>select</code> statement, or, as a parameter in <code>insert</code> or <code>update</code> statements.
For example, the following statement could be sent to the SQL engine:
</p>
            <div class="code-block"><pre>&#160;
    cursor.execute("SELECT stamp, low, high FROM Quote WHERE symbol = ?", ('AAA',))
    &#160;</pre>
            </div>
            <p>The result of this query can be as follows:</p>
            <div class="code-block"><pre>&#160;
    row = cursor.fetchone()
    print "Row is:", row
    Row is: (&lt;exdb.SequenceIterator object at 0x1008f6610&gt;, &lt;exdb.SequenceIterator object at 0x1008f7610&gt;, 
        &lt;exdb.SequenceIterator object at 0x1008f8610&gt;)
    &#160;
    &#160;</pre>
            </div>
            <p>Note that the resulting row contains <i>SequenceIterator</i> objects as row values. Regular <i>iterator</i> methods can be applied to this <i>iterator</i>. Note that, except in the case of a query result, the returned  iterator will be “not <i><a href="../../../Programming/Common/Analytics/Materialized.htm">materialized</a></i>”. </p>
            <p>To insert data into a <a href="../Sequences.htm">sequence</a>, pass data into the SQL statement as a parameter using an <code>array.array</code> . For example:</p>
            <div class="code-block"><pre>&#160;
    cursor.execute('INSERT INTO Quote(symbol, stamp, open, close, high, low, volume) VALUES (?,?,?,?,?,?,?)',
        ('AAA', array.array('I', timestamps), array.array('f', opens), array.array('f', closes), 
        array.array('f', highs), array.array('f', lows), array.array('I', volumes)))
        &#160;</pre>
            </div>
            <p>Note that <code>array.array</code> is strictly typed, so its type must match the <a href="../Sequences.htm">sequence</a> column type. If it does not match, the resulting behavior is unpredictable. Passing a Python <code>list</code> or <code>tuple</code> as a parameter value is not supported. Please consult the mappings table above for the correspondences between <a href="../Sequences.htm">sequence</a> types and <code>array.array</code> types.</p>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>