<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Database Schema Definition in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Database Schema Definition in C</h1>
            <blockquote>
                <p>For C projects, the database schema is specified in the <i>e</i>X<i>treme</i>DB Data Definition Language (<a href="../../../Programming/C/DDL.htm">DDL</a>) which identifies the database, defines each data class, its elements, its relationship to other data classes, and data access methods. The DDL syntax, keywords and preprocessor are designed to be similar to elements of the C language to simplify learning and understanding.</p>
                <p>Whether intended for access from the C, C++, Java, Python or C# APIs or from embedded SQL statements, the schema is defined in a text file (commonly with extension <code>.mco</code>) using <i>e</i>X<i>treme</i>DB<a href="../../../Programming/C/DDL.htm"> Data Definition Language</a>. </p>
                <p>The DDL compiler <code><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code> is then run to generate two header files (<code>&lt;database_name&gt;.h</code> and <code>&lt;database_name&gt;.c</code>) that are included into the C or C++ application source code and project. These generated files constitute the application specific <a href="../../../Programming/C/Generated.htm">Generated API</a> used within the application to manage database objects.</p>
                <p>For example, the following file <code>schema.mco</code> would define a simple database <code>c_apidb</code> consisting of a single class <i>Person</i>:</p>
                <div class="code-block"><pre><a name="kanchor731"></a>&#160;
    declare database  c_apidb;
    &#160;
    class Person
    {
        string name;
        string address;
        string position;
        unsigned&lt;4&gt;  salary;
        float  rating;
        &#160;
        autoid_t&lt;Person&gt; manager;
        autoid[1000];
        tree&lt;name&gt; pk;
    };
    &#160;</pre>
                </div>
                <p>As can be seen here, the <i>e</i>X<i>treme</i>DB DDL uses a C-like syntax for defining the <code>type</code> and <code>name</code> of the fields within the database <code>class</code>. Please see the <a href="../../../Programming/C/DDL.htm">DDL pages</a> for a complete definition of the DDL&#160;syntax.</p>
                <h2>Compiling the schema</h2>
                <p>The schema file is compiled by the <code><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code> utility found in the <code>eXtremeDB/host/bin</code> directory of the <i>e</i>X<i>treme</i>DB installation. For example, the following command will compile the example schema defined above when run from the directory containing <code>schema.mco</code>:</p>
                <div class="code-block"><pre>&#160;
    eXtremeDB/host/bin/mcocomp schema.mco 
&#160;</pre>
                </div>
                <p>If the schema definition is syntactically correct, <code>mcocomp</code> will emit output like the following:</p>
                <div class="code-block"><pre>&#160;
    eXtremeDB Data Definition Language Processor version 7.0 (Build 1792)
    Copyright (c) 2001-2016 McObject LLC.  All Rights Reserved.
    &#160;
    Compiled successfully: Mon Jan 23 15:40:42 2017
    &#160;</pre>
                </div>
                <p>(Note that the first line of output indicates the <i>e</i>X<i>treme</i>DB<i>build number</i> (in this case <code>1792</code>) which can be useful if ever it is necessary to contact <i>McObject Support</i> for technical assistance.)</p>
                <p>When successful, two C source code files (<code>c_apidb.h</code> and <code>c_apidb.c</code> in this case) will be generated that comprise the schema-specific API for this database. The header file <code>c_apidb.h</code> must be included in all C source files that will use the generated API. And the source file <code>c_apidb.c</code> must be included in the project to be compiled and linked with the application code. </p>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that the generated <code>.h</code> and <code>.c</code> files must be included also in <i>e</i>X<i>treme</i>SQL applications - even if all access to the <i>e</i>X<i>treme</i>DB database will be through SQL only.</p>
                <p>The following sample DDL specification illustrates many of the data types and declarations. (Please see the detailed description of <i>e</i>X<i>treme</i>DB DDL syntax <a href="../../../Programming/C/DDL.htm">here</a> and view other examples in the <code>schema.mco</code> files in <a href="../../../Programming/C/SDK_Samples.htm">SDK Samples</a>.)</p>
                <div class="code-block"><pre><a name="kanchor732"></a>&#160;
    #define int1	signed&lt;1&gt;
    #define int2	signed&lt;2&gt;
    #define int4	signed&lt;4&gt;
    #define uint4	unsigned&lt;4&gt;
    #define uint2	unsigned&lt;2&gt;
    #define uint1	unsigned&lt;1&gt;
    &#160;
    struct SampleStruct 
    {
        uint2	s1;
        char&lt;20&gt;	s2;
    };
    struct BigStruct 
    {
        string      str;
        uint2       u2;
        uint4       u4;
        vector     &lt;SampleStruct&gt; vss;
    };
    &#160;
    declare database	simple;
    &#160;
    /* Declare an OID - the estimated number of class instances is in square brackets */
    declare OID	SampleStruct[20000];
    &#160;
    /*
     * “compact” keyword: Total object size, including overhead is less than 64K.
     * Size calculation does NOT count size of blob(s) fields
    * embedded in the class
    */
    compact class SampleClass {
        /* basic data types */
        uint1 a = 0;
        uint2 b;
        uint4 c;
        &#160;
        /* oid reference */
        ref	  d;
        &#160;
        /* vectors - could be made of any type */
        vector &lt;uint2&gt;        numbers;
        vector &lt;SampleStruct&gt; ss;
        &#160;
        /* strings are limited to 64K */
        string                str;
        &#160;
        /* blobs are unlimited */
        blob                  blo;
        &#160;
        /* optional structure, the value could be missing */
        optional BigStruct	big_struct;
        &#160;
        /* voluntary means could be initiated and dropped at runtime
        * unique    means unique
        * tree      means tree-based index (sort order is supported)
        * hash      means hash-based index
        */
        voluntary unique tree&lt; a,b,ss.s2&gt; SAM;
        &#160;
        /* for hash indexes the estimated number of class instances is in square brackets */
        hash &lt;a&gt;     AAAA[10000];
        hash &lt;ss.s2&gt; SSS2[10000];
        hash &lt;numbers&gt; NNNN[10000];
        &#160;
        /* events can be defined for NEW, and DELETE operations 
        * and for UPDATE of the class-object or any field
        */
        event &lt;new&gt;	new;
        event &lt;delete&gt; delete;
        event &lt;a update&gt; update;
        &#160;
        /* declare an autoid and oid (internally managed hash indexes) for this class */
        autoid;
        oid;
        &#160;
        /*  list      means the objects could be sequentially scanned */
        list;
    };
    &#160;</pre>
                </div>
                <h2>The database dictionary</h2>
                <p>The generated header file (<code>c_apidb.h</code> in this case) contains <code>struct</code>, <code>typedef</code> and <code>function</code> prototype definitions for each <code>class</code>, <code>field</code> and <code>index</code> defined in the schema. The source code file (<code>c_apidb.c</code> in this case) contains the implementation of the functions defined in the header file. It may be interesting to examine these function implementations. Most of them call lower level "wrapper" functions with prefix "<code>mco_w_</code>". But one function, the "<code>_get_dictionary()</code>" function, is of particular importance. It has a name composed of the database name followed by suffix "<code>_get_dictionary(void)</code>". When compiled, this function contains the binary form of the schema that is loaded by the <i>e</i>X<i>treme</i>DB runtime when the database open function <code>mco_db_open_dev()</code> is called with argument <code>_get_dictionary()</code>. This binary <code>dictionary</code> is used internally for all database access by the runtime.</p>
                <h2>Persistent Databases</h2>
                <p>For persistent database applications the schema is specified in the <i>e</i>X<i>treme</i>DB Data Definition Language (<a href="../../../Programming/C/DDL.htm">DDL</a>) exactly as for in-memory databases except for the declaration <code>persistent</code> for all classes that will be stored on persistent media. For example:</p>
                <div class="code-block"><pre>&#160;
    persistent class Record 
    {
        unsigned&lt;4&gt; key;
        unsigned&lt;4&gt; value;
&#160;
        unique tree&lt;key&gt; tkey;
    };
    &#160;</pre>
                </div>
                <p>If all classes in the schema are persistent, an alternative is to use the <code>-persistent</code> option when compiling the schema with <code>mcocomp</code>. For example:</p>
                <div class="code-block"><pre>&#160;
    mcocomp -persistent schema.mco 
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>