<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Fields and Indexes</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor978"></a>UDA Fields and Indexes</h1>
            <blockquote>
                <h2>UDA Fields and Indexes</h2>
                <p>Fields in a database class are defined by the following descriptor:</p>
                <div class="code-block"><pre>&#160;
    typedef struct tag_mco_dict_field_info_t_ 
    {
        unsigned short     field_no;       /* field sequential number (from 0) */
        char             * name;      /* DDL field name */
        mco_dict_type_t    type;      /* field type:  MCO_DD_.*/
        unsigned int       flags;     /* flags: MCO_DICT_FI_... */
        unsigned short     dimension; /* for arrays (MCO_DICT_FI_ARRAY)
        * the dimension for the array for
        * scalar-type fields is set to 0
        */
        &#160;
        unsigned short     struct_no; /* if type == MCO_DD_STRUCT),
        * the structure number,
        * otherwise, 0
        */
    } mco_dict_field_info_t, * mco_dict_field_info_p;
    &#160;</pre>
                </div>
                <p>Where the values for <code>flags</code> can be a combination of the following:</p>
                <div class="code-block"><pre>    &#160;
    #define MCO_DICT_FI_OPTIONAL  1                    /* optional field */
    #define MCO_DICT_FI_INDEXED   2 /* the field is included in an index */
    #define MCO_DICT_FI_VECTOR    4                /* vector-based field */
    #define MCO_DICT_FI_ARRAY     8                 /* array-based field */
    #define MCO_DICT_FI_EVENT_UPD  0x10    /* update event set for field */
    #define MCO_DICT_FI_HAS_INIT_DATA	0x20
    #define MCO_DICT_FI_NULLABLE            0x40  /* field is nullable  */
    #define MCO_DICT_FI_NULL_INDICATOR      0x80  /* field is null indicator */
    &#160;</pre>
                </div>
                <p>The following API functions will obtain a pointer to the field descriptor based on its number or name:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_dict_field( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no,
                    unsigned short field_no,
                    /* out */ mco_dict_field_info_p field_info );
    &#160;
    MCO_RET mco_dict_field_name ( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no, 
                    const char * name,
                    /* out */ mco_dict_field_info_p field_info );
    &#160;</pre>
                </div>
                <p>Indexes in a database class are defined by the following descriptor:</p>
                <div class="code-block"><pre>    &#160;
    typedef struct tag_mco_dict_index_info_t_
    {
        unsigned short     index_no;
        char             * name;
        unsigned int       flags;
        unsigned short     n_fields;
    } mco_dict_index_info_t, * mco_dict_index_info_p;
    &#160;</pre>
                </div>
                <p>Where the values for <code>flags</code> can be a combination of the following:</p>
                <div class="code-block"><pre><a name="kanchor979"></a>&#160;
    #define MCO_DICT_II_UNIQUE     1
    #define MCO_DICT_II_VOLUNTARY  2
    #define MCO_DICT_II_LIST       4
    #define MCO_DICT_II_AUTOID     8
    #define MCO_DICT_II_TREE       0x10
    #define MCO_DICT_II_HASH       0x20
    #define MCO_DICT_II_USERDEF    0x40
    #define MCO_DICT_II_KDTREE     0x80
    #define MCO_DICT_II_RTREE      0x100
    #define MCO_DICT_II_PATRICIA   0x200
    #define MCO_DICT_II_NULLABLE   0x400
    &#160;</pre>
                </div>
                <p>The following API functions will obtain a pointer to the index descriptor based on its number or name:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_dict_index( const mco_metadict_header_t * metadict,
                unsigned short dict_no,
                unsigned short struct_no,
                unsigned short index_no,
                /* out */ mco_dict_index_info_p index_info );
    &#160;
    MCO_RET mco_dict_index_name( const mco_metadict_header_t * metadict,
                unsigned short dict_no,
                unsigned short struct_no,
                const char * name,
                /* out */ mco_dict_index_info_p index_info );
    &#160;</pre>
                </div>
                <p>When an index is composed of multiple fields, each part of the index is defined by the following descriptor:</p>
                <div class="code-block"><pre>    &#160;
    typedef struct tag_mco_dict_ifield_info_t_ 
    {
        unsigned short     ifield_no; /* segment number (zero-based) */
        unsigned short     field_no;  /* field number that corresponds to
        * the segment (within the same
        * class) */
        unsigned int       flags;    / *flags: MCO_DICT_IFI_... */
    } mco_dict_ifield_info_t, * mco_dict_ifield_info_p;
    &#160;</pre>
                </div>
                <p>Where the values for <code>flags</code> can have the default value of <code>0</code> or :</p>
                <div class="code-block"><pre>&#160;
    #define MCO_DICT_IFI_DESCENDING 1  /* sort descending; 0 = ascending */
    #define MCO_DICT_IFI_NULLABLE   2  /* field associated with index segment is nullable */
    &#160;</pre>
                </div>
                <p>These bit-valued <code>flags</code> can be manipulated with bit-wise <code>OR</code> to set all possible combinations:</p>
                <div class="code-block"><pre>&#160;
    flags = 0;                                              // ascending, non-nullable
    flags = MCO_DICT_IFI_DESCENDING                         // descending,non-nullable
    flags = MCO_DICT_IFI_NULLABLE                           // ascending, nullable
    flags = MCO_DICT_IFI_DESCENDING | MCO_DICT_IFI_NULLABLE // descending,non-nullable
    &#160;</pre>
                </div>
                <p>The following API functions will obtain a pointer to the index field descriptor within an index composed of multiple fields based on its number or name:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_dict_ifield ( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no,
                    unsigned short index_no,
                    unsigned short ifield_no,
                    /* out */ mco_dict_ifield_info_p ifield_info );
&#160;
    MCO_RET mco_dict_ifield_name( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no,
                    unsigned short index_no,
                    const char * name,
                    /* out */ mco_dict_ifield_info_p ifield_info );
&#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>