<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA User Defined Indexes</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor439"></a>UDA User Defined Indexes</h1>
            <blockquote>
                <h2>User Defined Indexes</h2>
                <p>User-defined indexes for the <i>e</i>X<i>treme</i>DB native API are explained in the <a href="../Indexes_Cursors.htm">Indexes and Cursors</a> page.  As with native User-defined Functions (<code>udf</code>) the UDA API requires that the application supply two compare functions for <code>tree</code> indexes and two additional <code>hash</code> functions for hash indexes.  For <code>tree</code> indexes, provide one custom function that compares two objects and one that compares an object to an external key value.  For <code>hash</code> indexes, provide two pairs of functions: two returning a hash code and two compare functions (if a user-defined tree index is also defined then these compare functions are used for the <code>hash</code> index as well).</p>
                <p><a name="kanchor440"></a>These functions must then be registered with the runtime before cursor functions can be called on these indexes by passing a parameter of the following type:</p>
                <div class="code-block"><pre>    &#160;
    typedef struct mco_uda_userdef_funcs_t_ 
    {
        mco_uda_compare_userdef_f         fcomp;
        mco_uda_compare_extkey_userdef_f  fcomp_ext;
        mco_uda_hash_userdef_f            fhash;
        mco_uda_hash_extkey_userdef_f     fhash_ext;
    } mco_uda_userdef_funcs_t, *mco_uda_userdef_funcs_h;
    &#160;</pre>
                </div>
                <p>The application implements these compare functions with the following function signatures:</p>
                <div class="code-block"><pre>&#160;
    /* Object - Object */
    typedef int2(*mco_uda_compare_userdef_f)( mco_uda_object_handle_p obj1,
                            unsigned short index1,
                            mco_uda_object_handle_p obj2,
                            unsigned short index2,
                            void *user_context);
    &#160;
    /* Object - external key(s) */
    typedef int2(*mco_uda_compare_extkey_userdef_f)( mco_uda_object_handle_p obj,
                                unsigned short index,
                                mco_uda_value_t *keys,
                                uint2 keys_count,
                                void *user_context);
                                &#160;
    &#160;</pre>
                </div>
                <p>These compare functions must return &lt;0, =, or &gt;0 depending on whether the object value is less than, equal to or greater than the external key value.</p>
                <p>In addition, for hash indexes, two custom functions need be implemented with the following function signatures:</p>
                <div class="code-block"><pre>    &#160;
    /* Hash - Object */
    typedef uint4 (*mco_uda_hash_userdef_f)( mco_uda_object_handle_p obj,
                        unsigned short index,
                        void *user_context);
    &#160;
    /* Hash – external key(s) */
    typedef uint4 (*mco_uda_hash_extkey_userdef_f)( mco_uda_value_t *keys,
                            uint2 keys_count,
                            void *user_context);
    &#160;</pre>
                </div>
                <p>Note that <code>hash</code> index compare functions return <code>0</code> if and only if two objects (or object and external key) are equal from the index point of view.  This is necessary for <code>hash</code> index operations because hash codes may be equal yet the objects (keys) are not.  When <code href="../../../Programming/C/Core_Functions/Static/UDA/uda_lookup.htm"><a href="../../../Programming/C/Core_Functions/Static/UDA/uda_lookup.htm">mco_uda_lookup()</a></code> is called with a <code>hash</code> index, it will call the user-defined compare function to assure that any matching hash code actually exactly matches the indexed database field value.</p>
                <p>Notice also that the compare functions receive application specific data passed from the caller via the <code>user_context</code> parameter.</p>
                <p>In addition to the compare functions, the UDA API requires a <code>udf</code> map for the internal implementation of index navigation.  This <code>udf</code> map must be allocated and passed to the runtime when the <code>udfs</code> are registered.</p>
                <p>The following function queries the database dictionary to determine the amount of memory to be allocated for the <code>udf</code> map:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_get_udfmap_size( const mco_metadict_header_t * metadict,
                        unsigned short dict_no,
                        /* out */ unsigned int * size);
    &#160;</pre>
                </div>
                <p>Once the compare functions are defined, the <code>mco_uda_userdef_funcs_t</code> structure initialized, and the <code>udf</code> map allocated and its size determined, use the following API to register the <code>udfs</code> with the runtime:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_register_udf( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no,
                    unsigned short index_no,
                    mco_userdef_funcs_h udf_map,
                    mco_uda_userdef_funcs_h udf_entry,
                    void *user_context);
    &#160;</pre>
                </div>
                <p>The following code snippet demonstrates how to register <code>udf</code> compare functions:</p>
                <div class="code-block"><pre>&#160;
    /* allocate udfmap */
    mco_uda_get_udfmap_size(metadict, 0, &amp;udf_map_size);
    &#160;
    udf_map = (mco_userdef_funcs_h) malloc(udf_map_size);
    &#160;
    /* register user-defined compare &amp; hash functions */
    udf_entry.fcomp     = cmp_obj_obj;  /* Object – object compare */
    udf_entry.fcomp_ext = cmp_obj_ext;  /* Object – key compare */
    udf_entry.fhash     = hash_obj;     /* Hash – object compare */
    udf_entry.fhash_ext = hash_ext;     /* Hash – key compare */
    param.fld_no = name_no; /* will pass name_no to compare/hash functions */
    &#160;
    rc = mco_uda_register_udf( metadict,
                     0,
                     Record_no,
                     tudf_no,
                     udf_map,
                    &amp;udf_entry,
                     (void*) &amp;param);
                    &#160;
    if ( MCO_S_OK != rc) 
    {
        printf("Error in mco_uda_register_udf() : %s\n", mco_ret_string(rc, 0));
        exit(0);
    }
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that the user-context parameter <code>param</code> is used by the external key compare functions to call <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> to retrieve the database field value to be compared to the external key value.</p>
                <p>&#160;</p>
                <p>The registration API must be called for all user-defined indexes, before the application makes a call to<a href="../../../Programming/C/Core_Functions/Static/Database_Control/connect.htm"><code> mco_db_connect()</code></a>.</p>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that for shared-memory databases, the <code>udf</code> functions must be registered in <i>each</i> process separately.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>