<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Object Interfaces</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor1081"></a>UDA Object Interfaces</h1>
            <blockquote>
                <h2>UDA Object Interfaces</h2>
                <p>To allocate a new database object call the following API function:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_new( mco_trans_h t,
                unsigned short struct_no,
                const void * oid,
                const mco_uda_value_t * initializers,
                unsigned short initializers_no,
                /* out */ mco_uda_object_handle_t * obj );
    &#160;</pre>
                </div>
                <p>To remove an object from the database call the following API function:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_delete ( mco_uda_object_handle_t * obj );
    &#160;</pre>
                </div>
                <p>To cause an object’s indexes to be created before the transaction in which it is instantiated or updated is commited, call the following API function:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_checkpoint  ( mco_uda_object_handle_t * obj );
    &#160;</pre>
                </div>
                <h2>Put / Get Functions</h2>
                <p>To assign the field value for an object or structure use:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_put( mco_uda_object_handle_p obj,
                unsigned short field_no,
                unsigned short index,
                const mco_uda_value_p value );
    &#160;</pre>
                </div>
                <p>In order to assign the value, the application sets the field type in <code>value-&gt;type</code>. The type must correspond to the DDL type:</p>
                <ul>
                    <li value="1">	for simple types, assign the value (<code>value-&gt;v.u1</code>, <code>value-&gt;v.u2</code>, etc)</li>
                    <li value="2">	for strings, arrays and blobs, set the appropriate pointer to reference the value (<code>value-&gt;v.p.p.c</code>, <code>value-&gt;v.p.p.n</code> or <code>value-&gt;v.p.p.v</code>) and put the size of the value into <code>v.p.len</code></li>
                    <li value="3">	for structure-based fields (<code>MCO_DD_STRUCT</code>), use <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a> to initialize the descriptor <code>v.o</code>; Use the descriptor as the first parameter passed to <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a></li>
                </ul>
                <p><b>Example</b>
                </p>
                <div class="code-block"><pre>    &#160;
    mco_uda_object_handle_t obj;
    MCO_RET rc;
    mco_uda_value_t v;
    ...
    rc = mco_uda_new( t, Rec_class_no,
                 0 /* no oid */,
                0 /* no init.*/,
                 0,
                 &amp;obj);
            &#160;
            v.type = MCO_DD_UINT4;
            v.v.u4 = 100;
            rc = mco_uda_put( &amp;obj, uint4_field_no, 0, &amp;v );
            v.type = MCO_DD_STRING;
            v.v.p.len = 5;
            v.v.p.p.c = "Hello";
            rc = mco_uda_put( &amp;obj, string_field_no, 0, &amp;v );
            v.type = MCO_DD_BLOB;
            v.v.p.len = blob_size;
            v.v.p.p.v = blob_value;
            &#160;
    rc = mco_uda_put( &amp;obj, blob_field_no, 0, &amp;v );
    &#160;</pre>
                </div>
                <p>To get the value of an object’s field:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_get ( const mco_uda_object_handle_p obj,
                unsigned short field_no,
                unsigned short index,
                /* out */ mco_uda_value_t * val );
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that for simple types (integers, float, double) the field value is returned in the corresponding <code>mco_uda_value_t</code> structure field.</p>
                <p>&#160;</p>
                <p>For strings, byte arrays, and blobs, the application needs to allocate a buffer and pass it into the API:</p>
                <p><code>val-&gt;v.p.p.c</code> – <code>MCO_DD_CHAR</code> or <code>MCO_DD_STRING</code></p>
                <p><code>val-&gt;v.p.p.n</code> – <code>MCO_DD_NCHAR_CHAR</code> or <code>MCO_DD_NCHAR_STRING</code></p>
                <p><code>val-&gt;v.p.p.v</code> – <code>MCO_DD_BLOB</code> or <code>MCO_DD_REF</code></p>
                <p>&#160;</p>
                <p>In addition, <code>val-&gt;v.p.size</code> must hold the size of the buffer (in bytes).</p>
                <p>The function copies the field value into the buffer and also returns the actual number of symbols (bytes for blobs) copied in <code>val-&gt;v.p.len</code>.</p>
                <p>It is possible to use the <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> function to receive the size of the buffer in advance. If the pointer (<code>val-&gt;v.p.p.c</code>, <code>val-&gt;v.p.p.n</code> or <code>val-&gt;v.p.p.v</code>) is set to zero, the API just fills out the <code>val.v.p.size</code>, and does not copy the actual value into the buffer.</p>
                <p>For structure-based fields (<code>MCO_DD_STRUCT</code>), the API fills out <code>val-&gt;v.o</code>, that can be used to further pass it into the <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> and gain access to the structure fields.</p>
                <p><b>Example 1</b>
                </p>
                <div class="code-block"><pre>    &#160;
    mco_uda_value_t val;
    val.type = MCO_DD_STRING;
    val.v.p.p.c = 0; /* figure out the actual size we need to allocate
    */
    mco_uda_get(&amp;obj, my_field_no, 0, &amp;val);
    val.v.p.p.c = malloc(val.v.p.size);
    mco_uda_get(&amp;obj, field_no, 0, &amp;val); /* get the value */
    ....&lt;whatever processing is necessary&gt;
    free(val.v.p.p.c); /* free up memory */
    &#160;</pre>
                </div>
                <p><b>Example 2 (strings)</b>
                </p>
                <div class="code-block"><pre>    &#160;
    mco_uda_value_t val;
    val.type = MCO_DD_STRING;
    val.v.p.p.c = 0;
    mco_uda_get(&amp;obj, my_field_no, 0, &amp;val);
    val.v.p.size += sizeof(char);
    val.v.p.p.c = malloc(val.v.p.size ); /* field value size */
    ....&lt;processing results&gt;
    free(val.v.p.p.c); /* */
    &#160;</pre>
                </div>
                <p><b>Example 3 (Unicode strings)</b>
                </p>
                <div class="code-block"><pre>&#160;
    mco_uda_value_t val;
    val.type = MCO_DD_NCHAR_STRING;
    val.v.p.p.c = 0;
    mco_uda_get(&amp;obj, my_field_no, 0, &amp;val);
    val.v.p.size += sizeof(nchar);
    val.v.p.p.c = malloc(val.v.p.size );
    mco_uda_get(&amp;obj, field_no, 0, &amp;val);
    ....&lt;processing results&gt;
    free(val.v.p.p.c);
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> can return <code>MCO_S_NULL_VALUE</code>, in which case nothing is copied to the output parameter.</p>
                <p>&#160;</p>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that null indicator fields are just normal fields, identified by:</p>
                <blockquote>
                    <div class="code-block"><pre>    &#160;
    #define MCO_DICT_FI_NULL_INDICATOR      0x80  /* field is null indicator */
&#160;</pre>
                    </div>
                </blockquote>
                <blockquote>
                    <p>Accordingly, to set (or clear) a <code>nullable</code> field to (from) <code>null</code>, use <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a> on the appropriate <code>null</code> indicator field. Indicator field names (<code>mco_dict_field_info_t.name</code>) are the name of the base field appended with “<code>_indicator</code>”.  The following code snippet illustrates how to retrieve the field info for an indicator field’s base field:</p>
                    <div class="code-block"><pre>    &#160;
    if (field_info.flags &amp; MCO_DICT_FI_NULL_INDICATOR)
     {
        char nullable_fldname[MAX_NAME_LEN];
        mco_dict_field_info_t nullable_field_info;
        strcpy(nullable_fldname, field_info.name);
        nullable_fldname[strlen(nullable_fldname) - strlen("_indicator")] = '\0';
        mco_dict_field_name(metadict, dict_no, struct_no, nullable_fldname,
        &amp;nullable_field_info);
        ...
    }
    &#160;</pre>
                    </div>
                </blockquote>
                <p>&#160;</p>
                <p>To update blob fields it may be more convenient to call the following append API rather than loading the entire blob and then rewriting it:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_blob_append (
        /*IN*/ mco_uda_object_handle_p obj,
        /*IN*/ unsigned short field_no,
        /*IN*/ const void *value,
        /*IN*/ uint4 size);
    &#160;</pre>
                </div>
                <p><b>Example 4 (Append to blob)</b>
                </p>
                <div class="code-block"><pre>&#160;
    mco_uda_object_handle_t obj;
    MCO_RET rc;
    mco_uda_value_t v;
    void *append_value;
    uint4 append_size;
    ...
    rc = mco_uda_new( t, Rec_class_no, 0 /* no oid */,0 /* no init.*/, 0, &amp;obj);
    v.type = MCO_DD_BLOB;
    v.v.p.len = blob_size;
    v.v.p.p.v = blob_value;
    rc = mco_uda_put( &amp;obj, blob_field_no, 0, &amp;v );
    ...
    rc = mco_uda_blob_append( &amp;obj, blob_field_no, append_value, append_size);
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>