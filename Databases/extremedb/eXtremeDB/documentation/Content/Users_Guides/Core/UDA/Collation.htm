<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Collation Implementation</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor1015"></a><a name="kanchor1016"></a>UDA Collation Implementation</h1>
            <blockquote>
                <h2>UDA Collation Implementation</h2>
                <p>Collation support in the <i>e</i>X<i>treme</i>DB core API is explained in section<span style="color: #f08080;"> </span><span>“Character String Collation” in the <a href="../Object_Interfaces/Object_Interfaces_C.htm">Object Interfaces</a> page</span><span>.</span><a name="kanchor1017"></a>  As with the core collation API, the user-defined collations are registered with the runtime before connecting to the database, then essential sorting logic is implemented in the application-supplied compare functions for <code>tree</code> indexes and/or <code>hash</code> indexes.</p>
                <p>To register them with UDA however, it is first necessary to extract the desired collations from the meta-dictionary.  To facilitate this, the UDA Collation API provides dictionary functions to count and extract collation definitions by name and number, as well as to determine the collation map size.</p>
                <p>Then, as with the core collation API, the helper functions, <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_collate_get.htm"><code>mco_uda_collate_get()</code></a> and <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_collate_get_range.htm"><code>mco_uda_collate_get_range()</code></a>, are provided to facilitate the implementation of the user-defined collation compare functions called by the UDA cursor functions.</p>
                <p>The following sample code snippets demonstrate a normal sequence of UDA operations performed by the main application and a UDA collation compare function.</p>
                <p><b>Example 1</b>
                </p>
                <p>Sample schema:</p>
                <div class="code-block"><pre>    &#160;
    class Record
    {
        string name;
        uint4  value;
&#160;
        unique tree &lt;name&gt; tstd;
        unique tree &lt;name collate C1&gt; tcoll;
        hash &lt;name collate C1&gt; hcoll[100];
    };
    &#160;</pre>
                </div>
                <p>Sample UDA collation compare functions and main application:</p>
                <div class="code-block"><pre>&#160;
    int2 coll_cmp(mco_collate_h c1, uint2 len1, mco_collate_h c2, uint2 len2)
    {
        mco_uda_value_t val1, val2;
        char buf1[20], buf2[20];
        &#160;
        /* get first object's value */
        val1.type = MCO_DD_STRING;
        val1.v.p.size = sizeof(buf1);
        val1.v.p.p.c = buf1;
        &#160;
        mco_uda_collate_get(c1, &amp;val1);
    &#160;
        /* get second object's value */
        val2.type = MCO_DD_STRING;
        val2.v.p.size = sizeof(buf2);
        val2.v.p.p.c = buf2;
        &#160;
        mco_uda_collate_get(c2, &amp;val2);
    &#160;
        /* compare values */
        return STR_CMP(buf1, buf2);
    }
    &#160;
    uint4 coll_hash(mco_collate_h c, uint2 len)
    {
        mco_uda_value_t val;
        char buf[20];
        &#160;
        /* get object's value */
        val.type = MCO_DD_STRING;
        val.v.p.size = sizeof(buf);
        val.v.p.p.c = buf;
        mco_uda_collate_get(c, &amp;val);
        &#160;
        /* hash value */
        return strlen(buf);
    }
    &#160;
    int main(void)
    {
        MCO_RET rc;
        ...
        mco_dict_struct_info_t struct_info;
        mco_dict_collation_info_t coll_info;
        mco_uda_value_t value;
        mco_uda_object_handle_t obj;
        char buf[16];
        &#160;
        ...
    &#160;
        /* initialize metadict and register dictionary */
    &#160;
        mco_metadict_size(1, &amp;metadict_size);
        metadict = (mco_metadict_header_t *) malloc(metadict_size);
        mco_metadict_init (metadict, metadict_size, 0);
        mco_metadict_register(metadict, db_name, udacoll_get_dictionary(), 0);
        &#160;
        /* get id numbers of ‘Record’, field ‘name’, index ‘tcoll’ */
        Record_no = get_struct_no("Record");
        name_no   = get_field_no(Record_no, "name");
        tcoll_no  = get_index_no("Record", "tcoll");
        &#160;
        /* get id number of collation ‘C1’ */
        rc = mco_dict_collation_name(metadict, 0, "C1", &amp;coll_info);
        &#160;
        if ( MCO_S_OK == rc ) coll_no = coll_info.collation_no;
    &#160;
        /* allocate collation map */
        mco_uda_get_collmap_size(metadict, 0, &amp;coll_map_size);
        &#160;
        coll_map = (mco_collation_funcs_h) malloc(coll_map_size);
    &#160;
        /* register collation compare &amp; hash functions */
        rc = mco_uda_register_collation(metadict, 
                            0, 
                            coll_no,
                             coll_map,
                            &amp;coll_cmp,
                             &amp;coll_hash);
    &#160;
        /* open the database */
        if ( MCO_S_OK == rc ) 
        {
        &#160;
            /* connect to database */
            rc = mco_db_connect(db_name, &amp;db);
            &#160;
            if ( MCO_S_OK == rc ) 
            {
    &#160;
                /* fill database with records setting field s to fruit names */
                rc = mco_trans_start(db, MCO_READ_ONLY,
                            MCO_TRANS_FOREGROUND, &amp;t);
        &#160;
                if (rc == MCO_S_OK) 
                {
                    /* using custom collate tree index iterate through the cursor */
                    rc = mco_uda_cursor(t, Record_no, tcoll_no, &amp;c);
                    &#160;
                    if (rc == MCO_S_OK) 
                    {
                        for (rc = mco_cursor_first(t, &amp;c);
                        MCO_S_OK == rc;
                        rc = mco_cursor_next(t, &amp;c))
                        {
                            mco_uda_from_cursor(t, &amp;c, &amp;obj);
                            value.type = MCO_DD_STRING;
                            value.v.p.p.c = buf;
                            value.v.p.size = 15;
                            mco_uda_get(&amp;obj, name_no, 0, &amp;value);
                            printf("\n\t%-15s", buf);
                        }
                    }
                }
                rc = mco_trans_commit(t);
            }
        }
    ...
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>