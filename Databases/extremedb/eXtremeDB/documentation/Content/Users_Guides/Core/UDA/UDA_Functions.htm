<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor233"></a>UDA Functions</h1>
            <blockquote>
                <h2>UDA Functions</h2>
                <p>As explained in the <a href="../UDA.htm">introduction</a>, the UDA is a generic API.  So the objects are defined by descriptors that can contain any type of object, and the values stored in them are defined by descriptors that can handle any type of data.</p>
                <p>Instances of database classes are defined by the following generic descriptor:</p>
                <div class="code-block"><pre>    &#160;
    typedef struct tag_mco_uda_object_handle_t_ 
    {
        MCO_Hf obj;                /* internal handle */
        unsigned short struct_no;  /* structure number. It is set by */
        /* functions that return an object*/
        /* descriptor (mco_uda_new, mco_uda_get
        /* etc). */
    } mco_uda_object_handle_t, * mco_uda_object_handle_p;
    &#160;</pre>
                </div>
                <p>An object descriptor can be received:</p>
                <blockquote>
                    <p>1.	When a new object is created (see <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_new.htm"><code>mco_uda_new()</code></a>)</p>
                    <p>2.	From a <code>cursor</code>, after positioning the cursor via the <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_from_cursor.htm"><code>mco_uda_from_cursor()</code></a> API</p>
                    <p>3.	For structure-based fields the <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a>/<a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a> functions return a handle to the structure. Note that this handle is not a real descriptor and can’t be used in certain object related functions (for instance,<a href="../../../Programming/C/Core_Functions/Static/UDA/uda_delete.htm"><code> mco_uda_delete()</code></a> or <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_checkpoint.htm"><code>mco_uda_checkpoint()</code></a>)</p>
                </blockquote>
                <p>A structure of the following typedef <code>mco_uda_value_t</code> is used to contain values (of any data types) for an object’s fields (see <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> / <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a>), and external keys (see <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_lookup.htm"><code>mco_uda_lookup()</code></a> / <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_compare.htm"><code>mco_uda_compare()</code></a> ).</p>
                <div class="code-block"><pre><a name="kanchor234"></a>    &#160;
    typedef struct tag_mco_uda_value_t_ 
    {
        mco_dict_type_t type; /* type:  MCO_DD_... */
        union 
        {
            unsigned char          u1;   /* MCO_DD_UINT1 */
            unsigned short         u2;   /* MCO_DD_UINT2 */
            unsigned int           u4;   /* MCO_DD_UINT4, MCO_DD_DATE,
            * MCO_DD_TIME */
            uint8                  u8;   /* MCO_DD_UINT8, MCO_DD_AUTOID,
            * MCO_DD_AUTOOID */
            char                   i1;   /* MCO_DD_INT1 */
            short                  i2;   /* MCO_DD_INT2 */
            int                    i4;   /* MCO_DD_INT4 */
            int8                   i8;   /* MCO_DD_INT8 */
            float                   f;   /* MCO_DD_FLOAT */
            double                  d;   /* MCO_DD_DOUBLE */
            mco_uda_object_handle_t o;   /* MCO_DD_STRUCT */
            struct 
            {
                unsigned short      size;/* buffer size (in bytes) */
                unsigned short      len; /* string length (in characters)
                * or blob size (in bytes)*/
                union 
                {
                    char    * c;  /* a pointer to the buffer with
                    * MCO_DD_CHAR or MCO_DD_STRING values */
                    nchar_t * n;  /* a pointer to the buffer with */
                    * MCO_DD_NCHAR_CHAR or
                    * MCO_DD_NCHAR_STRING  value */
                    void    * v;  /* pointer to the buffer to receive
                    * MCO_DD_BLOB, MCO_DD_REF or
                    * MCO_DD_OID values */
                } p;              /* pointer to the buffer */
            } p;
        } v;
    } mco_uda_value_t, * mco_uda_value_p;
    &#160;</pre>
                </div>
                <p>In order to use the <code>union</code> to assign values via the <code href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm">mco_uda_put()</a></code>, <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_lookup.htm"><code>mco_uda_lookup()</code></a> and <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_compare.htm"><code>mco_uda_compare()</code></a> functions, the value of the <code>type</code> field has to correspond to the DDL field type. Furthermore:</p>
                <ul>
                    <li value="1">For simple data types (<code>int</code>, <code>float</code>, <code>double</code>), assign the value to either <code>v.u1</code> or <code>v.u2</code>, etc.</li>
                    <li value="2">For strings, arrays and blobs set the pointer to the appropriate pointer type (<code>v.p.p.c</code>, <code>v.p.p.n</code> or <code>v.p.p.v</code>), and specify the size in bytes in <code>v.p.len</code>.</li>
                    <li value="3">For structured fields, <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_put.htm"><code>mco_uda_put()</code></a> initializes the descriptor <code>v.o</code>, which, in turn, is used to set field values for the structure.</li>
                </ul>
                <p>In order to read data out (<a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a>):</p>
                <ul>
                    <li value="1">For simple types (integer, float, double) the value is returned in the appropriate field (<code>v.u1</code>, <code>v.u2</code>, etc.,).</li>
                    <li value="2">For arrays and blobs it is necessary to assign the appropriate type pointer (<code>v.p.p.c</code>, <code>v.p.p.n</code> or <code>v.p.p.v</code>) to the buffer that receives the data first, and specify the size of the data in bytes in <code>v.p.size</code>. <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> copies the value into the buffer (or truncates the output if the buffer is not large enough) and also returns the actual number of bytes received in the <code>v.p.len</code>.</li>
                    <li value="3">For structure fields, <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_get.htm"><code>mco_uda_get()</code></a> first initializes the <code>v.o</code> descriptor that will be used to read the structure field values.</li>
                </ul>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>