<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Registry</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor832"></a>UDA Registry</h1>
            <blockquote>
                <h2>UDA Registry</h2>
                <p>Before using any of the registry functions, the application must allocate space for the meta-dictionary structure and initialize the allocated buffer with the <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_init.htm"><code>mco_metadict_init()</code></a> API.  Because an application may use more than one database, the meta-dictionary is necessary to contain a header and entry for each database dictionary.  The size of the buffer should be obtained via the <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_size.htm"><code>mco_metadict_size()</code></a> function which returns the size of the meta-dictionary in bytes (including the header).</p>
                <div class="code-block"><pre>    &#160;
    void mco_metadict_size( unsigned short n_entries, unsigned int * size );
    &#160;
    typedef struct tag_mco_metadict_header_t_ 
    {
        unsigned short n_maxentries; /* The maximum number of database
        * dictonaries*/
        unsigned short n_allocated;  /* The current number of registered
        * dictionaries */
    } mco_metadict_header_t;
    &#160;
    typedef struct tag_mco_metadict_entry_t_ 
    {
        unsigned short dict_no;   /* dictionary number (starting with 0) */
        unsigned short flags;     /* internal flag */
        char           name[16];  /* dictionary name */
        void         * dict;      /* internal pointer */
        void         * user_data; /* application data */
    } mco_metadict_entry_t;
    &#160;</pre>
                </div>
                <p>Now, the <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_init.htm"><code>mco_metadict_init()</code></a> function can be called to initialize the meta-dictionary.  It must be called before any of the UDA API functions are called.</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_metadict_init ( mco_metadict_header_t * metadict,
                    unsigned int size,
                    unsigned int flags );
    &#160;</pre>
                </div>
                <p>The application needs to allocate the memory buffer and pass the pointer to the buffer along with its size to the<a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_init.htm"><code> mco_metadict_init()</code></a><a name="kanchor833"></a> function.  The database runtime will determine the maximum number of databases that can be registered within the metadictionary.  The application can access this number through the <code>metadict-&gt;n_maxentries</code> field.</p>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that	the <code>mcouda</code> libarary does not allocate any dynamic memory. Therefore, any memory buffers used by the UDA API are allocated by the application. The buffer can either be declared statically or allocated on the heap.  Descriptors are often allocated on the applicationâ€™s stack.</p>
                <p>&#160;</p>
                <p>When databases are created in conventional memory (as opposed to shared memory), the runtime automatically registers (records) all opened databases in the meta-dictionary.  The dictionary name in the meta-dictionary is assigned the database name.</p>
                <p>The flags parameter defines what happens during the initialization of the dictionary. Currently the only supported value is:</p>
                <div class="code-block"><pre>    &#160;
    MCO_METADICT_DONT_LOAD_EXISTING_DBS
    &#160;</pre>
                </div>
                <p>This flag indicates that the automatic registration of opened databases is not done.</p>
                <p>The following API function registers a database dictionary in the meta-dictionary:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_metadict_register ( mco_metadict_header_t * metadict,
                        const char * name,
                        const void * dict,
                        const void * user_data );
                        &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" />Note that 	<a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_init.htm"><code>mco_metadict_init()</code></a> automatically registers open conventional memory databases.  If the database has been opened after the meta-dictionary had been initialized, it can be registered with the <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_register.htm"><code>mco_metadict_register()</code></a> API. It is possible to register database dictionaries before opening the database, or without opening the database (for example, the application might need to just receive the specific schema (dictionary) information).</p>
                <p>&#160;</p>
                <p>It is also possible to register the database dictionary of the current database connection in the meta-dictionary automatically using the following API:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_metadict_register_conn( mco_metadict_header_t * metadict,
                        const mco_db_h connection,
                        const void * user_data );
    &#160;</pre>
                </div>
                <p>Unlike function <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_register.htm"><code>mco_metadict_register()</code></a> this function does not require a pointer to a dictionary structure generated by <code href="../../../Getting_Started/Package_Contents/mcocomp.htm"><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code>. So it is ideal for applications where the database dictionary is not initially known, for example when an application opens a database already created by another application in shared memory.</p>
                <p>Another use case of function <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_register_conn.htm"><code>mco_metadict_register_conn()</code></a> is an application that uses SQL dynamic DDL operations like <code>create table</code>, <code>alter table</code> etc. Since the database table is created or modified by SQL DDL operations it is impossible to use any statically defined data access functions; i.e. the functions generated by <code href="../../../Getting_Started/Package_Contents/mcocomp.htm"><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code>. But it is possible to register such a dictionary in the meta-dictionary and then use the UDA API to access its data. Of course it is necessary to register a dictionary again each time that it is modified. The return code <code>MCO_E_SCHEMA_CHANGED</code> is returned by function <a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/start.htm"><code>mco_trans_start()</code></a> whenever  an SQL operation has changed a database <code>schema</code>. In this case the current connection should be closed and then re-connected again; the newly obtained connection should then be used to register its dictionary in the meta-dictionary.</p>
                <p>To unregister unused dictionary entries in the meta-dictionary the following function is provided:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_metadict_unregister( mco_metadict_header_t * metadict,
                        const char *name);
    &#160;</pre>
                </div>
                <p>This function marks the specified dictionary entry as empty. Once the meta-dictionary is registered, the following API function can be called to get the count of databases registered:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET  mco_metadict_count ( const mco_metadict_header_t * metadict,
                    /* out */ unsigned short * count );
                    &#160;</pre>
                </div>
                <p>As unregistering a dictionary from the meta-dictionary is possible it must be taken into account when querying the dictionaries array. So it is important to keep the original order of dictionary entries registered in meta-dictionary. For this reason function <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_unregister.htm"><code>mco_metadict_unregister()</code></a> just marks a dictionary entry as empty. Function <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_count.htm"><code>mco_metadict_count()</code></a> returns the total count of allocated entries in the meta-dictionary. If dictionary unregister operations were used then it is necessary to check the value returned by function <a href="../../../Programming/C/Core_Functions/Static/UDA/metadict_entry.htm"><code>mco_metadict_entry()</code></a> which indicates whether a dictionary with the specified number actually exists. For example, the following code snippet demonstrates how a loop through entries in a meta-dictionary could be implemented:</p>
                <div class="code-block"><pre>    &#160;
    /* Get total number of registered dictionaries and print out info for each */
    mco_metadict_count(metadict, &amp;count);
    &#160;
    for (dict_no = 0; dict_no &lt; count; ++dict_no) 
    {
        MCO_RET rc;
        mco_metadict_entry_t *entry;
        &#160;
        /* Get dictionary by number and check if it is registered */
        rc = mco_metadict_entry(metadict, dict_no, &amp;entry);
        &#160;
        if (MCO_E_UDA_DICT_NOTFOUND == rc)
            continue;
        &#160;
        /* Process metadictionary entry */
        ...
    }
    &#160;</pre>
                </div>
                <p>Note that the line <code>if (rc == MCO_E_UDA_NOTFOUND) continue;</code>  skips previously unregistered dictionary entries.</p>
                <p>There are API functions to get a pointer to the dictionary based on its number, name, or connection handle:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_metadict_entry( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    /* out */ mco_metadict_entry_t ** entry );
    &#160;
    MCO_RET mco_metadict_entry_name( const mco_metadict_header_t * metadict, 
                        const char * name,
                        /* out */ mco_metadict_entry_t ** entry );
    &#160;
    MCO_RET mco_metadict_entry_conn( const mco_metadict_header_t * metadict,
                        const mco_db_h connection,
                        /* OUT */ mco_metadict_entry_t ** entry );
    &#160;</pre>
                </div>
                <p>The count of structures/classes for a database dictionary can be obtained by:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_dict_struct_count( const mco_metadict_header_t * metadict,
                        unsigned short dict_no,
                        /* out */ unsigned short * count );
    &#160;</pre>
                </div>
                <p>And a pointer to the structure/class based on its number or name by:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_dict_struct( const mco_metadict_header_t * metadict,
                    unsigned short dict_no,
                    unsigned short struct_no,
                    /* out */ mco_dict_struct_info_p struct_info );
    &#160;
    MCO_RET mco_dict_struct_name( const mco_metadict_header_t * metadict,
                        unsigned short dict_no,
                        const char * name,
                        /* out */ mco_dict_struct_info_p struct_info );
                        &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>