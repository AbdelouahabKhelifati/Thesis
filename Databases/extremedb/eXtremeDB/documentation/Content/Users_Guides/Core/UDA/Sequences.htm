<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Sequence Support</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor768"></a>UDA Sequence Support</h1>
            <blockquote>
                <p>To support fields of type <code><a href="../Sequences.htm">sequence</a></code>, three flags are accepted in <code>mco_dict_field_info_t::flags</code> :</p>
                <div class="code-block"><pre>&#160;
    #define MCO_DICT_FI_ASC_SEQUENCE       0x100
    #define MCO_DICT_FI_DESC_SEQUENCE      0x200
    #define MCO_DICT_FI_SEQUENCE           0x400
    &#160;</pre>
                </div>
                <p>If the field type is defined as <code><a href="../Sequences.htm">sequence</a></code> the <code><a href="../../../Programming/C/Core_Functions/Static/UDA/dict_field.htm">mco_dict_field()</a></code> and <code><a href="../../../Programming/C/Core_Functions/Static/UDA/dict_field_name.htm">mco_dict_field_name()</a></code> functions set <code>MCO_DICT_FI_SEQUENCE</code> for it. If the <code><a href="../Sequences.htm">sequence</a></code> is monotonic additionally either <code>MCO_DICT_FI_DESC_SEQUENCE</code> or <code>MCO_DICT_FI_ASC_SEQUENCE</code> is set. A new <code>mco_uda_seq_values_t</code> structure allows retrieving and updating sequence elements:</p>
                <div class="code-block"><pre>&#160;
    typedef struct tag_mco_uda_seq_values_t_ 
    {
        mco_size_t      size;
        mco_dict_type_t elem_type;
        uint2           elem_size; /* for MCO_DD_CHAR */
        union 
        {
            mco_uint1       *u1;
            mco_uint2       *u2;
            mco_uint4       *u4;
            mco_uint8       *u8;
            mco_int1        *i1;
            mco_int2        *i2;
            mco_int4        *i4;
            mco_int8        *i8;
            #ifdef MCO_TARGET_FLOAT_SUPPORTED
                float           *f;
                double          *d;
            #endif
            char            *c;
        } v;
    } mco_uda_seq_values_t;
    &#160;</pre>
                </div>
                <p>Here <code>size</code> is the number of elements in the structure <code>elem_type</code> - the sequence element type - which can be one of the following:</p>
                <div class="code-block"><pre>    &#160;
    MCO_DD_UINT1, MCO_DD_UINT2, MCO_DD_UINT4, MCO_DD_UINT8,
    MCO_DD_INT1, MCO_DD_INT2, MCO_DD_INT4, MCO_DD_INT8,
    MCO_DD_FLOAT, MCO_DD_DOUBLE or MCO_DD_CHAR
    &#160;</pre>
                </div>
                <p>Note that <code>elem_size</code> - the element size - only makes sense for the <code>elem_type == MCO_DD_CHAR.</code></p>
                <p>The <code>union</code> element <code>v</code> -references arrays of the corresponding types (the type is defined by the <code>elem_type</code>). The arrays must be allocated and deallocated by the application</p>
                <p>The function mco_uda_is_sequence() can be called to determine if a field is of type <code><a href="../Sequences.htm">sequence</a></code>:</p>
                <div class="code-block"><pre>&#160;
    mco_bool mco_uda_is_sequence(mco_dict_type_t type); 
    &#160;</pre>
                </div>
                <p>This function returns <code>MCO_YES</code>, if the field is defined as a <code><a href="../Sequences.htm">sequence</a></code> type (i.e. <code>MCO_DD_SEQUENCE_UINT1</code>, <code>MCO_DD_SEQUENCE_FLOAT</code>, etc.).</p>
                <p>&#160;</p>
                <h2>Sequence Functions</h2>
                <p>The sequence wrapper functions correspond to the function generated by the DDL compiler for sequences, such as:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_seq_first(const mco_uda_object_handle_p obj, 
                    unsigned short field_no,/*OUT*/ 
                    mco_uda_value_t *value);
    &#160;
    MCO_RET mco_uda_seq_last(const mco_uda_object_handle_p obj, 
                    unsigned short field_no,/*OUT*/ 
                    mco_uda_value_t *value);
    &#160;
    MCO_RET mco_uda_seq_append(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_uda_seq_values_t *values);
                    &#160;
    MCO_RET mco_uda_seq_insert(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_no_t pos, 
                    mco_uda_seq_values_t *values);
    &#160;
    MCO_RET mco_uda_seq_delete(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_no_t from, 
                    mco_seq_no_t till);
    &#160;
    MCO_RET mco_uda_seq_count(const mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_no_t *count);
                    &#160;
    MCO_RET mco_uda_seq_search(const mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h iterator, 
                    const mco_uda_value_t *low, 
                    mco_seq_boundary_kind_t low_boundary, 
                    const mco_uda_value_t *high, 
                    mco_seq_boundary_kind_t high_boundary);
                    &#160;
    MCO_RET mco_uda_seq_join(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h result, 
                    mco_seq_iterator_h join_with);
                    &#160;
    MCO_RET mco_uda_seq_obj_map(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h dst_iterator, 
                    mco_seq_iterator_h map_iterator);
&#160;
    MCO_RET mco_uda_seq_subseq(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h iterator, 
                    mco_seq_no_t from, 
                    mco_seq_no_t till);
                    &#160;
    MCO_RET mco_uda_seq_iterator(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h iterator);
                    &#160;
    MCO_RET mco_uda_seq_project(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h dst, 
                    mco_seq_iterator_h src);
                    &#160;
    MCO_RET mco_uda_seq_store(mco_uda_object_handle_p obj, 
                    unsigned short field_no, 
                    mco_seq_iterator_h src);
&#160;
    MCO_RET mco_uda_seq_truncate(const mco_uda_object_handle_p udaobj, 
                    unsigned short field_no);
    &#160;</pre>
                </div>
                <p>Each <code>mco_uda_seq_&lt;operation&gt;(const mco_uda_object_handle_p obj, unsigned short field_no, ...)</code> function corresponds to the generated <code>&lt;classname&gt;_&lt;fieldname&gt;_&lt;operation&gt;(&lt;classname&gt; *obj, ...)</code>. Instead of the type-aware parameters the general <code>mco_uda_value_t</code> structure is used.</p>
                <p>For example if the schema defines a <code><a href="../Sequences.htm">sequence</a></code> field as <code>sequence&lt;float&gt;</code>, then</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_seq_first(const mco_uda_object_handle_p obj, 
                unsigned short field_no,
                /*OUT*/ mco_uda_value_t *value);
    &#160;</pre>
                </div>
                <p>corresponds to</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET Classname_fieldname_first(Classname *handle, float* val);
    &#160;</pre>
                </div>
                <p>One small exclusion from the naming convention is the <code>&lt;classname&gt;_&lt;fieldname&gt;_map(...)</code> function. It is called <code>mco_uda_seq_obj_map(...)</code>. (This is to avoid a conflict with the iterator API below.)</p>
                <h3>Example Usage:</h3>
                <p>The following code snippet demonstrates how a sequence of values can be appended to a database object:</p>
                <div class="code-block"><pre>&#160;
    mco_uda_seq_values_t seqvals;
    seqvals.elem_type = MCO_DD_UINT4;
    seqvals.size = seq_size;
    seqvals.v.u4 = malloc(sizeof(uint4) * seqvals.size);
    for (i = 0; i &lt; seqvals.size; ++i) 
    {
        seqvals.v.u4[i] = &lt;...&gt;;
    }
    mco_uda_seq_append(&amp;obj, timestamp_no, &amp;seqvals);
    free(seqvals.v.u4);
    &#160;</pre>
                </div>
                <h2>Iterator API</h2>
                <p>Overall instead of the elements' <code>mco_seq_&lt;operation&gt;_&lt;type&gt;(...)</code> function (such as <code>mco_seq_add_float()</code>, <code>mco_seq_add_uint1()</code> , etc.,) the UDA defines <code>mco_uda_seq_&lt;operation&gt;()</code>. For example <code>mco_uda_seq_add()</code>. Note that the value for the <code>&lt;type&gt;</code> is determined according to the elements' type (if possible). Instead of the type-specific arguments the <code>mco_uda_value_t</code> is used. For example instead of the function</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_next_uint1(mco_seq_iterator_h iterator, uint1 *val);
    &#160;</pre>
                </div>
                <p>The UDA APi defines</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET mco_uda_seq_next(mco_seq_iterator_h iterator, mco_uda_value_t* uda_val);
    &#160;</pre>
                </div>
                <p>The later function assigns <code>MCO_DD_UINT1</code> to the <code>uda_val</code> and returns the element in the <code>uda_val-&gt;v.u1</code>;</p>
                <p>Similarly instead of the arrays of the type-specific values the UDA API uses the generic <code>mco_uda_seq_values_t</code> structure. For example instead of</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_get_float(mco_seq_iterator_h input, float *result, mco_size_t *size);
    &#160;</pre>
                </div>
                <p>use</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_seq_get(mco_seq_iterator_h input, mco_uda_seq_values_t *values);
    &#160;</pre>
                </div>
                <p>The <code>values.size</code> argument takes the place of the <code>size</code>, and <code>values.v.f</code> is the result.</p>
                <p>Overall, the UDA API consists of over a hundred different functions. The entire list can be found in file <code>include/mcouda.h.</code></p>
                <h3>Example Usage:</h3>
                <p>The following example code adds the values of two sequences:</p>
                <div class="code-block"><pre>&#160;
    mco_seq_iterator_t result, it1, it2, cast_it2;
    &#160;
    mco_uda_seq_iterator(&amp;obj, field1_no, &amp;it1); // get iterator for object's field field1
    mco_uda_seq_iterator(&amp;obj, field2_no, &amp;it2); // get iterator for object's field field2
    mco_uda_seq_cast(&amp;cast_it2, it1.elem_type, &amp;it2); // cast elements from field2 to field1's type
    mco_uda_seq_add(&amp;result, &amp;it1, &amp;cast_it2); // add elements of field1 and field2
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>