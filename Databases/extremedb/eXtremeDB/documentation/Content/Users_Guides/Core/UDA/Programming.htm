<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>UDA Programming</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor216"></a>UDA Programming</h1>
            <blockquote>
                <h2>UDA Programming</h2>
                <p>As with all <i>e</i>X<i>treme</i>DB<a name="kanchor217"></a> applications, the runtime must be started and initialized, memory devices defined and an error handler mapped.  Then the Meta-dictionary is initialized and the database opened with <a href="../../../Programming/C/Core_Functions/Static/UDA/uda_db_open.htm"><code>mco_uda_db_open()</code></a>.  The following example demonstrates a typical sequence for opening a database for UDA access:</p>
                <div class="code-block"><pre>    &#160;
    int main(void)
    {
        MCO_RET rc;
        mco_runtime_info_t info;
        mco_device_t dev[4];
        unsigned int n_dev, metadict_size;
        mco_db_params_t db_params;
&#160;
        mco_runtime_start();
        mco_error_set_handler(&amp;sample_errhandler);
&#160;
        mco_get_runtime_info(&amp;info);
        /* initialize memory device(s) */
        dev[0].assignment = MCO_MEMORY_ASSIGN_DATABASE;
        dev[0].size       = DATABASE_SIZE;
        &#160;
        if (info.mco_shm_supported)
         {
            dev[0].type       = MCO_MEMORY_NAMED;
            sprintf( dev[0].dev.named.name, "%s-db", dbName );
            dev[0].dev.named.flags = 0;
            dev[0].dev.named.hint  = 0;
        } 
        else 
        {
            dev[0].type       = MCO_MEMORY_CONV;
            dev[0].dev.conv.ptr = (void*)malloc( DATABASE_SIZE );
        }
&#160;
        n_dev = 1;
        if (info.mco_disk_supported) 
        {
            dev[1].assignment = MCO_MEMORY_ASSIGN_CACHE
            dev[1].size       = CACHE_SIZE;
        &#160;
            if (info.mco_shm_supported) 
            {
                dev[1].type       = MCO_MEMORY_NAMED;
                sprintf( dev[0].dev.named.name, "%s-cache", dbName );
                dev[1].dev.named.flags = 0;
                dev[1].dev.named.hint  = 0;
            } 
            else 
            {
                dev[1].type       = MCO_MEMORY_CONV;
                dev[1].dev.conv.ptr = (void*)malloc( CACHE_SIZE );
            }
&#160;
            /* setup memory device for main database storage */
            dev[2].type       = MCO_MEMORY_FILE;
            dev[2].assignment = MCO_MEMORY_ASSIGN_PERSISTENT;
            sprintf( dev[2].dev.file.name, FILE_PREFIX "%s.dbs", dbName );
            dev[2].dev.file.flags = MCO_FILE_OPEN_DEFAULT;
&#160;
            /* setup memory device for database log */
            dev[3].type       = MCO_MEMORY_FILE;
            dev[3].assignment = MCO_MEMORY_ASSIGN_LOG;
            sprintf( dev[3].dev.file.name, FILE_PREFIX "%s.log", dbName );
            dev[3].dev.file.flags = MCO_FILE_OPEN_DEFAULT;
&#160;
            n_dev            += 3;
        }
&#160;
        /* initialize and customize the database parameters */
        mco_db_params_init ( &amp;db_params );
        db_params.mem_page_size      = MEMORY_PAGE_SIZE;
        db_params.disk_page_size     = PSTORAGE_PAGE_SIZE;
        db_params.db_max_connections = 1;
        &#160;
        /* initialize meta-dictionary for 1 entry */
        mco_metadict_size(1, &amp;metadict_size);
        metadict = (mco_metadict_header_t *) malloc(metadict_size);
        mco_metadict_init (metadict, metadict_size, 0);
&#160;
        /* register dictionary */
        rc = mco_metadict_register( metadict, dbName,
        udaopen_get_dictionary(), 0);
        printf("Register dictionary : %s\n", mco_ret_string(rc, 0));
        printf("Runtime disk support : %s\n",
        (info.mco_disk_supported) ? "yes" : "no");
&#160;
        /* change class persistence */
        patches[0].class_code = get_class_code("InMem");
        patches[0].persistence = MCO_UDA_CLASS_TRANSIENT;
        patches[1].class_code = get_class_code("OnDisk");
        &#160;
        patches[1].persistence = (info.mco_disk_supported) ?
        MCO_UDA_CLASS_PERSISTENT :
        MCO_UDA_CLASS_TRANSIENT;
&#160;
        /* open database */
        rc = mco_uda_db_open(metadict,   /* meta-dictionary header */
                            0,          /* dictionary number */
                            dev,        /* memory devices */
                            n_dev,      /* num of memory devices */
                            &amp;db_params, /* db parameters */
                            patches,    /* class persistence patches */
                            2);         /* num of persistence patches */
                &#160;
        printf("mco_uda_db_open() : %s\n", mco_ret_string(rc, 0));
&#160;
        if (rc == MCO_S_OK) 
        {
            /* destroy the database */
            mco_uda_db_close(metadict, 0);
        }
        &#160;
        mco_runtime_stop();
        if (!info.mco_shm_supported) 
        {
            free( dev[0].dev.conv.ptr );
        }
        if (info.mco_disk_supported)
         {
            free( dev[1].dev.conv.ptr );
        }
    &#160;
        return 0;
    }
    &#160;</pre>
                </div>
                <p>For a better understanding of the UDA API, build and run in the debugger the following SDK samples: <a href="../../../Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaopen.htm">16-UDA-Udaopen</a>, <a href="../../../Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaops.htm">16-UDA-Udaops</a>, <a href="../../../Programming/C/SDK_Samples/Core_Samples/16-UDA_Udapsearch.htm">16-UDA-Udapsearch</a>, and others in this SDK directory.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>