<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>RTree Indexes</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>R-Tree Indexes</h1>
            <blockquote>
                <p>As explained in the <a href="../../../Fundamental_Concepts/Indexes.htm">Indexes</a> page, the <i>e</i>X<i>treme</i>DB <code>rtree</code> index is commonly used to speed spatial searches; for example, find the rectangle that contains this point, find all rectangles that overlap this rectangle, or find all rectangles in the neighborhood of this point. </p>
                <p>All manner of shapes can be stored and searched with the <code>rtree</code> index.  For example, a point is represented as a rectangle with width and height = 1 and a line that has starting and ending coordinates of 15, 844 and 0, 3647 is stored as rectangle with its upper left corner at 15, 844 and its lower right corner at 0, 3647.</p>
                <p>To determine if two lines intersect, or if a point is within a given area (described by a circle, rectangle, etc.), an <code>rtree</code> search is performed to find all overlapping rectangles. For each match, a further test is conducted in the application code to determine whether the condition is actually met. </p>
                <p>For example, consider that we have lines as follows:</p>
                <p>
                    <img src="../../../Resources/Images/rtree.png" />
                </p>
                <p>A search to discover all lines that intersect with (75, 15) (20, 70) would return the rectangle bounding (35, 25) (20, 30) because the rectangles overlap. The application would extract additional information for the object, for example, that it is a line and what its starting and ending coordinates are, and would conclude that this line does not intersect the key line; and would continue to the next overlapping rectangle returned by the index search.</p>
                <p>Note that, any shape with coordinates {(X1, Y1), (X2, Y2), ... (Xn, Yn)} can be stored and searched in this manner. For example, consider a polygon:</p>
                <p>
                    <img src="../../../Resources/Images/rtree2.png" />
                </p>
                <p>Here the X coordinates are <code>35, 55, 65, 70, 85</code> and Y coordinates are <code>30, 33, 35, 45, 50, 63</code>. The bounding rectangle is the rectangle with left top vertex (Xmax,Ymin), and right bottom vertex (Xmin, Ymax) where Xmin = min(Xi), Ymin=min(Yi), Xmax = max(Xi), Ymax=max(Yi). In this case, Xmax = <code>85</code>, Ymin = <code>30</code>, Xmin = <code>35</code>, Ymax = <code>63</code> and our rectangle top left and bottom right is <code>(85, 30)</code> and <code>(35, 63)</code>.</p>
                <p><code>rtree</code> searches can return rectangles that: </p>
                <blockquote>
                    <p>1) exactly match the given coordinates, </p>
                    <p>2) overlap the given coordinates, </p>
                    <p>3) wholly contain the given coordinates, or </p>
                    <p>4) are sorted in order of their distance from a specified reference rectangle or point.</p>
                </blockquote>
                <p>Though rectangle coordinates may be specified in different ways, for example as the two points corresponding to the top left and bottom right, for <code>rtree</code> indexes the rectangles must be specified as arrays of max and min coordinates. For example, a two-dimensional rectangle is represented as an array:</p>
                <div class="code-block"><pre>    &#160;
    xMin,yMin,xMax,yMax
    &#160;</pre>
                </div>
                <p>In other words, using X and Y coordinates as diagrammed above, the <code>&lt;xMin, yMin&gt;</code> coordinates correspond with the lower left point while <code>&lt;xMax, yMax&gt;</code> is the upper right point. A three-dimensional “rectangle” is represented as follows:</p>
                <div class="code-block"><pre>&#160;
    xMin,yMin,zMin,xMax,yMax,zMax
    &#160;</pre>
                </div>
                <h2>Example R-Tree Search</h2>
                <p>To demonstrate <code>rtree</code> index usage, consider the rectangles and point in the diagram below:</p>
                <p>
                    <img src="../../../Resources/Images/rtree3.png" />
                </p>
                <p>The two solid lined rectangles are defined by coordinates <code>&lt;25,25&gt; - &lt;50,35&gt;</code> and <code>&lt;5,45&gt; - &lt;60,65&gt;</code>., the dash-lined rectangles by <code>&lt;20,30&gt; - &lt;85,50&gt;</code> and <code>&lt;45,60&gt; - &lt;10,55&gt;</code>. </p>
                <p>To store these rectangles in a database, we might create a class <i>Boxes</i> with an <code>rtree</code> index like the following: </p>
                <div class="code-block"><pre>    &#160;
    class Boxes
    {
        int2 	square[4];
        &#160;
        rtree &lt;square&gt;  ridx;
    };
    &#160;</pre>
                </div>
                <p>Then we would insert the four rectangles using the API of choice. </p>
                <p>The <code>rtree</code> index allows four <i>types</i> of search operations: <b>equals</b>, <b>contains</b>, <b>overlaps</b> or <b>neighborhood</b>.</p>
                <p>To perform an <code>rtree</code> search, as with other index types, a <code>cursor</code> must first be created. Then, to search the database for a specific rectangle, we would perform a <code>cursor</code> <b>search</b> operation with operation type <b>equals</b> specifying the rectangle (four coordinates) of interest.</p>
                <p>To search for rectangles that overlap a specified rectangle the <b>overlaps</b> operation type is used. For example, a search for the dash-lined rectangle number 3 (<code>&lt;20,30&gt; - &lt;85,50&gt;</code>) in the diagram would “find” the two solid lined rectangles 1 and 2.</p>
                <p>Similarly, to search for rectangles that contain a specified rectangle the <b>contains</b> operation type is used.  For example, a search for the dot-lined rectangle number 4 (<code>&lt;45,60&gt; - &lt;10,55&gt;</code> would “find” only the larger solid lined rectangle number 2 (<code>&lt;5,45&gt; - &lt;60,65&gt;</code>).</p>
                <p>Using the <b>neighborhood</b> operation type will return all rectangles in the index ordered by their distance from the specified rectangle or point. (Note that a point can be specified as either a two-dimensional array of coordinates or as a “degenerate rectangle” where the lower-left and upper-right coordinate values are identical. Though the internal search algorithms, particlularly for <b>overlaps</b> and <b>contains</b> operation types, deal with “boxes”, promoting points to rectangles, in some cases the memory requirements are significantly less for storing points rather than rectangles.)</p>
                <p>In the current example specifying the point <code>&lt;10,10&gt;</code> would return all four inserted rectangles ordered from left to right because the specified point is to the left of each. This search calculates the Euclidean distance from the lower-left (minX, minY) point of the target rectangle (<code>&lt;10,10&gt;</code> in this case) to the closest point in each rectangle in the index and returns the results in order from smallest to largest distance.</p>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that an <code>rtree</code> index <code>cursor</code> has different semantics than a conventional <code>tree</code> (B-Tree) type cursor. Whereas, the <b>search</b> operation of a conventional <code>tree</code> index positions the cursor at the first match, or just before the nearest match in the case of a partial key search, the <code>rtree</code> index cursor operates on the result set of the search. In other words, for an <code>rtree cursor</code>, the cursor operations <b>first</b>, <b>last</b>, <b>next</b> and <b>prev</b> operate within the set of objects that match the given search conditions.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>