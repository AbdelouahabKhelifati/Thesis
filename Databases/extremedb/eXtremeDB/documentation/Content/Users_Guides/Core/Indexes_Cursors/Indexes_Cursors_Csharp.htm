<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|C# API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Indexes and Cursors in C#</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Indexes and Cursors in C#</h1>
            <blockquote>
                <p>As explained in the <a href="../../../Fundamental_Concepts/Indexes.htm">Indexes and Cursors</a> page, <i>e</i>X<i>treme</i>DB  supports a variety of index types. The following sections give implementation details for C# APIs used to manage each of these index types.</p>
                <h2>B-Tree Indexes</h2>
                <p>As explained in the <a href="BTree.htm">B-Tree Indexes</a> page, <code>BTree</code> indexes can be used for ordered (sorted) retrieval, range retrieval.</p>
                <p>A <code>BTree</code> index can be specified in the database class definition by specifying the <code>[Indexable]</code> field attribute which has optional modifiers: </p>
                <ul>
                    <li value="1"><code>Descending</code> - Sort in reverse order - default is ascending order if <code>Descending</code> is not specified</li>
                    <li value="2"><code>Thick</code> - Optimized for a large number of duplicates</li>
                    <li value="3"><code>Unique</code> - true: no duplicate values allowed, or false: allow duplicate values (default if <code>Unique</code> is not specified )</li>
                </ul>
                <p>For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent] 
    class Obj
    {
        [Indexable(Type=Database.IndexType.BTree, Unique=true)] 
        public int value;
    }
    &#160;</pre>
                </div>
                <p>An alternative method to create a <code>BTree</code> index is to specify the <code>[Index]</code> class attribute, which has the same optional modifiers. For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent] 
    [Index("byDept_EmployeeName", Keys = new string[] { "dept_no", "name" }, Unique = false)]
    class Employee
    {
        [Indexable(Type = Database.IndexType.BTree, Unique = true)]
        public String  name;
        public int  dept_no;
    }
    &#160;</pre>
                </div>
                <p>Note that the <code>[Index]</code> class attribute is typically used for multi-field or compound indexes (as in the above case), but it can also be used for a single field index.</p>
                <h3>Cursors and Searches</h3>
                <p>To initiate an "exact match" search for <code>Unique BTree</code> indexes (which enforce the uniqueness constraint), the <i>Cursor</i> method <code>Find()</code> is used. For example:</p>
                <div class="code-block"><pre>&#160;
    Connection con = new Connection(db);
    con.StartTransaction(Database.TransactionType.ReadWrite);
    Cursor&lt;Employee&gt; cursor = new Cursor&lt;Employee&gt;(con, "name");
    Employee emp = cursor.Find("William");
    con. CommitTransaction();
    &#160;</pre>
                </div>
                <p>To initiate a search for non-Unique <code>BTree</code> indexes, the <i>Cursor</i> method <code>Search()</code> is used. For example:</p>
                <div class="code-block"><pre>&#160;
    Connection con = new Connection(db);
    con.StartTransaction(Database.TransactionType.ReadWrite);
    Cursor&lt;Employee&gt; cursor = new Cursor&lt;Employee&gt;(con, "byDept_EmployeeName");
    if (cursor.Search(Operation.GreaterOrEquals, emp1.dept_no, "") )
    {
        foreach (Employee e in cursor)
        {
            // Process Employee object
        }
    }
    con. CommitTransaction();
    &#160;</pre>
                </div>
                <p>The <i>Cursor</i> methods <code>MoveFirst(), MoveLast(), MoveNext()</code> and <code>MovePrev()</code> are used to navigate through the result set of a search operation. Please refer to the <a href="Searches_Csharp.htm">Searches</a> page for further implementation details. </p>
                <h2>Patricia trie Indexes</h2>
                <p>As explained in the <a href="Patricia.htm">Patricia Indexes</a> page, the <i>e</i>X<i>treme</i>DB <code>Patricia</code> index is particularly useful for network and telecommunications applications. A <code>Patricia</code> index can be declared over <code>String</code> fields by specifying the <code>[Indexable]</code> field attribute. It can also be declared <code>Unique</code>; in the absence of the <code>Unique</code> keyword it defaults to allowing duplicates. Unlike other <i>e</i>X<i>treme</i>DB indexes, the <code>Patricia</code> index <i>cannot be compound</i>; it is always declared for a single field. </p>
                <p>For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent] 
    class AreaCode
    {
        [Indexable(Type=Database.IndexType.Patricia)] // Declare patricia index by "areaCode" field
        public String areaCode;
        public int value;
    }
    &#160;</pre>
                </div>
                <h3>Cursors and Searches</h3>
                <p>To initiate an "exact match" search for <code>Unique Patricia</code> indexes (which enforce the uniqueness constraint), the <i>Cursor</i> method <code>Find()</code> is used. For example:</p>
                <div class="code-block"><pre>&#160;
    Connection con = new Connection(db);
    con.StartTransaction(Database.TransactionType.ReadWrite);
    Cursor&lt;AreaCode&gt; cursor = new Cursor&lt;AreaCode&gt;(con, "areaCode");
    AreaCode ac = cursor.Find("360");
    con.CommitTransaction();
    &#160;</pre>
                </div>
                <p>To initiate a search for non-Unique <code>Patricia</code> indexes, the <i>Cursor</i> method <code>Search()</code> is used. For example:</p>
                <div class="code-block"><pre>&#160;
    Connection con = new Connection(db);
    con.StartTransaction(Database.TransactionType.ReadWrite);
    Cursor&lt;AreaCode&gt; cursor = new Cursor&lt;AreaCode&gt;(con, "areaCode");
    if (cursor.Search(Operation.GreaterOrEquals, "360") )
    {
        foreach (AreaCode a in cursor)
        {
            // Process AreaCode object
        }
    }
    con.CommitTransaction();
    &#160;</pre>
                </div>
                <p>The <i>Cursor</i> methods <code>MoveFirst(), MoveLast(), MoveNext()</code> and <code>MovePrev()</code> are used to navigate through the result set of a search operation. Please refer to the <a href="Searches_Csharp.htm">Searches</a> page for further implementation details. </p>
                <p>&#160;</p>
                <h2>RTree Indexes</h2>
                <p>As explained in the <a href="RTree.htm">R-Tree Index</a> page, an <code>RTree</code> index is commonly used to speed spatial searches. An <code>RTree</code> index is typically defined for an array field containing the number of coordinates required to describe a "rectangle". For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent(List=true)] 
    class Rect
    {
        [Dimension(4)]
        [Indexable(Type=Database.IndexType.RTree)] // Declare rtree index on "square" field
        public short[] square;
    }
    &#160;</pre>
                </div>
                <h3>Cursors and Searches</h3>
                <p>As explained in the <a href="RTree.htm">R-Tree Index</a> page, <code>rtree</code> searches are performed using  the <i>Cursor</i> method <code>Search()</code> with  one of the four <i>types</i> of search operations: <code>Equals, Contains, Overlaps</code> or <code>Neighborhood</code>. Please refer to the <a href="Searches_Csharp.htm">Searches</a> page for implementation details.</p>
                <h2>Trigram Indexes</h2>
                <p>As explained in the <a href="Trigram.htm">Trigram Index</a> page, <code>Trigram</code> indexes are  ideal for text searches when the exact spelling of the target object is not precisely known. A <code>Trigram</code> index is typically defined for a <code>String</code> field. For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent(List=true)] 
    class Obj
    {
        [Indexable(Type=Database.IndexType.Trigram)] 
        public String str;
    }
    &#160;</pre>
                </div>
                <h3>Cursors and Searches</h3>
                <p>As explained in the <a href="Trigram.htm">Trigram Index</a> page, <code>Trigram</code> searches are performed using  the <i>Cursor</i> method <code>Search()</code> with  search operation type: <code>Contains</code>. Please refer to the <a href="Searches_Csharp.htm">Searches</a> page for implementation details.</p>
                <p>&#160;</p>
                <h2>Hash Indexes</h2>
                <p>As explained in the <a href="Hash_Autoid.htm" name="kanchor583">Hash and Autoid Indexes</a> page, <code>HashTable</code> indexes are ideal for quick lookup of individual database objects. <code>HashTable</code> indexes can be declared <code>unique=true</code> or <code>unique=false</code> and they require an extra parameter, <code>InitSize</code><a name="kanchor584"></a>. It is an integer number that the runtime uses to allocate the initial hash table for the index. It must be specified but is not required to be exact. For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent] 
    class Record
    {
        [Indexable(Type=Database.IndexType.Hashtable, Unique=true, InitSize=10000)] // Declare unique hash index 
        public int iIdx;
        &#160;
        [Indexable(Type=Database.IndexType.Hashtable, Unique=false, InitSize=10000)] // Declare non-unique hash index  
        public int iSeries;
    }
    &#160;</pre>
                </div>
                <p>Note that the <code>[10000]</code> specification for indexes <code>iIdx</code> and <code>iSeries</code> cause the runtime to allocate initial hash tables with <code>10000</code> “buckets”. </p>
                <h3>Cursors and Searches</h3>
                <p>As explained in the <a href="Hash_Autoid.htm">Hash and Autoid Indexes</a> page, <code>HashTable</code> searches are performed using  the <i>Cursor</i> methods <code>Find()</code> or <code>Search()</code> depending on whether the <code>unique</code> declaration is <code>true</code> or <code>false</code>. Please refer to the <a href="#">Searches</a> page for implementation details.</p>
                <h2>&#160;</h2>
                <h2>List Indexes</h2>
                <p>The <code>List</code> index, like a non-unique <code>HashTable</code>, allows navigation in sequential order (first to last, or last to first) over the unordered list of objects of a class. To create a <code>List</code> index on a class use the <code>[Persistent(List=true)]</code> attribute. For example:</p>
                <div class="code-block"><pre>&#160;
    [Persistent(List=true)] 
    class Rect
    {
        [Dimension(4)]
        [Indexable(Type=Database.IndexType.RTree)] // Declare rtree index on "square" field
        public short[] square;
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>