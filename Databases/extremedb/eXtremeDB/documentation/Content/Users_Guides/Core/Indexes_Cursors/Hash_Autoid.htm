<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Hash and Autoid Indexes</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1><a name="kanchor949"></a>Hash and Autoid Indexes</h1>
            <blockquote>
                <p>As explained in the <a href="../../../Fundamental_Concepts/Indexes.htm">Indexes</a> page, the <i>e</i>X<i>treme</i>DB<![CDATA[  ]]> <code>hash</code> indexes are more efficient for exact match searches than <code>tree</code> indexes within in-memory databases. <i>e</i>X<i>treme</i>DB provides <code>hash</code> index algorithms modified for efficient operations in memory when the associated class is <code>transient</code>. Hash indexes will normally exhibit better average performance, for both insert and lookup operations, than a <code>tree</code> index, but this can depend on the initial hash table size and on key distribution.</p>
                <p>In the ideal case, the <code>hash</code> table will be sized to contain one entry (sometimes called a “bucket”) for each database object being indexed which means that a single <code>hash</code> table lookup (a simple <i>hash function</i> calculation) will suffice to access each database object. But in reality, regardless of the table size, the <i>hash function</i> does not guarantee a unique value and consequently multiple index values can map to the same bucket (called a “conflict”) and a linked list of object pointers (called a “collision chain”) will result.</p>
                <p>So if the number of database objects is known beforehand, this number can be specified in the schema declaration for the index and will result in optimal performance. But if the number of database objects cannot be known with a reasonable degree of confidence, the <i>e</i>X<i>treme</i>DB<a name="kanchor950"></a> runtime will dynamically allocate additional hash table space when needed.</p>
                <p>When declared <code>unique</code> (which is the default), <code>hash</code> indexes can only be used for exact match searches or unordered list retrieval. Exact match searches are performed with the <b>find</b> operation for the chosen API. However, <code>hash</code> indexes can be declared <code>nonunique</code> to allow duplicate values to be stored with the same hash table entry. When declared <code>nonunique</code>, <b>search</b> operations can be performed to select all objects with the specified hash value.</p>
                <p>&#160;</p>
                <h2>Memory Consumption</h2>
                <p>Memory consumption is comparable for <code>tree</code> and <code>hash</code> indexes of <code>transient</code> classes. A rough estimate for a <code>tree</code> index is 10 bytes per entry (exact size depends on the order of insertions or deletions); and H + 8 bytes per entry for a <code>hash</code> index, where the constant H is fixed size space taken by the hash table and can be calculated as E / 5 * 4 where E is the estimated number of hash entries provided by you in the database schema and 5 is a constant hash factor used by <i>e</i>X<i>treme</i>DB.  If reallocation of the hash table is necessary, then the size will be H * 2.</p>
                <p>&#160;</p>
                <h2>Autoid indexes</h2>
                <p>The <code>autoid</code> declaration specifies that a class is stored with a system-generated unique identifier. The <code>autoid</code> is a guaranteed unique value generated by the <i>e</i>X<i>treme</i>DB runtime and stored in an internal <code>hash</code> index. The <code>autoid</code> value for a new database object is inserted into the index hash table <i>at the moment it is created</i> and is never changed. (Note that this is different from other types of indexes. Normally new values are inserted into the index (hash table or tree structure) when the transaction within which these values are created or updated is committed or when a transaction checkpoint is performed.)</p>
                <p>The <code>autoid</code> field is based on an unsigned 64-bit integer. Initially, during the database creation phase, all counters are initialized with zeros. During the database lifetime the counters increase each time a class object is created. <i>e</i>X<i>treme</i>DB never decreases <code>autoid</code> values and never re-uses the same value. However technically it is possible for the counter to overflow and in this case, the counter would start to repeat the values. However note that if <code>autoids</code> are created every millisecond, the counter will not rollover for 6,405,119,470,038 days (over 17 million years)! </p>
                <h2>Object Identifier indexes</h2>
                <p>The C API allows definition of unique Object Identifier (<code>oid</code>) structures that can be highly efficient. Please refer to the <a href="Indexes_Cursors_C.htm">C API Indexes</a> page for further details.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>