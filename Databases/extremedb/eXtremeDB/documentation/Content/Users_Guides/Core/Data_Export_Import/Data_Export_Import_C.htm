<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Data Export and Import in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Data Export and Import in C</h1>
            <blockquote>
                <p>As explained in the <a href="../Data_Export_Import.htm">Data Export and Import</a> page, <i>e</i>X<i>treme</i>DB provides a number of methods to export and import a database snapshot or class. These methods are described in the sections below. Note that, in addition to data export/import operations, <i>e</i>X<i>treme</i>DB provides backup and restore capability for in-memory and persistent databases. (Please view the <a href="../Database_Backup_Restore.htm">Database Backup and Restore</a> page for further details.)</p>
                <h2>Database snapshots</h2>
                <p>To stream an image of an in-memory database (transient objects) to a specified file <i>e</i>X<i>treme</i>DB provides the function <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/save.htm">mco_db_save()</a></code>:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET	mco_db_save(	/*IN*/ void * stream_handle,
                /*IN*/ mco_stream_write output_stream_writer,
                /*IN*/ mco_db_h db);
    &#160;</pre>
                </div>
                <p>Used together with <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/load.htm">mco_db_load()</a></code> an application can implement robust backup and restore capability:</p>
                <div class="code-block"><pre>    &#160;
    MCO_RET	mco_db_load(	/*IN*/ void *stream_handle,
                /*IN*/ mco_stream_read input_stream_reader,
                /*IN*/ const char * dbname,
                /*IN*/ mco_dictionary_h dict,
                /*IN*/ mco_device_t *devices,
                /*IN*/ uint2 n_devices,
                /*IN*/ mco_db_params_t * db_params );
&#160;</pre>
                </div>
                <p>With release 7.1, <i>e</i>X<i>treme</i>DB has simplified the <code>mco_db_save()</code> and <code>mco_db_load()</code> APIs and the former variants <code>mco_inmem_save()</code>, <code>mco_inmem_load()</code>, <code>mco_disk_save()</code>, <code>mco_disk_load()</code> and <code>mco_disk_load_file()</code> have been deprecated.</p>
                <p>The simplified version of <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/save.htm">mco_db_save()</a></code> and <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/load.htm">mco_db_load()</a></code> allow the application to stream database contents to and from a persistent media file, socket, or pipe, with <code>CRC</code> checking, “binary schema evolution” (<code>BSE</code>) support and buffering to allow interruption and restart of the streaming  process.</p>
                <p>(Previously <code>CRC32</code> checking and <code>BSE</code><a name="kanchor378"></a> support were optional and they were enabled by the runtime options <code>MCO_RT_OPTION_DB_SAVE_CRC</code> and <code>MCO_RT_OPTION_DB_SAVE_BSE</code>. With release 7.1 and later <code>CRC</code> and <code>BSE</code> support is automatic, so these runtime options are no longer available. (Note that, to preserve backward compatibility, <code>mco_db_load()</code> is able to load a snapshot saved without <code>CRC</code>. This ability will be removed from future releases.)</p>
                <h3>Exporting in JSON format</h3>
                <p>It is possible to export the entire database contents in JSON format using the <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/json_export.htm">mco_db_json_export()</a></code> function.</p>
                <h2>Saving and Loading individual classes</h2>
                <p>It is sometimes desirable to export/ import only data for an individual database class. The following APIs are provided for this purpose:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_class_save( uint2 class_code, void* stream_handle,
                  mco_stream_write output_stream_writer,
                  mco_db_h db );
&#160;
    MCO_RET mco_class_load( uint2 class_code, void* stream_handle,
                  mco_stream_read input_stream_reader,
                  mco_db_h db );
                  &#160;</pre>
                </div>
                <p>Note that there is no transaction handle for these APIs, but rather the <code>mco_db_h</code> parameter. This is because a transaction is opened implicitly for the save or load operation. For these operations calculation of <code>CRC</code> and Binary Schema Evolution (<code>BSE</code>) are always enabled.</p>
                <p>These APIs are compatible with <code>mco_db_save()</code> and <code>mco_db_load()</code>. This means that the application can save the entire database image with <code>mco_db_save()</code> and later load (or reload) the content of a particular class from the full image. Or it is possible to save the content of only one class with <code>mco_class_save()</code> and then use this image to create a database with <code>mco_db_load()</code>.</p>
                <p>The <code>class_code</code> parameter of <code>mco_class_load()</code> can be set to 0. In this case the class is determined automatically from the image file. (If it is impossible to determine the class from the image file, the error code <code>MCO_E_ILLEGAL_PARAM</code> is returned.)</p>
                <h3>Exporting in JSON format</h3>
                <p>The objects of an individual class can be exported in JSON&#160;format using the generated <code><a href="../../../Programming/C/Core_Functions/Generated/Class/json_get.htm">classname_json_get()</a> <![CDATA[ ]]></code>functions.</p>
                <h2>Saving the database metadata</h2>
                <p>It is possible to save the database Metadata (data layout information in <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> config file format (JSON) suitable for loading into <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> in order to connect to the database as a client application. To save the metadata from a C application use the following APIs:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_db_save_metadata(void* stream_handle, mco_stream_write output_stream_writer,
                        mco_db_h db, mco_bool save_defaults);
    &#160;</pre>
                </div>
                <h2>Saving the database schema</h2>
                <p>It is possible to save the database schema to an external file. From a C application use the following API function:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_db_save_dictionary(void* stream_handle, mco_stream_write output_stream_writer,
                        mco_db_h db);
&#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>XML export and import APIs</h2>
                <p><i>e</i>X<i>treme</i>DB provides a set of C APIs to manage export and import of database data in XML format.  In addition to the common use of <span class="Param">XML</span> interfaces for porting data, these <span class="Param">XML</span> interface functions can be used, for instance, in concert with the <i>e</i>X<i>treme</i>DB event notifications, to cause live data to be shared between <i>e</i>X<i>treme</i>DB and other systems when an object of interest changes in the database. The <span class="Param">XML</span> interfaces can also be used to facilitate simple schema evolution by exporting the database to <span class="Param">XML</span>, adding/dropping fields, indexes, and classes, and importing the saved <span class="Param">XML</span> into the new database.</p>
                <p>Please see the <a href="Data_Export_Import_C_XML.htm">XML APIs</a> page for a detailed  explanation of XML usage in <i>e</i>X<i>treme</i>DB.</p>
                <p>&#160;</p>
                <h2>Saving and Loading the Cache for Persistent Databases</h2>
                <p>Some C applications with persistent or hybrid databases may need to save the contents of the cache. (See the <a href="../Persistent_Databases/Cache_Management/Cache_Management_C.htm">Cache Management</a> page for further details.) The <a href="../../../Programming/C/Core_Functions/Static/Disk_Manager/save_cache.htm"><code>mco_disk_save_cache()</code></a> function is provided to save the current contents of the persistent database cache to the specified file:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_disk_save_cache( mco_db_h con, char const* file_path );
    &#160;</pre>
                </div>
                <p>The <a href="../../../Programming/C/Core_Functions/Static/Disk_Manager/load_cache.htm"><code>mco_disk_load_cache()</code></a> function loads the persistent database cache from the specified file.</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_disk_load_cache(	mco_db_h db, const char* file_path );
    &#160;</pre>
                </div>
                <p>For a detailed discussion of caching behavior see the <a href="../Persistent_Databases/Persistent_Database_IO.htm">Persistent Database I/O</a> page.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>