<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|C# API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using eXtremeDB Database Events and Time-To-Live Features in C#</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Using <i>e</i>X<i>treme</i>DB Database Events and Time-To-Live Features in C#</h1>
            <blockquote>
                <p>As explained in the introduction <a href="../Events_TTL.htm">page</a>, <i>e</i>X<i>treme</i>DB provides  the capability to automatically delete obsolete database objects through the <i>Time-To-Live</i> feature, and to manage database object <b>new</b>, <b>delete</b>, <b>update</b> and <b>checkpoint</b> events.  The C# APIs for these features are explained in the sections below.</p>
                <h2>Time-To-Live</h2>
                <p>The Time-To-Live (TTL) mechanism facilitates automatic deletion of objects according to TTL policies. Two TTL policies are supported: <code>MaxCount</code> and <code>MaxTime</code>. The former sets an object count threshold, while the latter sets an object age threshold. Both policies can be set for a single class at the same time.</p>
                <p>TTL policies are set using class annotations, just as for other <i>e</i>X<i>treme</i>DB properties. (Please note that object age threshold in C# is always specified in microseconds.)</p>
                <div class="code-block"><pre>&#160;
    [TTL(MaxCount=10, MaxTime=5000000)]
    class A
    {
    // ...
    }
    &#160;</pre>
                </div>
                <p>Note that the <code>MaxTime</code> policy relies on the current system time. Changing the system clock will affect this policy. This can have important consequences in a distributed database as explained in the following section.</p>
                <h3>Side effects in a distributed environment</h3>
                <p>For distributed databases in a network (using <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i>) it is important to note that clocks need to be carefully synchronized between machines participating in a cluster when the <code>MaxTime</code> policy is used. Bear in mind the following:</p>
                <blockquote>
                    <p>1.	In the cluster environment, the TTL clock is verified on the transaction initiator side only in the beginning of the commit phase 1. On the remote side the clock time is not verified and the transaction is applied regardless of the actual clock on that node. If the transaction is applied successfully on the remote nodes, the notifications are sent back and the initiator commits the transaction. The databases are kept consistent regardless of the clock on each node (i.e. their content is the same on every node as long as the transactions are committed).</p>
                    <p>2.	It is possible that a node will have some data that violates the node’s TTL requirements — in the example above the clock on the remote node could be far ahead of the clock on the local node where the transaction had been initiated. By the remote node clock the record should’ve been removed, but it is going to be kept in the node’s database regardless.</p>
                    <p>3.	It is also possible that the object would be removed from the node’s database even if the TTL on that node is not expired, because it has expired on a different node. For example, suppose that node1 clock is set to 1 pm and node2 clock is set to 2 pm. The transaction is initiated on the node1 and gets successfully committed to both nodes despite the fact that the TTL for the record expired on the node2. Shortly after the transaction is committed, node2 initiates another transaction and after verifying the TTL condition by its own clock, removes the object just inserted, naturally propagating the delete to the entire cluster. The record is thus short-lived (shorter than expected).</p>
                </blockquote>
                <h2>Event Interfaces</h2>
                <p>The <code>Event</code> attribute defines what events will trigger application notifications. How the application handles the events is determined at run-time by the event handlers. For C# applications only asynchronous events are possible. In asynchronous event handling, the application spawns a separate thread to handle each type of event. The event thread calls the <i>Connection</i> method <code>WaitEvent()</code>. When the event occurs, <i>e</i>X<i>treme</i>DB<a name="kanchor1069"></a> releases the thread. Upon releasing the thread, the runtime continues normal processing, so the handler thread runs in parallel with other threads, until it completes its processing and again calls <code>WaitEvent()</code>.</p>
                <p>There is a small window of possibility for another instance of  the event to occur before the event handler has completed its task and calls <code>WaitEvent()</code> again to wait on the event (events are not queued). This window can be minimized if the handler delegates the processing of the event to yet another thread, allowing the handler thread to immediately wait on the event again.  If this risk of an unhandled event cannot be tolerated,  the application can maintain a separate table of unhandled events.  Asynchronous events are activated after the transaction commits.  If, within the scope of a single transaction, several objects are added, or deleted, or several fields are updated which have event handlers waiting, all the handlers will be activated simultaneously.</p>
                <p>The individual threads to handle each event will have a <code>ThreadProc</code> like the following:</p>
                <div class="code-block"><pre>&#160;
    private class ThreadParams
    {
        public Connection con;
        public string event_name;
        public ThreadParams(Connection con, string EventName)
        {
            this.con = con;
            this.event_name = EventName;
        }
    }
    &#160;
    private static void ThreadProc(object param)
    {
        ThreadParams tp = (ThreadParams)param;
        try
        {
            while (!exit)
            {
                tp.con.WaitEvent(tp.event_name);
            }
        }
        catch (DatabaseError x)
        {
            if (x.errorCode &gt;= 50)
            {
                // Errors
            }
            else
            {
                // Normal return codes including MCO_S_EVENT_RELEASED
            }
        }
    }
    &#160;</pre>
                </div>
                <p>The main application thread will sleep for some milliseconds, then proceed with normal database processing. When terminating, the application will call the <i>Connection</i> method <code>ReleaseAllEvents()</code> and then stop the event handler threads. The event handlers will catch an exception with error code <code>MCO_S_EVENT_RELEASED</code> when the event is released. (See the SDK sample <a href="../../../Programming/Csharp/SDK_Samples/Core_Samples/AsyncEvent.htm"><code>samples/csharp/events/basic</code></a> for further implementation details.) </p>
                <p>C# applications can also handle asynchronous events through the <i>Delegates</i> mechanism by adding handlers to the <i>Connection</i> properties <code>AsynchEvent</code> and <code>AsyncEventError</code> and then calling method <code>StartEventListeners()</code>. (See the SDK sample <code><a href="../../../Programming/Csharp/SDK_Samples/Core_Samples/AsyncDelegate.htm">samples/csharp/events/AsyncDelegate</a></code> for further implementation details.)</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>