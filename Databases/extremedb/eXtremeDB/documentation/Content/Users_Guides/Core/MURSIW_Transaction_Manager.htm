<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The eXtremeDB MURSIW Transaction Manager</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The <i>e</i>X<i>treme</i><a name="kanchor521"></a><a name="kanchor522"></a>DB MURSIW Transaction Manager</h1>
            <blockquote>
                <p>As explained in the <a href="../../Fundamental_Concepts/Concurrency_Control.htm">Fundamental Concepts page</a>, <code>MURSIW</code> is a traditional, lock-based transaction manager implemented as a simple queue.  And it is important to note that when <code>MURSIW</code> is used the only possible <a href="Isolation_Levels.htm">Isolation level</a> is <code>MCO_SERIALIZABLE</code>. The processing of transactions by <code>MURSIW</code> can be affected by setting <a href="Transaction_Priorities_Scheduling.htm">Transaction Priorities</a> and/or <a href="Transaction_Priorities_Scheduling.htm">Transaction Scheduling Policy</a>.</p>
                <h2>Upgrading transactions</h2>
                <p>As <code>MURSIW</code> uses a queue to process transactions, when a transaction <b>upgrade</b> API&#160;is called in the context of an <code>MCO_UPDATE</code>  transaction, the upgrade is guaranteed to succeed. However, if there is already an <code>MCO_UPDATE</code> transaction in the queue or running, when a second <code>MCO_UPDATE</code> transaction is requested by the application, the transaction <b>start</b> API will block until the first <code>MCO_UPDATE</code> transaction has been completed (committed or rolled back).</p>
                <p>To explain the logic within the <code>MURSIW</code> transaction manager implementation consider the following scenarios:</p>
                <h3>Scenario #1</h3>
                <p>If there is a single <code>MCO_READ_ONLY</code> transaction running, and the upgrade is requested,  the transaction will be immediately promoted to <code>MCO_READ_WRITE</code>, even if there is another <code>MCO_READ_WRITE</code> transaction in the queue.</p>
                <h3>Scenario #2</h3>
                <p>If there are two (or more) <code>MCO_READ_ONLY</code> transactions running and one of them requests an upgrade (calls <code>mco_trans_upgrade()</code>), its status in the queue will be changed to <code>UPDATE</code> and it will be suspended until the other <code>MCO_READ_ONLY</code> transactions are committed or rolled back, then it will be promoted to <code>MCO_READ_WRITE</code> and continue executing (even if there are one or more <code>MCO_READ_WRITE</code> transactions in the queue).</p>
                <h3>Scenario #3</h3>
                <p>If there are two (or more) <code>MCO_READ_ONLY</code> transactions running and two (or more) of them request an upgrade (calls <code>mco_trans_upgrade()</code>), the first to request it will succeed and the other(s) will fail.  The first will have its status in the queue changed to <code>UPDATE</code> and it will be suspended until the other<code> MCO_READ_ONLY</code> transactions are committed or rolled back, then it will be promoted to<code> MCO_READ_WRITE</code>  and continue executing (even if there are one or more <code>MCO_READ_WRITE</code> transactions in the queue).</p>
                <h3>Scenario #4</h3>
                <p>There are no other transactions running or in the queue when an <code>MCO_UPDATE</code> transaction is started. The transaction enters the queue and is immediately scheduled with <code>UPDATE</code> status. Any other transaction (read or write) will be queued. When the <b>upgrade</b> API is called there may be other <code>MCO_READ_ONLY</code> or <code>MCO_READ_WRITE</code> transactions in the queue, but the <code>MCO_UPDATE</code> will be immediately promoted to <code>MCO_READ_WRITE</code>, even if the transactions that entered the queue after it are of a higher priority.</p>
                <h3>Scenario #5</h3>
                <p>There is already a transaction running or in the queue with status <code>UPDATE</code> when the transaction <b>start</b> API is called with transaction type <code>MCO_UPDATE</code>. In this case the transaction <b>start</b> API will block until the <code>MCO_UPDATE</code> transaction and all other transactions ahead of it in the queue have completed (committed or rolled back), then the transaction will execute with status <code>UPDATE</code>.</p>
                <h3>Scenario #6</h3>
                <p>There is already a transaction in the queue with status <code>UPDATE</code> when the <b>upgrade</b> API is called for a transaction of type <code>MCO_READ_ONLY</code>. In this case the <b>upgrade</b> API will return error code  <code>MCO_E_UPGRADE_FAIL</code>.</p>
                <p>So, the transaction types and concurrency with <code>MURSIW</code> can be summarized in the following table, where <code>Y</code> means that transactions of this type can run concurrently and <code>N</code> means that they run in serial:</p>
                <table style="border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: collapse;margin-left: 0;margin-right: auto;">
                    <col />
                    <col />
                    <col />
                    <col />
                    <tbody>
                        <tr>
                            <td>&#160;</td>
                            <td>MCO_READ_ONLY</td>
                            <td>MCO_READ_WRITE</td>
                            <td>MCO_UPDATE*</td>
                        </tr>
                        <tr>
                            <td>MCO_READ_ONLY</td>
                            <td style="text-align: center;">Y</td>
                            <td style="text-align: center;">N</td>
                            <td style="text-align: center;">Y</td>
                        </tr>
                        <tr>
                            <td>MCO_READ_WRITE</td>
                            <td style="text-align: center;">N</td>
                            <td style="text-align: center;">N</td>
                            <td style="text-align: center;">N</td>
                        </tr>
                        <tr>
                            <td>MCO_UPDATE</td>
                            <td style="text-align: center;">Y</td>
                            <td style="text-align: center;">N</td>
                            <td style="text-align: center;">N</td>
                        </tr>
                    </tbody>
                </table>
                <p>* after  the transaction <b>start</b> API is called and before  the <b>upgrade</b> API is called; after  the <b>upgrade</b> API the semantics are the same as <code>MCO_READ_WRITE</code>.</p>
                <p>
                    <img src="../../Resources/Images/note.png" /> Note that a transaction may read, insert, update or delete a single object or many objects, even thousands, depending on the applicationâ€™s needs. When processing blocks of objects in a single transaction it might happen that an object is deleted, but then before committing the transaction the same object is accessed again. If this occurs the read (get) or update (put) operation, or any other access such as locating the object in a cursor or generating XML on the object, will cause a fatal error code of  <code>MCO_ERR_OBJECT_HANDLE+N</code> where <code>N</code> is a line number in the source code that identifies the exact point where the invalid handle was detected. In order to avoid this fatal error C applications can call the function <code>mco_is_object_deleted()</code> to determine if the object was deleted within the current transaction.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>