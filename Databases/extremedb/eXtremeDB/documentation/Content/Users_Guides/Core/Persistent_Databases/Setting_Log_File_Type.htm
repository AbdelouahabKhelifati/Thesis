<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Setting the Transaction Log File Type</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <div class="TopicContent">
                <h1>Setting the Transaction Log File Type</h1>
                <blockquote>
                    <p>As explained in the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page, database log file updates are performed automatically by the <i>e</i>X<i>treme</i>DB <i><a name="kanchor70"></a><a name="kanchor935"></a>Disk Manager</i><a name="kanchor71"></a><a name="kanchor936"></a> whenever persistent data is written to the database. In the event of a hardware or software failure, the runtime can recover the database using this log. Log file updates clearly do not affect read performance but write performance will be affected because exactly one write to the file system is required for each database transaction.</p>
                    <p>The application determines the format of the log file by setting the database open parameter <code>LogType</code>  to one of the following:</p>
                    <ul>
                        <li value="1"><code>NoLog</code> – Non-transactional mode; log file updating is disabled</li>
                        <li value="2"><code>RedoLog</code> - Standard Write Ahead Logging (WAL), also often referred to as <i>Deferred Modifications Logging</i> with limited transaction size</li>
                        <li value="3"><code>UndoLog</code>- Immediate Modifications Logging</li>
                    </ul>
                    <p>The application must choose this <code>LogType</code>  when the database and the log files are created and continue using the same <code>LogType</code> for the life of the database (except when <code>NoLog</code> is specified, see below) because different log file formats are not interchangeable. Also, there are log file parameters specific to the log file type selected. </p>
                    <p>Some implementation details for each of these modes are described in the sections below. For further details please see the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page. Links to the pages describing the specific native language APIs for setting the log type are provided in the <a href="#Setting">table below</a>.</p>
                    <h2>The Non-transactional Mode (NoLog) </h2>
                    <p><i style="font-weight: bold;">Note that this mode is UNSAFE</i>. If this option is selected, log file updating is turned off, and a log file is not created. This will significantly increase update performance, but the application will not be able to recover the database in the event of a crash, and transaction rollback is also not available. This mode can be useful when the application needs to quickly populate the database file. But it is not recommended to use this option under any other circumstances.</p>
                    <p>
                        <img src="../../../Resources/Images/note.png" /> Note that once the database file is created, the database can be re-opened in either of the transactional modes described below.</p>
                    <h2>Write Ahead Logging or Deferred Modifications Algorithm (RedoLog) Implementation</h2>
                    <p>Write Ahead Logging (WAL) is a standard approach to transaction logging. (Please refer to the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page for a detailed discussion of the <code>RedoLog</code> policy.)</p>
                    <p>When the <code>RedoLog</code> policy is used all pages modified by a transaction are "pinned" in memory. Therefore, the transaction size is limited by the size of the page pool. Quite often this limitation prevents applications (and <span style="color: #000000;font-style: italic;font-weight: normal;">xSQL</span>) from performing operations such as creating tables or indexes. The transaction size is effectively limited by the available memory.</p>
                    <p>The optimizations discussed here make it possible, in many cases, to allow transactions larger than the pool page size. The basic idea behind these optimizations is that newly allocated pages are written directly to the database file instead of the log file (when necessary). These pages do not break the database consistency because all references to the new pages (such as root pages that contain index headers, bitmap pages) are still kept in memory until the transaction is committed. During the commit, the database file is updated (committed) to the media first. This guarantees that all new pages are preserved on the media. Then the <code>RedoLog</code> commit takes its normal course; i.e. the modified pages are written to the log, the log is committed (flushed) and then the modified pages are written to the database.</p>
                    <p>There are pros and cons to this optimization: on the plus side, new pages are written to disk only once instead of two times as in the default version of the algorithm (only the database file is updated); on the other hand, the <code>flush()</code> has to be called twice as both the database file and the log file must be committed to the media during the transaction commit.</p>
                    <p>The use cases that benefit from this optimization include creating new tables and creating new indexes (SQL operations <code>create table</code>, <code>create index</code>). However when the index is very large the header pages must still be pinned into the cache. Also when large scale modifications are performed (for example, in SQL, updating all records of a large table (<code>update T set x=x+1</code>), the optimization does not provide any benefits.</p>
                    <p>Internally, this mechanism is always enabled when it is necessary to start replacing pages in the pool; i.e. when new pages are pushed out to the database file unconditionally. In C applications, this optimization is enabled by setting the <a href="../../../Programming/C/Structures/Database_Open_Modes.htm"><code>mode_mask</code></a> flag <code>MCO_DB_REDO_LOG_OPTIMIZATION</code>. (It is not enabled by default.)</p>
                    <p>(The <span style="color: #000000;font-style: italic;font-weight: normal;">xSQL </span><code><a href="../../xSQL/Startup_Options/Config_File_Sections/Db_Params.htm">mode_mask</a></code> flag can be set through the configuration file. The optimization is turned off by default.)</p>
                    <h3>Log file size control with REDO log mode</h3>
                    <p>When using <code>REDO</code> mode, the log file size is limited with parameter <code>redo_log_limit</code>. This is a field of <code>log_params</code> structure - part of <code>dbparams</code>.</p>
                    <p>There is a corresponding <code>xSQL.cfg</code> option for this parameter:</p>
                    <div class="code-block"><pre>    &#160;
    # Log settings (mco_db_params_t::log_params)
    log_params: {
    ...
        # mco_log_params_t::redo_log_limit, unsigned
        redo_log_limit : 16m,
    ...
    &#160;</pre>
                    </div>
                    <p>The default limit is <code>16Mb</code>. The actual file size when it will be truncated is 2 times the <code>redo_log_limit</code>, so the default is <code>32M</code> of actual disk file size.</p>
                    <h2>Immediate Modifications Logging (UndoLog policy)</h2>
                    <p>As explained in the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page, when the <code>UndoLog</code> policyis used, the log file contains entries that allow the current transaction’s updates to be un-done. </p>
                    <p>The advantages of using Undo Logging are that the algorithm never runs out of memory and provides easy and efficient recovery. However this policy typically has slower performance than <code>RedoLog</code> because, when committing to persistent media, all updates are written to the database file which are usually random access and thus are slower than writes to the log file.</p>
                    <p>&#160;</p>
                    <h2>Choosing the Log File Type</h2>
                    <p>In addition to the guidelines for choosing the proper logging strategy presented in the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page, below are further tips to determine the best log file type for a specific application it is helpful to consider the two following general application categories:</p>
                    <blockquote>
                        <p><b>Type 1: Long Transactions</b>
                        </p>
                        <blockquote>
                            <p>Long-running transactions</p>
                            <p>Performance insensitive at commit</p>
                            <p>Space-constrained transactional environments</p>
                        </blockquote>
                    </blockquote>
                    <p>&#160;</p>
                    <blockquote>
                        <p><b>Type 2: Short Transactions</b>
                        </p>
                    </blockquote>
                    <blockquote>
                        <blockquote>
                            <p>Short transactions (OLTP systems)</p>
                            <p>Fast commit—throughput and latency sensitive applications</p>
                        </blockquote>
                    </blockquote>
                    <p>Generally <b>Type 1</b> applications will use <code>UndoLog</code> logging, whereas <b>Type 2</b> applications will use <code>RedoLog</code> logging. Though the choice of log file type can impact performance, and <code>RedoLog</code> logging will be faster, application performance is more directly affected by the choice of when to flush data to persistent media. This is determined by the <i><a name="kanchor72"></a><a name="kanchor937"></a>Transaction Commit Policy</i> which is explained in the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page. First it is important to understand what <a href="../Transaction_Control.htm">database transactions</a> are and how they are managed.</p>
                    <p>&#160;</p>
                    <h2><a name="Setting"></a>Setting the log file type and parameters</h2>
                    <p class="BodyParagraph">The APIs for setting the log file type and parameters are specific to the programming language used. Please use the links below to view detailed explanations and examples for your development environment:</p>
                    <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                        <col class="TableStyle-FunctionReference-Column-Column2" style="width: 51px;" />
                        <col class="TableStyle-FunctionReference-Column-Column2" />
                        <tbody>
                            <tr class="TableStyle-FunctionReference-Body-Body1">
                                <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Log_File_Type_Parameters/Log_File_Type_Parameters_C.htm">C</a>
                                </td>
                                <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Setting the log file type and parameters in C</td>
                            </tr>
                            <tr class="TableStyle-FunctionReference-Body-Body1">
                                <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Log_File_Type_Parameters/Log_File_Type_Parameters_Cpp.htm">C++</a>
                                </td>
                                <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Setting the log file type and parameters in C++</td>
                            </tr>
                            <tr class="TableStyle-FunctionReference-Body-Body1">
                                <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Log_File_Type_Parameters/Log_File_Type_Parameters_Java.htm">Java</a>
                                </td>
                                <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Setting the log file type and parameters in Java</td>
                            </tr>
                            <tr class="TableStyle-FunctionReference-Body-Body1">
                                <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Log_File_Type_Parameters/Log_File_Type_Parameters_Csharp.htm">C#</a>
                                </td>
                                <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Setting the log file type and parameters in C#</td>
                            </tr>
                            <tr class="TableStyle-FunctionReference-Body-Body1">
                                <td class="TableStyle-FunctionReference-BodyB-Column2-Body1"><a href="Log_File_Type_Parameters/Log_File_Type_Parameters_Python.htm">Python</a>
                                </td>
                                <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Setting the log file type and parameters in Python</td>
                            </tr>
                        </tbody>
                    </table>
                </blockquote>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>