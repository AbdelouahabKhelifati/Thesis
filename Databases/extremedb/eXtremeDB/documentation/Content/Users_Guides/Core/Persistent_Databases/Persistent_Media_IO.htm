<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Persistent Media I/O</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Persistent Media I/O</h1>
            <blockquote>
                <p>As explained in the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page, there are two aspects of writing data to consider: performance and recovery in the case of system failure. To allow for recovery of the database in the case of a system failure, the <i>e</i>X<i>treme</i>DB<a name="kanchor835"></a> runtime uses a log file in addition to the database file(s) for persistent databases.</p>
                <p>The following diagram illustrates the write process:</p>
                <p>
                    <img src="../../../Resources/Images/Disk_IO_2.PNG" />
                </p>
                <p>Non-buffered I/O is slow, so file I/O is usually buffered so that the database <b>write</b> operation does not write data directly to the persistent media but rather to the file system buffer. Then the file system will “flush” buffered data to the persistent media during a file system <b>commit</b> or <code>_sync()</code>.</p>
                <p><i>e</i>X<i>treme</i>DB provides three options to affect the performance of this <b>write</b> process: in addition to the  <i>Log File Type</i> and the <i><a name="kanchor836"></a>Transaction Commit Policy</i> discussed in  the <a href="Persistent_Database_IO.htm">Persistent Database I/O</a> page, <i>e</i>X<i>treme</i>DB provides the option of <a href="#Asynchro">Asynchronous file I/O</a> (AIO as described in the section below). AIO determines the manner in which the file system processes write requests.  Also, <i>e</i>X<i>treme</i>DB support for multifile and RAID devices is described in the <a href="#Multi-fi">Multi-File</a> section below.</p>
                <p> (Please see the <a href="#Native">Native Language APIs</a> section for implementation details.)</p>
                <p>&#160;</p>
                <h2><a name="Asynchro"></a>Asynchronous file I/O</h2>
                <p>Asynchronous file I/O sends an I/O request to the kernel then the calling thread continues processing until the kernel signals to the thread that the I/O operation is complete. For large database transactions, AIO is a good way to optimize processing efficiency. However, for relatively fast I/O operations, the overhead of processing kernel I/O requests and kernel signals may make it less beneficial, particularly if many fast I/O operations need to be made.</p>
                <p>The <i>e</i>X<i>treme</i>DB asynchronous I/O mode implementation is optimized by grouping and reordering updates to make sure that multiple updates are synchronized with the media at once. Note that AIO stores disk operations in an in-memory queue and doesn't flush them on each commit. Thus, in case of a hardware failure that data will not be written to the disk and, after the recovery, the database could be missing some of the most recently committed (from the application's point of view) transactions. However, even if this occurs, the database will always remain in a consistent state.</p>
                <p> AIO is presented primarily as a server-side feature. Servers don't normally allow applications to access the database directly. The access is mostly through a remote protocol. By default, AIO is disabled. But there are APIs to enable, start and stop AIO.</p>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that the asynchronous I/O is not currently available for shared memory databases.</p>
                <p>&#160;</p>
                <h2><a name="Multi-fi"></a>Multi-file databases</h2>
                <p><i>e</i>X<i>treme</i>DB supports three types of multi-file devices for persistent databases:</p>
                <ul>
                    <li value="1"><i>multifile</i>: which can be considered a virtual file consisting of multiple segments. When the first segment is full, we start filling of the second one and so on...  For all segments except the last one size should be specified. The last segment can grow infinitely.</li>
                    <li value="2"><i>RAID-0</i> (striping): blocks are scattered between RAID segments.  For example in case of RAID-0 with two segments, the first block is written to the first segment, second - to the second, third - to the first and so on.  RAID-0 can help to improve performance: for example each RAID device could be a separate disk (that should be controlled by a separate controller).  But RAID-0 does not provide extra redundancy.</li>
                    <li value="3"><i>RAID-1</i> (mirroring): data is copied to all RAID segments. So if the RAID consists of three segments, then the same data will be stored in all three segments (redundancy level 3).  RAID-1 provides better reliability (in the case of a disk crash it is possible to use data on one of the other disks).  It also improves read performance since read requests can be balanced between different disks.</li>
                </ul>
                <p>File segments are defined in the memory device array passed to the database <b>open</b> call. For <i>multifile</i> implementations, segments can be added at runtime by means of the <b>extend</b> function.  Multi-file segments cannot be removed.</p>
                <p>&#160;</p>
                <h2><a name="Native"></a>Native Language APIs</h2>
                <p class="BodyParagraph">Please use the links below to view the details for your development environment:</p>
                <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 176px;" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Media_IO/Media_IO_C.htm">C</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Persistent Media I/O in C</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Media_IO/Media_IO_Cpp.htm">C++</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1"> Persistent Media I/O    in C++</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Media_IO/Media_IO_Java.htm">Java</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Persistent Media I/O     in Java</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Media_IO/Media_IO_Csharp.htm">C#</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Persistent Media I/O    in C#</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Media_IO/Media_IO_Python.htm">Python</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Persistent Media I/O   in Python</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1"><a href="../../xSQL/xSQL_Media_IO.htm">xSQL</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1"><i>xSQL</i> Persistent Media I/O</td>
                        </tr>
                    </tbody>
                </table>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>