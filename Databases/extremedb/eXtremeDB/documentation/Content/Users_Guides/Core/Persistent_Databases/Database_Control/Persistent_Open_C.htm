<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Create/Open Persistent Databases in C</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Create/Open Persistent Databases in C</h1>
            <blockquote>
                <p class="BodyParagraph"> To create or open a persistent database, the application first specifies <a href="../../Database_Control/Devices_C.htm">memory device(s)</a>, and database parameters that are then passed to the <code><a href="../../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code> API.</p>
                <p>The database parameters are specified in a <code><a href="../../../../Programming/C/Structures/Database_Parameters.htm">mco_db_params_t</a></code><a name="kanchor779"></a> structure that consists of many elements to determine runtime behavior. The <code><a href="../../../../Programming/C/Core_Functions/Static/Database_Control/params_init.htm">mco_db_params_init()</a></code> API is called to initialize the database parameters with default values. </p>
                <p>The key elements of this structure for persistent databases are:</p>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mem_page_size</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The size in bytes of the database object and index pages</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">disk_page_size</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The size of the persistent storage page for this database (Must be a power of two and at least eight times the <code>mem_page_size</code></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">db_max_connections</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The total number of connections allowed to the database</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">disk_max_database_size</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The max disk space required</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">file_extension_quantum</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The allocation block size for the database runtime to use when increasing the size of database file (can help to reduce file fragmentation)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">db_log_type</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The database log file type (Must be one of the following values:  <code>REDO_LOG</code> ,  <code>UNDO_LOG</code> or  <code>NO_LOG)</code></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">log_params</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Initial log settings specified in the <code><a href="../../../../Programming/C/Structures/Log_Parameters.htm">mco_log_params_t</a></code></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mode_mask</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The database open mode flags</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">license_key</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Normally this is not specified. But, if required, a license key is provided by <i>McObject Support</i></td>
                        </tr>
                    </tbody>
                </table>
                <h2>Parameter Settings</h2>
                <p>Please refer to the general guidelines discussed in the <a href="../../Creating Databases.htm">Creating Databases</a> page for determining the proper values for structure elements <code>mem_page_size, disk_page_size, db_max_connections, disk_max_database_size</code> and <code>db_log_type</code>. </p>
                <p>For C applications there are some additional factors to be aware of which are discussed in the following sections.</p>
                <h3>disk_max_database_size and  File Extension Quantum</h3>
                <p>The maximum database size is passed as a parameter to <code><a href="../../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code>. Depending on the target platform, this parameter might be an unsigned long integer value, or an unsigned long long integer. (In either case, it is of type <code>mco_offset_t</code> which can be found in <code>mco_spec.h</code>. The sentinel value <code>MCO_INFINITE_DATABASE_SIZE</code> can be passed if the maximum database size is not known.</p>
                <p>The  <code>disk_max_database_size</code> element specifies the maximum amount of persistent media space consumed.  The database run-time will report <code>MCO_E_DISK_SPACE_EXHAUSTED</code> or <code>MCO_ERR_DISK_SPACE_EXHAUSTED</code> to the transaction that causes this threshold to be exceeded (depending on whether the release or debug libraries, respectively are linked in). The <code>file_extension_quantum</code> element is used to determine the amount of persistent media space to allocate when extending a file (up to <code>disk_max_database_size</code>).  By making this a multiple of the <code>disk_page_size</code> file fragmentation can be reduced and locality of references may be improved.</p>
                <p>The function <code><a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/info.htm">mco_disk_info()</a></code> can be used to collect information about the current state of the database and log file: the size of the log file in bytes, the size of the database file in bytes and the amount of space that is actually used in the database file. </p>
                <h3><a name="kanchor780"></a>Log Parameters and Transaction Commit Policy</h3>
                <p>The <a href="../../../../Programming/C/Structures/Log_Parameters.htm"><code>log_params</code></a> element is a structure that allows fine tuning the logging strategy. (see <a href="../Setting_Log_File_Type.htm">Setting the Log File type</a> for a more detailed discussion).</p>
                <p> The log file size is set  by calling <a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/set_log_params.htm">mco_disk_set_log_params()</a>. (This function must be called after <a href="../../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm"><code>mco_db_open_dev()</code></a> which establishes the transaction logging policy). </p>
                <p>Applications set the commit policy by calling the <code>mco_disk_transaction_policy()</code> function with one of the following values: <code>MCO_COMMIT_SYNC_FLUSH, MCO_COMMIT_BUFFERED, MCO_COMMIT_DELAYED</code>, or <code>MCO_COMMIT_NO_SYNC</code>. (Please see the <a href="../Persistent_Database_IO.htm">Persistent Database I/O</a> page for detailed explanations.)</p>
                <p>Note that if the <code>MCO_COMMIT_NO_SYNC</code> policy is selected, the application can explicitly force the cache to be flushed to the media by calling function <code><a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/flush.htm">mco_disk_flush()</a></code>.</p>
                <p>
                    <img src="../../../../Resources/Images/note.png" /> Note that	<code><a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/flush.htm">mco_disk_flush()</a></code>must be called outside the scope of a transaction. If called from inside a transaction, it will return an error code.</p>
                <h3>Recovering Unused Data Storage Space</h3>
                <p><a name="kanchor781"></a><a name="kanchor782"></a>When the MVCC transaction manager is used, in the case of a crash, a persistent database can contain undeleted old versions and working copies of database objects.  Their presence will not break the consistency of the database and doesn't prevent the normal working of an application, but does unnecessarily consume space. Detecting these stale object versions requires a complete scan of the database. For this reason the recovery process doesn't perform this function automatically.  Instead, the removal of the unused versions is performed explicitly by calling the <a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/vacuum.htm"><code>mco_disk_database_vacuum()</code></a> function:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_disk_database_vacuum(mco_db_h con);
    &#160;</pre>
                </div>
                <p>Note that <a href="../../../../Programming/C/Core_Functions/Static/Disk_Manager/vacuum.htm"><code>mco_disk_database_vacuum()</code></a> requires exclusive access to the database, so no operations can be performed on the database until the vacuum operation is complete and the function has returned control back to the application.</p>
                <p>Alternatively, the application can enable the repair process by setting the <code>MCO_DB_MODE_MVCC_AUTO_VACUUM</code> mode mask in the <code><a href="../../../../Programming/C/Structures/Database_Parameters.htm">mco_db_params_t</a></code> when calling <a href="../../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm"><code>mco_db_open_dev()</code></a>.</p>
                <h2>Mode mask</h2>
                <p>The <code>mode_mask</code> element is a bitmask used to specify any combination of runtime options. (See <a href="../../../../Programming/C/Structures/Database_Open_Modes.htm">Database Open Modes</a> for a detailed description of the possible options).</p>
                <h2>Database Creation Example</h2>
                <p class="BodyParagraph">Typical application code to create a persistent database could look like the following:</p>
                <div class="code-block"><pre>    &#160;
    #define  DATABASE_SEGMENT_SIZE 300 * 1024
    #define  MEMORY_PAGE_SIZE 128
    #define PSTORAGE_PAGE_SIZE 4096
    char * db_name = "diskdb";
    &#160;
    int main(int argc, char* argv[])
    {
        MCO_RET            rc;
        mco_device_t       dev[4];
        mco_db_params_t    db_params;
        ...
        mco_runtime_start();
        ...
        mco_db_params_init ( &amp;db_params );
        db_params.mem_page_size      = MEMORY_PAGE_SIZE; /* Set page size for the in-memory part */
        db_params.disk_page_size     = PSTORAGE_PAGE_SIZE;  /* Set page size for persistent storage */
        db_params.db_max_connections = 1;                /* Set total number of connections to the database */
        db_params.db_log_type        = UNDO_LOG;            /* Set log type */
        ...
        rc = mco_db_open_dev(db_name, diskdb_get_dictionary(), dev, 4, &amp;db_params );
        if ( MCO_S_OK == rc ) {
            // Connect to database and perform database operations
            ...
            mco_db_close(db_name);
        }
        ...
        mco_runtime_stop();
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>