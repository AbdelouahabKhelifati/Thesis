<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Binary Fields</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <div class="TopicContent">
                <h1>Binary Fields</h1>
                <blockquote>
                    <p>Binary data can be stored in <i>e</i>X<i>treme</i>DB fields of type <code>string, blob,</code> <code>binary</code> and <code>varbinary</code>. Fields of type <code>blob</code> can be used for large data fields (greater than 1 Kb). When a field is not intended to be used in indexes and its data size is less than 64 Kb <code>string</code> fields can be used. <code>String</code> fields in <i>e</i>X<i>treme</i>DB can contain arbitrary data, not only ASCII characters; i.e. arbitrary binary data can be stored in a <code>string</code> without encoding. The only limitation is that <code>string</code> fields cannot be used in internal comparisons (needed for indexes) and cannot be passed as parameters in <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>. If a field of binary data is intended to be indexed, the <code>binary</code> or <code>varbinary</code> data type can be used. Unlike <code>blob</code> fields, <code>binary</code> and <code>varbinary</code> fields can be added to both simple and compound indexes.</p>
                    <p>(See page <a href="../Using_Binary_Data.htm">Using Binary Data</a> for further details.)</p>
                    <h2>Blob Support</h2>
                    <p><i>e</i>X<i>treme</i>DB provides support for Binary Large Object (<code>blob)</code> fields through C/C++ interface functions and, for C# and Java applications, the <code>blob</code> field annotation or attribute. A <code>blob</code> field cannot be part of an <code>array</code> or <code>struct</code>. Blob elements are useful when it is necessary to keep streaming data, with no known size limits. </p>
                    <p>C/C++ applications use the generated <code><i>classname_fieldname</i>_get()</code> function to copy <code>blob</code> data to an application’s buffer; it allows specification of a starting offset within the <code>blob</code>.</p>
                    <div class="code-block"><pre>&#160;
    MCO_RET classname_fieldname_get( /*IN*/ classname *handle,
                /*IN*/ uint4 startOffset,
                /*OUT*/ char *buf,
                /*IN*/ uint4 bufsz,
                /*OUT*/ uint4 *len);
                &#160;</pre>
                    </div>
                    <p>The <code>bufsz</code> parameter is the size of the buffer passed by the application in the <code>buf</code> parameter. The <code>len</code> output parameter is the actual number of bytes copied to the buffer (which will be <code>&lt;= bufsz</code>).</p>
                    <p>The <code><i>classname_fieldname</i>_size()</code> function returns the size of a <code>blob</code> field. This value can be used to allocate sufficient memory to hold the <code>blob</code>, prior to calling the <code><i>classname_fieldname</i>_get()</code> function.</p>
                    <div class="code-block"><pre>&#160;
    MCO_RET classname_fieldname_size( /*IN*/ classname *handle,
                /*OUT*/ uint4 * result);
                &#160;</pre>
                    </div>
                    <p>The <code><i>classname_fieldname</i>_put()</code> function populates a <code>blob</code> field, possibly overwriting prior contents. It allocates space and copies data from the application’s buffer; the size of the <code>blob</code> must be specified.</p>
                    <div class="code-block"><pre>&#160;
    MCO_RET classname_fieldname_put( /*IN*/ classname *handle,
                /*IN*/ const void *from,
                /*IN*/ uint4 nbytes);
                &#160;</pre>
                    </div>
                    <p>The <code><i>classname_fieldname</i>_append()</code> function is used to append data to an existing <code>blob</code>. This method is provided so an application does not have to allocate a single buffer large enough to hold the entire <code>blob</code>, but rather can conserve memory by writing the <code>blob</code> in manageable pieces.</p>
                    <div class="code-block"><pre>&#160;
    MCO_RET classname_fieldname_append(/*IN*/ classname *handle,
                /*IN*/ const void * from,
                /*IN*/ uint4 nbytes );
                &#160;</pre>
                    </div>
                    <p>To erase (truncate) a <code>blob</code>, pass a size of 0 to the <code><i>classname_fieldname</i>_put()</code> function.</p>
                </blockquote>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>