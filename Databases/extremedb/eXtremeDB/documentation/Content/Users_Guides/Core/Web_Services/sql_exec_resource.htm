<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The api/sql/exec Resource</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The <code>api/sql/exec</code> Resource</h1>
            <blockquote>
                <p>The <code>api/sql/exec</code> resource is requested using an HTTP&#160;POST with a SQL statement or statements to be executed, and a response is returned that consists of a query result set or the number of rows affected depending on the SQL statement(s) executed.</p>
                <h3>For an overview see page <a href="McoREST_Resources_Responses.htm"><i>e</i>X<i>treme</i>DB Web Service Resources</a></h3>
                <p>An example <code>api/sql/exec</code> request could be submitted  using <code>curl</code> as follows:</p>
                <div class="code-block"><pre>&#160;
    curl -X POST --data-raw '{ "sql": "SELECT * FROM Statistic" }' http://localhost:8083/api/sql/exec
            
    &#160;</pre>
                </div>
                <p>Note that on Windows it might be necessary to escape the embedded double quote character as follows:</p>
                <div class="code-block"><pre>&#160;
    curl -X POST --data-raw "{ \"sql\": \"SELECT * FROM Statistic\" }" http://localhost:8083/api/sql/exec
    &#160;</pre>
                </div>
                <h2>Request</h2>
                <p>The client submits SQL code to execute and execution parameters as JSON-encoded HTTP content. The <code>/api/sql/exec</code> request can also specify the optional <code>max_records</code>, <code>max_array</code> and <code>max_sequence</code> parameters. For example:</p>
                <div class="code-block"><pre>&#160;
    {
        "sql": "SELECT * FROM Statistic",
        "max_records": 100,
        "max_array": 10,
        "max_sequence": 10
    }
    &#160;</pre>
                </div>
                <p>These parameters specify the maximum sizes of the returned result set, arrays, and sequences respectively. Their default values are 100, 10, and 10.</p>
                <p>The <code>sql</code> parameter contains the SQL statement(s) to execute. It may consist of multiple statements, separated by semicolons. If there are multiple statements, they are executed sequentially, and execution is aborted in case of a failure.</p>
                <p>If the SQL text starts with <code>select</code> (case-insensitive), it is executed as a query, and a result set is returned. Otherwise it is executed as a non-query statement, and only the number of affected rows is returned.</p>
                <h2>Response</h2>
                <p>The result is returned as a JSON object containing a single array <code>result</code>. Each executed SQL statement has a corresponding record in this array. There are two types of records, <code>stmt</code> and <code>query</code> which is returned in the <code>type</code> field of the record.</p>
                <h3>Non-query Statement Result Records</h3>
                <p>These records have only two fields: <code>type</code> (which is set to <code>stmt</code>) and <code>rows_affected</code>, which specifies the number of affected rows, as returned by the SQL engine. For example:</p>
                <div class="code-block"><pre>&#160;
    {
        "result":
        [
            ...
            {
                "type": "stmt",
                "rows_affected": 1
            }
            ...
        ]
    }
    &#160;</pre>
                </div>
                <h3>Query Result Records</h3>
                <p>These records are more complex than the statement results. They contain the <code>type</code> field (which is set to <code>query</code>) and the <code>data</code> object, which encapsulates the returned result set. The <code>data</code> object consists of a <code>header</code> and a <code>resultset</code>. The <code>header</code> contains the metadata for the <code>resultset</code> which consists of:</p>
                <ul>
                    <li value="1"><code>resultset_size</code>: the total size of the result set</li>
                    <li value="2"><code>fields</code>: an array consisting of the <code>name</code> and <code>type</code> of each columns in the result set </li>
                </ul>
                <p>Note that the <code>resultset_size</code> value can be greater than the number of records returned, which is limited by the <code>max_records</code> parameter.</p>
                <p>The <code>resultset</code> field is an array,  each of whose elements is an array containing the values of the columns in the same order specified by the <code>fields</code> array in the <code>header</code>. For example:</p>
                <div class="code-block"><pre>    &#160;
    {
        "result":
        [
            ...
            {
                "type": "query",
                "data":
                {
                    "header":
                    {
                        "resultset_size": 4,
                        "fields":
                        [
                            { "name": "i", "type": "Int4" },
                            { "name": "s", "type": "String" }
                        ]
                    },
                    "resultset":
                    [
                        [ 1, "string1" ],
                        [ 2, "string2" ],
                        [ 3, "string3" ],
                        [ 4, "string4" ]
                    ]
                }
            }
            ...
        ]
    }
    &#160;</pre>
                </div>
                <h3>Datetime fields</h3>
                <p>For fields of type <code>datetime</code>, the <code>precision</code> is output in the <code>resultset</code> header. For example, consider a table <i>DateTimeTable</i> with a single datetime field <code>dt</code>. The table values could be extracted with a command like the following:</p>
                <div class="code-block"><pre>&#160;
    curl -X POST http://localhost:8083/api/sql/exec
        {"sql":"SELECT dt FROM DateTimeTable;"}
        &#160;</pre>
                </div>
                <p>The result will display the <code>precision</code> of <code>dt</code> in output like the following:</p>
                <div class="code-block"><pre>&#160;
    {
        "result":
        [
            {
                "sql": "SELECT dt FROM TestDateTimeTable;",
                "type": "query",
                "data":
                {
                    "header":
                    {
                        "fields":
                        [
                            {
                                "name": "dt",
                                "type": "DateTime",
                                "precision": 1
            
                            }
                        ]
                    },
                    "resultset":
                    [
                        [100000000]
                    ]
                }
            }
        ]
    }
    &#160;</pre>
                </div>
                <h3>Error records</h3>
                <p>If an error occurs during the execution of a statement, an error record is returned, and further execution is aborted. In this case the error record will be the last in the result array, and it will be the only error record.</p>
                <p>The error records contain the <code>type</code> field (<code>query</code> or <code>stmt</code>, corresponding to the failed SQL statement) and the error object. The error <code>code</code> and <code>message</code> are passed from the SQL engine verbatim. (Error codes are defined in the <code>ErrorCode</code> enumeration in the <code>sql/exceptions.h</code> header.) The following is a sample error record:</p>
                <div class="code-block"><pre>&#160;
    {
        "result":
        [
            ...
            {
                "type": "stmt",
                "error":
                {
                    "code": 3,
                    "message": "Compiler error at position 20: Unknown table inexistent\nDROP TABLE inexistent;\n                 ^\n"
                }
            }
        ]
    }
    &#160;</pre>
                </div>
                <h2>Request and response sample</h2>
                <p>Suppose that the following SQL statements are to be executed:</p>
                <div class="code-block"><pre>&#160;
    CREATE TABLE T(i INT, s STRING);
    INSERT INTO T(i, s) VALUES(1, 'string1'), (2, 'string2'), (3, 'string3'), (4, 'string4');
    SELECT * FROM T;
    DROP TABLE T;
    &#160;</pre>
                </div>
                <p>The request body would be as follows:</p>
                <div class="code-block"><pre>    &#160;
    {
        "sql": "CREATE TABLE T(i INT, s STRING);\nINSERT INTO T(i, s) 
            VALUES(1, 'string1'), (2, 'string2'), (3, 'string3'), (4, 'string4');\n
            SELECT * FROM T;\nDROP TABLE T;\n"
    }
    &#160;</pre>
                </div>
                <p>And the response body returned would be as follows:</p>
                <div class="code-block"><pre>&#160;
    {
        "result":
        [
            {
                "type": "stmt",
                "rows_affected": -1
            },
            {
                "type": "stmt",
                "rows_affected": -1
            },
            {
                "type": "query",
                "data":
                {
                    "header":
                    {
                        "resultset_size": 4,
                        "fields":
                        [
                            {
                                "name": "i",
                                "type": "Int4"
                            },
                            {
                                "name": "s",
                                "type": "String"
                            }
                        ]
                    },
                    "resultset":
                    [
                        [
                            3,
                            "string3"
                        ],
                        [
                            2,
                            "string2"
                        ],
                        [
                            1,
                            "string1"
                        ],
                        [
                            4,
                            "string4"
                        ]
                    ]
                }
            },
            {
                "type": "stmt",
                "rows_affected": -1
            }
        ]
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>