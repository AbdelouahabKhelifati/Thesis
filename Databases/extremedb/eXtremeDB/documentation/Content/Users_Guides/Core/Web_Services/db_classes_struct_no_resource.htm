<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The api/db/&lt;dbname&gt;/classes/&lt;struct_no&gt; Resource</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The <code>api/db/&lt;dbname&gt;/classes/&lt;struct_no&gt;</code> Resource</h1>
            <blockquote>
                <p>The <code>api/db/&lt;dbname&gt;/classes/&lt;struct_no&gt;</code> resource executes the following operations for HTTP <code>GET</code>, <code>POST</code> and <code>DELETE</code>:</p>
                <ul>
                    <li value="1"><code>GET</code>: Shows the schema for the specified <code>struct_no</code></li>
                    <li value="2"><code>POST</code>: Writes records to the database</li>
                    <li value="3"><code>DELETE</code>: Deletes all records of the specified class</li>
                </ul>
                <h3>For an overview see page <a href="McoREST_Resources_Responses.htm"><i>e</i>X<i>treme</i>DB Web Service Resources</a></h3>
                <h1>GET</h1>
                <p>With the REST&#160;server started (listening on port 8083), the following http request will display the schema for the specified <code>class</code>:</p>
                <div class="code-block"><pre>&#160;
    GET&#160;http://localhost:8083/api/db/xsqldb/classes/0
            
    &#160;</pre>
                </div>
                <p>The response displays the schema for the specified <code>class</code> in the following format:</p>
                <div class="code-block"><pre>&#160;
    {
        "schema":

        {
    
            "struct_no": 0,
            "name": "I",
            "flags": 9,
            "flags_s":
            [
                "MCO_DICT_SI_CLASS",
                "MCO_DICT_SI_LIST"
            ],
            "class_code": 1,
            "fields"
            [
    
                {
    
                    "field_no": 0,
                    "name": "i",
                    "type": 6,
                    "type_s": "MCO_DD_INT4",
                    "flags": 64,
                    "flags_s":
                    [
                        "MCO_DICT_FI_NULLABLE"
  
                    ]
                },
    
                {
    
                    "field_no": 1,
                    "name": "s",
                    "type": 16,
                    "type_s": "MCO_DD_STRING",
                    "flags": 64,
                    "flags_s":
                    [
                        "MCO_DICT_FI_NULLABLE"
  
                    ]
                },
  
            ],
            "indexes"
            [
    
                {
                    "index_no": 0,
                    "name": "list_index_",
                    "flags": 21,
                    "flags_s":
                    [
                        "MCO_DICT_II_UNIQUE",
                        "MCO_DICT_II_LIST",
                        "MCO_DICT_II_TREE"
                    ],
                    "index": 0,
                    "n_keys_estimate": 0,
                    "fields":
                    [
                    ]
                }
            ],
            "events"
            [
    
            ]    
        }

    }
&#160;</pre>
                </div>
                <h1>POST</h1>
                <p>The <code>POST</code>&#160;request writes records to the database. All records are written in the context of a single transaction. In case of a failure, the transaction is rolled back and the database is returned to its previous state; and an HTTP error is returned. On success, HTTP status <code>200</code> is returned.</p>
                <p>The request body is a JSON object. The records are passed as an array of JSON objects, where keys correspond to the records' field names. For example, a single record with an integer field <code>i</code> and a string field <code>s</code> could be inserted with the following JSON object:</p>
                <div class="code-block"><pre>&#160;
    {
        "records":
        [
            {
                "i": 3,
                "s": "test"
            }
        ]
    }
    &#160;</pre>
                </div>
                <p>Field values must be appropriate for the field types in the database. The web service does not attempt to implicitly cast JSON strings to integer fields, or vice versa. Floating-point values are likewise not rounded to integers. The following are the JSON formatting rules for <i>e</i>X<i>treme</i>DB data types:</p>
                <ul>
                    <li value="1">Scalar integer and floating point values: JSON numerics</li>
                    <li value="2">Date and time values: timestamps as JSON numerics</li>
                    <li value="3">Boolean values: JSON <code>true</code> or <code>false</code> literals</li>
                    <li value="4">ASCII fixed- and variable-length strings: JSON strings</li>
                    <li value="5">Wide and double-byte (<code>wchar</code>, <code>nchar</code>) strings: JSON hex-encoded strings (e.g. <code>"7400650073007400"</code> for string <code>"test"</code> when encoded using the <code>UTF-16-LE</code> encoding)</li>
                    <li value="6">Fixed- and variable-length binary: JSON hex-encoded strings (e.g. <code>"0a0b0c0d"</code>)</li>
                    <li value="7">Blobs: JSON hex-encoded strings</li>
                    <li value="8">Structures: JSON objects with keys for field names, just like class records</li>
                    <li value="9">Arrays and vectors: JSON arrays: <code>[1, 2, 3]</code></li>
                    <li value="10">Sequences: JSON arrays: <code>[1, 2, 3]</code></li>
                </ul>
                <p>For example, consider the following table:</p>
                <div class="code-block"><pre>    &#160;
    CREATE TABLE T4(pk INTEGER PRIMARY KEY, str STRING, bin BINARY(3), 
        arr ARRAY(INTEGER), seq SEQUENCE(CHAR(4)), b BOOLEAN);
        &#160;</pre>
                </div>
                <p>The following request inserts 2 records (note that omitted fields are stored as nulls):</p>
                <div class="code-block"><pre>&#160;
    POST http://localhost:8083/api/db/xsqldb/classes/3
    {
        "records":
        [
            {
                "pk":1, "str": "string1", "bin": "010203", "arr": [1,2,3,4], 
                "seq": ["AAAA", "BBB", "CC", "D"], "b": false
            },
            {
                "pk":2, "str": "string2", "b": true
            }
        ]
    }
    &#160;</pre>
                </div>
                <h1>DELETE</h1>
                <p>The <code>DELETE</code> request deletes all records of the specified class. For example, the following request deletes all objects of the class with <code>class_code = 3</code>:</p>
                <div class="code-block"><pre>&#160;
    DELETE http://localhost:8083/api/db/xsqldb/classes/3
    &#160;</pre>
                </div>
                <p>On success, the following is returned: </p>
                <div class="code-block"><pre>&#160;
    200 OK
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>