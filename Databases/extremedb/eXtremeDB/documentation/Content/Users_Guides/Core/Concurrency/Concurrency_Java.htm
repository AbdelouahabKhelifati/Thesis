<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Java API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Database Concurrency and Transaction Management in Java</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Database Concurrency and Transaction Management in Java</h1>
            <blockquote>
                <p>As explained in the <a href="../Transaction_Control.htm">Transaction</a> and <a href="../Concurrency_Transaction_Managers.htm">Concurrency</a> control pages, applications use <a href="#Transact">transaction blocking</a> for all database access. This allows the <i>e</i>X<i>treme</i>DB <code><a href="#Transact2">transaction managers</a></code> to schedule and process all database operations, whether they involve simple <code>ReadOnly</code> access or <code>ReadWrite</code> operations that modify database objects.</p>
                <h2><a name="Transact"></a>Transaction blocking</h2>
                <p>An <i>e</i>X<i>treme</i>DB transaction block consists of a set of database operations enclosed within a transaction <b>start</b> and <b>commit</b> or <b>rollback</b>. In C# applications, transactions are started by calling one of two versions of the <i>Connection</i> method <code>startTransaction()</code>: the first version accepts a single argument of type <code>Database.TransactionType</code> which can be one of the following:</p>
                <ul>
                    <li value="1"><code>Exclusive</code> - for single-process, single-threaded applications only</li>
                    <li value="2"><code>ReadOnly</code> - for <code>READ_ONLY</code> database access</li>
                    <li value="3">
                        <p><code>ReadWrite</code> - for performing database updates</p>
                    </li>
                    <li value="4"><code>Update</code> - for reading with the intention to possibly update the database</li>
                </ul>
                <p>The second version differs in that it allows setting the <code>TransactionPriority</code> and the <code>IsolationLevel</code> for the transaction. As explained in the <a href="../Transaction_Priorities_Scheduling.htm">Transaction Priorities and Scheduling</a> page, the transaction priority can be one of the following:</p>
                <ul>
                    <li value="1"><code>AboveNormal</code> - </li>
                    <li value="2"><code>Background</code> -</li>
                    <li value="3"><code>Foreground</code>-</li>
                    <li value="4"><code>Highest</code> -</li>
                    <li value="5"><code>Idle</code> -</li>
                </ul>
                <p>As explained in the <a href="../Isolation_Levels.htm">Isolation Levels</a> page, the isolation level can be one of the following:</p>
                <ul>
                    <li value="1"><code>Default</code> -</li>
                    <li value="2"><code>ReadCommitted</code> -</li>
                    <li value="3"><code>RepeatableRead</code> -</li>
                    <li value="4"><code>Serializable</code> -</li>
                </ul>
                <p>When the first version of  <code>startTransaction()</code> is called, the transaction isolation level is set to the default which is <code>Serializable</code> for <code><a name="kanchor475"></a>MURSIW</code> and <code>RepeatableRead</code> for <code><a name="kanchor476"></a>MVCC</code>.  (Note that if <code>MURSIW</code> is used the only possible level is <code>Serializable</code>.)</p>
                <h3>Transaction Commit and Rollback</h3>
                <p>To commit  a transaction call the <i>Connection</i> method <code>commitTransaction()</code>; to discard any database operations since the <code>startTransaction()</code>,call <code>rollbackTransaction()</code>. The <code>commitTransaction()</code> method has two versions: the first requires no argument, the second allows specifying the phase (<code>1</code> or <code>2</code>) for a two-phase commit (see below.)</p>
                <h2><a name="Transact2"></a>Transaction Managers</h2>
                <p>As explained in the <a href="../../../Fundamental_Concepts/Concurrency_Control.htm">Fundamental Concepts page</a>, <i>e</i>X<i>treme</i>DB offers three transaction managers to meet varying application demands and concurrency strategies. The choice of transaction manager can have a significant performance impact on applications. But fortunately, changing transaction managers is simply a matter of changing the transaction manager library loaded by the application when the <i>Database</i> is instantiated. Please use these links to view implementation details of the <a href="../MURSIW_Transaction_Manager.htm"><code>MURSIW</code></a> and <a href="../MVCC_Transaction_Manager.htm"><code>MVCC</code></a> transaction managers. The EXCL(usive) transaction manager is not supported for Java applications. </p>
                <p><a name="kanchor477"></a>In Java applications, the transaction manager library, as are all other libraries, are loaded dynamically at runtime. As <code><a href="../MURSIW_Transaction_Manager.htm">MURSIW</a></code> is the default transaction manager, no special action is required to load it. However, to load the <code><a href="../MVCC_Transaction_Manager.htm"><code>MVCC</code></a></code> library the <i>Database.Mode</i> property <code>MVCCTransactionManager</code> must be passed to the <i>Database</i> constructor. Also, the debug version of the <code><a href="../MVCC_Transaction_Manager.htm"><code>MVCC</code></a></code> library can be specified by the additional <i>Database.Mode</i> property <code>DebugSupport</code>. (If <code>DebugSupport</code> is not specified, then the release mode versions of all libraries are loaded.)</p>
                <p>For example the following code snippet will load the debug version of <code><a href="../MVCC_Transaction_Manager.htm">MVCC</a></code>:</p>
                <div class="code-block"><pre>&#160;
    Database.Mode mode = Database.Mode.MVCCTransactionManager | Database.Mode.DebugSupport;
    Database db = new Database(mode);
    &#160;</pre>
                </div>
                <p>Note that it is recommended to use the debug version of <i>e</i>X<i>treme</i>DB libraries during development, then switch to the release mode libraries for final release.</p>
                <h2>Setting the Transaction Priority and Scheduling Policy</h2>
                <p>As explained in the <a href="../Transaction_Priorities_Scheduling.htm">Transaction Priorities and Scheduling</a> page, applications can adjust the  transaction priority and scheduling policy at runtime. The transaction priority is specified in the call to <code>StartTransaction()</code>. Applications can explicitly define the <code>MURSIW</code> scheduling policy by setting the desired <code>Database.TransSchedPolicy</code> in the <code>Database.Parameters.SchedPolicy</code> passed into <i>Database</i> method <code>open()</code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">.</a></p>
                <h2>MVCC Conflict management</h2>
                <p>When <code><a href="../MVCC_Transaction_Manager.htm">MVCC</a></code> is used with an isolation level other than <code>Serializable</code>, then <code>ReadWrite</code> transactions are executed concurrently.  Sometimes concurrent transactions modify the same objects, thus creating transaction conflicts.  The transaction manager resolves those conflicts by aborting one of the conflicting transactions and letting the other one commit its updates to the database.  When a transaction is aborted, the application receives the <code>MCO_E_CONFLICT</code> error code. It is the application’s responsibility to manage this possibility with logic similar to the following:</p>
                <div class="code-block"><pre>&#160;
    conflicts = true;
    do {
        try 
        {
            con.startTransaction(Database.TransactionType.ReadWrite);
            ...&lt;update database&gt;...
            con.commitTransaction();
            conflicts = false;
        &#160;
        } 
        catch (DatabaseError dbe) 
        {
            if ( dbe.errorCode != MCO_E_CONFLICT )
                throw dbe;
        }
    } while ( conflicts );
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that when <code><a href="../MVCC_Transaction_Manager.htm">MVCC</a></code> is used, the application must be able to tolerate transaction rollbacks due to conflicts.</p>
                <p>If the number of conflicts is too high, it could lead to sharp performance degradation due to the need to retry transactions.  When this occurs, the transaction manager temporarily changes the isolation level to <code>Serializable</code>. </p>
                <h2>Two-phase commit</h2>
                <p>Some applications require more elaborate control of transaction commit processing; specifically, committing the transaction in two steps (phases).  The first phase writes the data into the database, inserts new data into indexes and checks index restrictions (uniqueness) (all together, the “pre-commit”) and returns control to the application.  The second phase finalizes the commit.</p>
                <p>One example of such an application is the case where multiple <i>e</i>X<i>treme</i>DB databases need to synchronize the updates performed within a single transaction.  Another example could be that the <i>e</i>X<i>treme</i>DB transaction commit is included in a global transaction that involves other database systems or external storage.  In this case, the application coordinates the <i>e</i>X<i>treme</i>DB transaction with the global transaction between the first phase and the second phase.</p>
                <p>To perform the two-phase commit, the application needs to call the commit phases sequentially instead of calling one <code>commitTransaction()</code>. After the first commit phase is returned, the application cannot perform any activities against the database except initiating the second commit phase or rolling back the transaction. This process is illustrated in the following code segment:</p>
                <div class="code-block"><pre>&#160;
    &#160;
    ...
    con.startTransaction(Database.TransactionType.ReadWrite);
    ...
    if ( (con.commitTransaction(1)) &amp;&amp; GlobalTransaction() == SUCCESS )	)
    {
        con.commitTransaction(2);
    }
    else
    {
        con.rollbackTransaction();
    }
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note	that the two-phase commit API is not supported when using the <code>MVCC</code> transaction manager with a persistent database.</p>
                <h2>Pseudo-nested Transactions</h2>
                <p>Nested transactions might be necessary when two different application functions may be called separately or call each other.  To facilitate transaction nesting <i>e</i>X<i>treme</i>DB allows a Java application to call <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/start.htm">startTransaction()</a></code>  before the current transaction is committed or aborted. The <i>e</i>X<i>treme</i>DB runtime maintains an internal counter that is incremented each time <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/start.htm">startTransaction()</a></code>  is called, and decremented by <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/commit.htm">commitTransaction()</a></code> and <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/rollback.htm">rollbackTransaction()</a></code>.  A transaction commit in an inner transaction does not perform any actions except to reduce the nested transaction counter, and the transaction context remains valid until the outer transaction performs a commit or rollback.  The runtime will not actually commit the transaction until the counter reaches zero.</p>
                <p>If an “inner” transaction calls <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/rollback.htm">rollbackTransaction()</a></code>, the transaction is put into an error state, and any subsequent calls to modify the database in the scope of the outer-most transaction will return immediately.  </p>
                <p>Outer and inner transactions will be assigned the stricter transaction type without requiring the application to upgrade the transaction type; each transaction code block should simply call <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/start.htm">startTransaction()</a></code> with the appropriate transaction type for the operation being performed within its own body.  Note, however, that the inner block’s <code><a href="../../../Programming/C/Core_Functions/Static/Transaction_Control/start.htm">startTransaction()</a></code> might fail. </p>
                <p>The following code snippet illustrates a nested transaction implementation:</p>
                <div class="code-block"><pre>&#160;
    &#160;
    class BankTransaction
    {
    #pragma warning disable 0649
        public uint4 from;
        public uint4 to;
    #pragma warning restore 0649
    };
    &#160;
    // Insert two BankTransaction objects 
    public static bool InsertTwo(Connection con, uint4 from1, uint4 to1, uint4 from2, uint4 to2)
    {
        try 
        {
            con.StartTransaction(Database.TransactionType.ReadWrite);
&#160;
            // call nested transaction in InsertOne() to insert first object
            InsertOne(con, from2, to2);
        &#160;
            // insert second object
            con.StartTransaction(Database.TransactionType.ReadWrite);
            BankTransaction b2 = new BankTransaction();
            b2.from = from1;
            b2.to = to1;
            con.Insert(b2);
            con.CommitTransaction(); // commit second object
            &#160;
        } 
        catch (DatabaseError dbe) 
        {
            throw dbe;
        }
&#160;
        return true;
    }
&#160;
    // insert one BankTransaction record within a read-write transaction */
    public static void InsertOne(Connection con, uint4 from, uint4 to )
    {
        try 
        {
            // insert first object
            con.StartTransaction(Database.TransactionType.ReadWrite);
            BankTransaction b1 = new BankTransaction();
            b1.from = from1;
            b1.to = to1;
            con.Insert(b1);
            con.CommitTransaction(); // commit first object
            &#160;
        } 
        catch (DatabaseError dbe) 
        {
            throw dbe;
        }
&#160;
        return true;
    }
&#160;
    int main(int argc, char* argv[])
    {
        bool rc;
        Connect con;
        ...
        /* perform a simple nested transaction... */
        uint4 from1 = 11, to1 = 16, from2 = 7, to2 = 17;
        &#160;
        rc = InsertTwo(con, from1, to1, from2, to2);
        ...
    }
    &#160;</pre>
                </div>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that if the transaction type in module <code>InsertTwo()</code> had been <code>ReadOnly</code>, the nested transaction in <code>InsertOne()</code> would automatically promote the transaction type to <code>ReadWrite</code> causing the outer transaction to complete successfully even though it would otherwise fail on the attempt to instantiate a new object within a <code>ReadOnly</code> transaction.</p>
                <p>Unfortunately there is no safe way of enforcing the scope of a transaction. Consequently <i>applications can make the mistake of not closing transactions</i>, unintentionally creating psuedo-nested transactions. Care must be taken to assure proper transaction blocking.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>