<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Monitoring Database Storage in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Monitoring Database Storage in C</h1>
            <blockquote>
                <p>As mentioned in the Monitoring In-Memory Database Storage <a href="../Monitoring_Storage.htm">page</a>,  <i>e</i>X<i>treme</i>DB provides statistics APIs to check the amount of memory actually in use and the free memory available, and a callback mechanism  for embedded applications that must react when used memory space hits a threshold. </p>
                <p><a name="kanchor340"></a>Also the Database Calculator API is provided to help estimate database storage requirements.</p>
                <h2>Class Statistics APIs</h2>
                <p>There are simple reporting functions, <code><a href="../../../Programming/C/Core_Functions/Static/Auxiliary/Statistics/free_pages.htm">mco_db_free_pages()</a></code>, <code><a href="../../../Programming/C/Core_Functions/Static/Auxiliary/Statistics/total_pages.htm">mco_db_total_pages()</a></code> and <a href="../../../Programming/C/Core_Functions/Static/Auxiliary/Statistics/page_size.htm">mco_db_page_size()</a> that return  the total number of free pages, the total number of available (originally allocated) pages and the  current page size for a database connection respectively. </p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_db_free_pages(	/*IN*/ mco_db_h db, /*OUT*/ uint4 *freepages);
    &#160;
    MCO_RET mco_db_total_pages(	/*IN*/ mco_db_h db, /*OUT*/ uint4 *totalpages);
    &#160;
    MCO_RET mco_db_page_size(	/*IN*/ mco_db_h db, /*OUT*/ uint2 * page_size);
    &#160;</pre>
                </div>
                <p>Applications can also collect statistics  via the <code><a href="../../../Programming/C/Core_Functions/Static/Auxiliary/Statistics/class_stat_get.htm">mco_class_stat_get()</a></code> function. This function takes a transaction handle and a class code, and returns statistics data for the class in the <code>mco_class_stat</code> structure:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET  mco_class_stat_get(/*IN*/ mco_trans_h t, /*IN*/ uint2 class_code,
                    /*OUT*/ mco_class_stat_h stat);
                    &#160;</pre>
                </div>
                <p>The <code>mco_class_stat</code> structure has the following definition:</p>
                <div class="code-block"><pre>&#160;
    typedef struct mco_class_stat_t_
    {
        mco_counter_t objects_num;
        mco_counter32_t core_pages; /* pages used for all data except blobs */
        mco_counter32_t blob_pages; /* pages used by blobs */
        mco_counter32_t seq_pages; /* pages used by sequences */
        mco_counter_t core_space;   /* in bytes, not counting blobs */
    } mco_class_stat_t, * mco_class_stat_h;
    &#160;</pre>
                </div>
                <h2>Index Statistics APIs</h2>
                <p><a name="kanchor341"></a>The following two functions can be called to obtain index statistics at runtime:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET mco_index_stat_num (mco_trans_h t, uint2 * pnidx);
    &#160;
    MCO_RET mco_index_stat_get (mco_trans_h t, uint2   index, mco_index_stat_t * stat);
    &#160;</pre>
                </div>
                <p>Runtime statistics are reported for the given index in the <code>mco_index_stat_t</code> structure which has the following definition:</p>
                <div class="code-block"><pre>&#160;
    typedef struct mco_index_stat_tree_t_ 
    {
        mco_counter_t levels_num;             /* tree height */
        mco_counter_t duplicates_num;         /* number of duplicates */
    } mco_index_stat_tree_t;
    &#160;</pre>
                </div>
                <h2>Allocation Callback</h2>
                <p>The following function supplements the runtime statistics functions described above:</p>
                <div class="code-block"><pre>&#160;
    void mco_register_alloc_callback(mco_db_h db, mco_alloc_callback_t callback,
                        mco_alloc_callback_threshold_kind_t threshold_kind,
                        mco_offs_t           threshold_value);
                        &#160;</pre>
                </div>
                <p>where the callback function to be registered has the following prototype:</p>
                <div class="code-block"><pre>&#160;
    typedef void (*mco_alloc_callback_t)(mco_db_h db, mco_offs_t used);
    &#160;</pre>
                </div>
                <p>This function provides the means for the application to react when a memory threshold is met. The threshold criteria are useful for implementing an application's "garbage collectors" (when unlimited size databases are used) to avoid running out of disk space, etc. The possible values for <code>mco_alloc_callback_threshold_kind_t</code> (enumerated in <code>mco.h</code>) are as follows:</p>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_ALLOC_PERCENT_USED</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Fire the callback function when database memory load hits the specified threshold</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_ALLOC_FREE_LEFT</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Track memory usage and fire the callback when there is less remaining memory than the specified threshold (in bytes) </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_ALLOC_DELTA_USED</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Fire the callback each time <code>threshold_value</code> bytes are allocated</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">MCO_ALLOC_USED</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Fire the callback when memory consumption reaches the given threshold</td>
                        </tr>
                    </tbody>
                </table>
                <p>Regarding <code>MCO_ALLOC_DELTA_USED</code>, further explanation may be helpful. Suppose <code>threshold_value</code> is <code>1024</code> the following runtime behavior would be triggered:</p>
                <blockquote>
                    <p>1.	The program creates an object of 600 bytes. Nothing happens.</p>
                    <p>2.	The program creates another 600 byte object. The callback routine will be called because total memory consumption increased by 1,200 bytes (more than the threshold).</p>
                    <p>3.	Create another 600 byte object. Nothing happens again.</p>
                    <p>4.	And another 600 byte object. The callback will be called again.</p>
                </blockquote>
                <p>It is possible to register two different callbacks, one for the transient data and one for persistent data. To un-register the callback, <code>mco_register_alloc_callback()</code> should be called with <code>NULL</code> as  the callback. When it is necessary to pass any application specific data into the callback, this is done through the connection context created via <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/connect_ctx.htm">mco_db_connect_ctx()</a></code>. The callback registration is per connection and the callback functions are called when memory is allocated from the connection that registered the callback.</p>
                <p>
                    <img src="../../../Resources/Images/note.png" /> Note that It is important  that applications must not free the database memory from the callback function itself. Instead it is recommended to either notify a different garbage collection thread, or simply set a "global" flag by the callback function and periodically check the flag from the main application thread.</p>
                <h2>Database Calculator</h2>
                <p>In addition to the runtime statistics described above, <i>e</i>X<i>treme</i>DB provides the possibility of obtaining runtime information about any database class, including the memory that will be used by that class at runtime, its indexes and the size of dynamic objects.  This information allows applications to optimize schema designs, choose the optimal page sizes and other storage and performance parameters.</p>
                <p>To obtain this information a <code><a href="../../../Programming/C/Structures/Database_Calculator.htm">calculator</a></code> object is attached to the specified database and classes are registered with the calculator.  The application provides the calculator with the number of objects expected to be stored for each class.  The calculator API is also provided so that applications can use it at runtime if so desired.</p>
                <p><i>e</i>X<i>treme</i>DB packages also include the source code of a complete application called <code><a href="../../../Programming/C/SDK_Samples/Core_Samples/17-Statistics_Dbcalc.htm">dbcalc</a></code> that demonstrates the <a href="../../../Programming/C/SDK_Samples/Core_Samples/17-Statistics_Dbcalcapi.htm">calculator API</a> and can be used by developers to inspect their databases.</p>
                <h2>Persistent Databases</h2>
                <p><i>e</i>X<i>treme</i>DB provides additional APIs to monitor database storage on persistent media and a callback mechanism  for embedded applications that must react when used memory space hits a threshold. </p>
                <p>Applications can call the function <code><a href="../../../Programming/C/Core_Functions/Static/Disk_Manager/info.htm">mco_disk_info()</a></code> to get information about the current state of the database and log files. The function returns structure <code><a href="../../../Programming/C/Structures/Disk_Manager.htm">mco_disk_info_t</a></code> which contains the size of the log file in bytes, the size of the database file in bytes and the amount of space that is actually used in the database file.</p>
                <div class="code-block"><pre>&#160;
    void mco_disk_info(mco_db_h con, mco_disk_info_t * info);
    &#160;</pre>
                </div>
                <h3>Disk Allocation Callback</h3>
                <p>The following function supplements the <code><a href="../../../Programming/C/Core_Functions/Static/Disk_Manager/info.htm">mco_disk_info()</a></code> function described above:</p>
                <div class="code-block"><pre>    &#160;
    void mco_register_disk_alloc_callback(mco_db_h db, mco_alloc_callback_t callback,
                            mco_alloc_callback_threshold_kind_t threshold_kind,
                            mco_offs_t           threshold_value);
                            &#160;</pre>
                </div>
                <p>This registration function operates exactly as <code>mco_register_alloc_callback()</code>  except that it is used to register callbacks for the persistent class allocator.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>