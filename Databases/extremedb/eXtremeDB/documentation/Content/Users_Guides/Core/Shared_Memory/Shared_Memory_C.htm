<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Shared Memory Applications in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Shared Memory Applications in C</h1>
            <blockquote>
                <p>As explained in the <a href="../Shared_Memory_Apps.htm">Shared Memory Applications</a> page, <i>e</i>X<i>treme</i>DB allows two or more processes to share a common database. General instructions are given there explaining how shared memory segments must be created on different operating systems. Further implementation details for C applications are provided in the following sections.</p>
                <h3>Important note on multi-process shared memory applications</h3>
                <p>In multi-process database applications using shared memory it is necessary to call <code><a name="kanchor342"></a>mco_runtime_start()</code> first just by a single process (the primary process). This allows the <i>e</i>X<i>treme</i>DB runtime to correctly create and initialize the database registry. After the primary process initializes, all other (secondary) processes  can call  <code>mco_runtime_start()</code> simultaneously. </p>
                <h2>Primary Process Example </h2>
                <p>The following code snippet demonstrates how a “primary”  process might determine that the correct shared-memory library is linked, then initialize memory devices and open the database in shared-memory:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET open_shared_db(
        const char * db_name,  /* name of the database */
        mco_dictionary_h dict, /* pointer to schema */
        mco_size_t db_sz,      /* size of memory segment for in-mem part
                    * of the db */
        uint2 mem_pg_sz,       /* size of memory page */
        uint2 max_conn_no      /* max. number of connections */
    )
    {
        mco_runtime_info_t info;
        mco_db_params_t    db_params;
        mco_device_t dev;
&#160;
        /* get runtime info */
        mco_get_runtime_info(&amp;info);
        if (info.mco_shm_supported) 
        {
            /* set the device as a shared named memory device */
            dev.type       = MCO_MEMORY_NAMED;
            sprintf( dev.named.name, "%s-db", db_name ); /* set memory name */
            dev.named.flags = 0;       /* zero flags */
            dev.named.hint  = 0;       /* set mapping address or null it */
        } 
        else 
        {
            /* Wrong libraries for shared-memory */
            return MCO_E_UNSUPPORTED;
        }
&#160;
        dev.assignment = MCO_MEMORY_ASSIGN_DATABASE;   /* main database memory */
        dev.size       = db_sz;                        /* set the device size */
&#160;
        /* initialize and customize the database parameters */
        mco_db_params_init ( &amp;db_params );    /* initialize the params with default values */
        db_params.mem_page_size      = mem_pg_sz;
        db_params.disk_page_size     = 0;
        db_params.db_max_connections = max_conn_no;
&#160;
        /* open a database on the device with given params */
        return mco_db_open_dev(db_name, dict, dev, 1, &amp;db_params );
    }
&#160;
    void StartDB()
    {
        MCO_RET       rc;
        mco_db_h      db;
        void* start_mem = 0;
&#160;
        /* set fatal error handler *
        mco_error_set_handler( &amp;errhandler );
        mco_runtime_start();
        rc = open_shared_db( dbname, DemoShm1_get_dictionary(),
                    SEGSZ, PAGESIZE, MAX_CONNECTIONS );
        if ( MCO_S_OK == rc )
        {
            rc = mco_db_connect( dbname, &amp;db );
            /* normal processing goes here */
            ...
            rc = mco_db_disconnect( db );
            rc = mco_db_close( dbname );
        }
        mco_runtime_stop();
    }
    &#160;</pre>
                </div>
                <p><i>Note that it is important to set the shared memory</i> <code>flags</code> <i>and </i><code>hint</code> <i>fields to zero or a valid value in the</i> <code>mco_device_t</code> <i>structure passed to</i> <code>mco_db_open_dev()</code> <i>as done in the example above:</i></p>
                <div class="code-block"><pre>            &#160;
            dev.named.flags = 0;       /* zero flags */
            dev.named.hint  = 0;       /* set mapping address or null it */
            &#160;</pre>
                </div>
                <h2>Secondary Process Example </h2>
                <p>Once the shared memory for the database has been set up by <code>open_shared_db()</code> in the primary process, subsequent processes will simply connect to the database as demonstrated below:</p>
                <div class="code-block"><pre>&#160;
    void DbAttach()
    {
        MCO_RET       rc;
        mco_db_h      db;
        &#160;
        /* set fatal error handler */
        mco_error_set_handler( &amp;errhandler );
        mco_runtime_start();
&#160;
        /* connect to a database by name "dbname" */
        rc = mco_db_connect( dbname, &amp;db );
        if ( MCO_S_OK != rc )
        {
            printf("\n Could not attach to instance: %d\n", rc);
            exit( 1 );
        }
&#160;
        /* normal database processing goes here */
        ...
        rc = mco_db_disconnect( db );
        rc = mco_db_close( dbname );
&#160;
        mco_runtime_stop();
    }
    &#160;</pre>
                </div>
                <p>See sample <a href="../../../Programming/C/SDK_Samples/Core_Samples/03-Connect_Multi-process.htm">03-connect_multiprocess</a> for a complete  example of a shared memory application.</p>
                <p>&#160;</p>
                <h2>Shared Memory Runtime Options</h2>
                <p>The <i>e</i>X<i>treme</i>DB runtime must be informed of shared memory configuration through runtime options. The shared memory options are OS specific.  To set runtime options that application must call the <a href="../../../Programming/C/Core_Functions/Static/Runtime_Control/runtime_setoption.htm"><code>mco_runtime_setoption()</code></a> before <code><a href="../../../Programming/C/Core_Functions/Static/Runtime_Control/runtime_start.htm">mco_runtime_start()</a></code>. For example:</p>
                <div class="code-block"><pre>&#160;
    mco_runtime_setoption(MCO_RT_OPTION_UNIX_SHM_MASK, 0600 );
    &#160;
    rc = mco_runtime_start();
    ...
    &#160;</pre>
                </div>
                <p>Applications can determine at run-time whether or not the correct <i>e</i>X<i>treme</i>DB runtime libraries are linked to support shared memory by examining the output of the <code>mco_get_runtime_info()</code> function. </p>
                <h3>For Windows applications</h3>
                <p>There are two groups of runtime options: one for determining the scope of the shared memory block name (local or global), and one for determining the security level applied to the shared memory block. The combination of options are applied to the name specified in the shared (named) memory block device. </p>
                <p>For example, the following  code snippet creates a shared memory block with the name “shared-db”:</p>
                <div class="code-block"><pre>    &#160;
    if (info.mco_shm_supported) 
    {
        /* set the device as a shared named memory device */
        dev.type       = MCO_MEMORY_NAMED;
        sprintf( dev.named.name, "%s-db", db_name ); /* set memory name */
        dev.named.flags = 0;       /* zero flags */
        dev.named.hint  = 0;       /* set mapping address or null it */
    }
    &#160;</pre>
                </div>
                <p>The default runtime options are as follows:</p>
                <div class="code-block"><pre>&#160;
    MCO_RT_WINDOWS_SHM_PREFIX_NONE | MCO_RT_WINDOWS_SHM_SEC_DESCR_NULL
    &#160;</pre>
                </div>
                <p>This combination makes the database visible and accessible from only local sessions. To make the database accessible from all sessions of the same user, for example a service and a desktop program running under the same user, the following runtime options are necessary:</p>
                <div class="code-block"><pre>&#160;
    MCO_RT_WINDOWS_SHM_PREFIX_GLOBAL | MCO_RT_WINDOWS_SHM_SEC_DESCR_SAMEUSER
    &#160;</pre>
                </div>
                <p>To setup the shared memory block with these options the following call must be made prior to calling mco_runtime_start():</p>
                <div class="code-block"><pre>    &#160;
    mco_runtime_setoption( MCO_RT_WINDOWS_SHM_OPT,
                    MCO_RT_WINDOWS_SHM_PREFIX_GLOBAL |
                    MCO_RT_WINDOWS_SHM_SEC_DESCR_SAMEUSER );
&#160;
    ...
    rc = mco_runtime_start();
    ...
    &#160;</pre>
                </div>
                <p>Please note that the value <code>MCO_RT_WINDOWS_SHM_PREFIX_GLOBAL</code> is applicable for Services only; desktops sessions are able to create databases using modes</p>
                <p><code>MCO_RT_WINDOWS_SHM_PREFIX_LOCAL</code> or <code>MCO_RT_WINDOWS_SHM_PREFIX_NONE</code>; and they can connect to databases opened with <code>MCO_RT_WINDOWS_SHM_PREFIX_GLOBAL</code> by using matching security settings.</p>
                <h3>For Linux applications</h3>
                <p>Linux shared memory applications use the POSIX function <code>mmap()</code> to provide mapping of virtual shared memory to a current process when the <i>e</i>X<i>treme</i>DB library <code>libmcompsx</code> is used. The option <code>MCO_RT_POSIX_SHM_ANONYMOUS</code> enables the option <code>MAP_ANOUNYMOUS</code> of function <code>mmap()</code>. The option <code>MCO_RT_POSIX_SHM_SHARED</code> specifies option <code>MAP_SHARED</code> of function <code>mmap()</code>, otherwise <code>MAP_PRIVATE</code> is used. The default combination of options is</p>
                <div class="code-block"><pre>&#160;
    MCO_RT_POSIX_SHM_ANONYMOUS | MCO_RT_POSIX_SHM_SHARED.
    &#160;</pre>
                </div>
                <p>To specify different options for the shared memory block call <code>mco_runtime_setoption()</code> prior to calling <code>mco_runtime_start()</code>. For example to specify <code>mmap()</code> option <code>MAP_PRIVATE</code>:</p>
                <div class="code-block"><pre>    &#160;
    mco_runtime_setoption( MCO_RT_POSIX_SHM_OPT,
                    MCO_RT_POSIX_SHM_ANONYMOUS );
    ...
    rc = mco_runtime_start();
    ...
    &#160;</pre>
                </div>
                <p>Note that the Linux AIO library <code>mcfu98aio</code> is not designed for shared memory between processes. It may be used for multi-threaded access but not for multi-process sharing of a database.</p>
                <h3>For Unix applications</h3>
                <p>On Unix systems the shared memory access mode is specified by the Unix specific value of file system access rights. Shared memory and semaphores have the same system of permissions as ordinary files to restrict access by processes of different users and groups. </p>
                <p>The default value is <code>0666</code> for <code>MCO_RT_OPTION_UNIX_SHM_MASK</code> means that <code>user</code>, <code>group</code> and <code>others</code> can read and write this memory or semaphore. A value of <code>0600</code> means that only <code>user</code> can access (read and write) this memory or semaphore. To change the default to <code>0600</code> the following call must be made prior to calling <code>mco_runtime_start()</code>:</p>
                <div class="code-block"><pre>&#160;
    mco_runtime_setoption(MCO_RT_OPTION_UNIX_SHM_MASK, 0600);
    ...
    rc = mco_runtime_start();
    ...
    &#160;</pre>
                </div>
                <p>&#160;</p>
                <h2>Shared memory and the Direct Pointers library</h2>
                <p>When using the <i>e</i>X<i>treme</i>DB Direct Pointer Arithmetic library (DP) it is necessary to map the shared memory segment to the same virtual memory address in every process because in the DP implementation <i>e</i>X<i>treme</i>DB uses actual memory addresses (i.e. it performs pointer arithmetic) to calculate the locations of objects in an <i>e</i>X<i>treme</i>DB database.  The pointers must be the same in every running instance of an <i>e</i>X<i>treme</i>DB-based application, or pointer arithmetic just doesn’t work.  Setting the <code>hint</code> parameter to zero causes <i>e</i>X<i>treme</i>DB to determine the actual shared memory segment address.  But this could fail when called from a second process attempting to open the shared database. In this case it is the applications responsibility to provide a valid <code>hint</code> address.</p>
                <p>There are several ways to determine where the runtime should map the shared memory database. Developers can use a utility provided by the operating system to gather memory usage information (the process memory map). These utilities will usually display the code, data and stack memory usage of each process running on the system and the libraries it is using. It is necessary to examine the output and pick an address outside any address space.</p>
                <p>In any event, the memory address is an address in each process’s virtual memory. An address should be chosen that is sufficiently far away from the data, stack and heap segment of every process that will share the database. (Hence the default of <code>0x20000000</code> for <code>MAP_ADDRESS</code>; it is assumed unlikely, but not guaranteed, that any single process will have data, stack and heap that stretch out to <code>0x20000000</code> bytes.)</p>
                <p>The above potential issues with respect to the <code>MAP_ADDRESS</code> can be avoided by using the <code>Offset</code> library instead of the Direct Pointer Arithmetic library. The <code>Offset</code> approach calculates an offset from the beginning address of the in-memory database, to locate objects. Therefore, it does not depend on the in-memory database starting at a common (and known) location for all processes. However, the DP pointer arithmetic is about 5%–15% faster than calculating offsets.</p>
                <p>&#160;</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>