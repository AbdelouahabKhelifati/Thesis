<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|C++ API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating and Modifying Database Objects in C++</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Creating and Modifying Database Objects in C++</h1>
            <blockquote>
                <p>C++ applications typically use a mix of C++ and <a href="Object_Interfaces_C.htm">C APIs</a> to manage database objects. The <code><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code> schema compiler with option <code>-hpp</code> generates C++ class definitions for each database class. These class interfaces can be used to create and modify database objects using these generated <code>create()</code> and <code>_put()</code> methods like the following:</p>
                <div class="code-block"><pre>&#160;
    Schema snippet:
            
    &#160;
    class Part
    {
        string      type;
        string      name;
        float       price;
        unsigned&lt;4&gt; code;
        &#160;
        hash&lt; code &gt;        ByCode [ 10000 ];
        tree&lt; type, name &gt;  ByType; // ordered by type, name
    };
    &#160;
    &#160;
    Application snippet:
            
    &#160;
    MyPart part;
    char temp[200];
    &#160;
    rc = mco_trans_start(db, MCO_READ_WRITE, MCO_TRANS_FOREGROUND, &amp;t);
    if ( MCO_S_OK == rc ) 
    {
        part.create(t);
        part.stype_put(i2s(j % 100));
        sprintf(temp, "part # %d", j);
        part.sname_put(temp);
        part.price_put((float)(2.0 + j % 100 / 200.0));
        part.code_put(1000000+j);
        rc = mco_trans_commit(t);
    }
    &#160;</pre>
                </div>
                <p>But it may be preferable to take advantage of the smart pointer option described in the following section.</p>
                <h2>Optimizing C++ database access with the ''smartptr'' DDL compiler option</h2>
                <p>Sometimes it is possible and beneficial from a performance standpoint to access object fields in a С++ fashion as opposed to using the <code>_put()</code>and <code>_get()</code> functions. These setters and getters can be implemented in C++ by generating code that make database fields appear effectively as class “properties”.</p>
                <p>For example, instead of:</p>
                <div class="code-block"><pre>&#160;
    anObject.aField_get(&amp;value));
    anObject.aField_put(1));
    &#160;</pre>
                </div>
                <p>Using a smart pointer this can be written as:</p>
                <div class="code-block"><pre>&#160;
    value = anObject.aField;
    anObject.aField = 1;
    &#160;</pre>
                </div>
                <p>In order to use smart pointer access, simply specify the <a href="../../../Programming/C/DDL.htm">DDL</a> compiler option <code>-smartptr</code> when compiling the schema with <code><a href="../../../Getting_Started/Package_Contents/mcocomp.htm">mcocomp</a></code> to generate the C++ style access methods. It is possible (and may sometimes be necessary) for an application to combine the standard <i>setters</i> and <i>getters</i> with the smart pointers access method.</p>
                <p>Apart from the intuitive C++ style and programming convenience of effectively treating database fields as class “properties”, another significant advantage is that exception handling can then be used to manage error conditions.</p>
                <p>However, as the smart pointer implementation uses some “tricky” C++ features to simulate “properties” (implicit cast operators and constructors), in some cases this can lead to confusion for developers. While in most cases the developer need not be concerned about the internal implementation, in some uses there can be problems; for example when displaying a value using <code>printf()</code> or using the address of such a “property”.</p>
                <p>And note that these “properties” extract values from the database using the <i>e</i>X<i>treme</i>DB native API wrapper functions. While this can be efficient when accessing only those fields that are actually needed, it is not always the most efficient way of interacting with a database. For example, if all of the class fields need to be extracted then it is more efficient to extract them into a <code>struct</code> (see section “Fixed _put and _get” in the <a href="Object_Interfaces_C.htm">C API page</a>) rather than access them field-by-field. Or if the application is accessing the same field multiple times, it is also preferable to “materialize” the field value (extract it into a local variable)  rather than extract its value on each access via the “property” assignment.</p>
                <p>For this reason the smart pointer option is provided, to enable or disable this feature. (It is disabled by default.) To illustrate the kind of internal implementation generated when the smart pointer option is specified, consider the following schema:</p>
                <div class="code-block"><pre>&#160;
    class Host 
    {
        uint4 id;
        string name;
        char&lt;50&gt; domain;
    };
    &#160;</pre>
                </div>
                <p>When <code>mcocomp –hpp –smartptr schema.mco</code> is executed,  the following code will be generated for the integer field <code>id</code>:</p>
                <div class="code-block"><pre>&#160;
    class Host : public MCO::Base_
    {
    public:
        struct 
        {
            Host* handle_;
&#160;
            operator  uint4() const 
            {
                uint4 val_;
                MCO_CPP_CHECK(Host_id_get(handle_, &amp;val_));
                return val_;
            }
&#160;
            uint4 operator=(uint4 val_) 
            {
                MCO_CPP_CHECK(Host_id_put(handle_, val_));
                return val_;
            }
        } id;
        ...
    };
    &#160;</pre>
                </div>
                <h2>Dynamic Object Allocators</h2>
                <p>The <i>e</i>X<i>treme</i>SQL engine manages dynamic data objects like <i>Blob, String, Array</i> etc. with an object of class <i>Allocator.</i> Please refer to the <a href="../../../Programming/C++/Cpp_Allocators.htm">Dynamic Object Allocators</a> page for further details.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>