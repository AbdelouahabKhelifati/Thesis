<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Database Recovery from Failed Processes in C</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Database Recovery from Failed Processes in C</h1>
            <blockquote>
                <p>As explained in the <a href="../Recovery.htm">Database Recovery</a> page, <i>e</i>X<i>treme</i>DB provides the “sniffer” utility to allow C and C++ applications to detect and remove “dead” connections.</p>
                <h2>Using the Sniffer API</h2>
                <p>Because there is no system-independent way to detect when a process has failed, the “sniffer” API <a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm"><code>mco_db_sniffer()</code></a> is provided.  Usually <a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm"><code>mco_db_sniffer()</code></a> will be called periodically in a separate thread or from specific places in the application to check for “dead” connections. A user-supplied callback function is then called by <a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm"><code>mco_db_sniffer()</code></a> to actually detect if a given connection is “alive”, and if not to terminate it.</p>
                <p>To perform this check, some identifying information (typically the process identifier) is added to each connection context with code like the following:</p>
                <div class="code-block"><pre>&#160;
    int pid ;
    #ifdef _WIN32
    pid = GetCurrentProcessId();
    #else
    pid = getpid();
    #endif
    ...
&#160;
    mco_db_connect_ctx(dbName, &amp;pid, &amp;db);
    &#160;</pre>
                </div>
                <blockquote>
                    <p>
                        <img src="../../../Resources/Images/note.png" /> Note that it is also necessary to specify the size of this connection context in the database parameters passed to <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code>.  For example:</p>
                    <div class="code-block"><pre>&#160;
    db_params.connection_context_size  = sizeof(int);
    &#160;</pre>
                    </div>
                </blockquote>
                <p>The “sniffer callback” function could then be implemented as follows:</p>
                <div class="code-block"><pre>&#160;
    MCO_RET sniffer_callback(mco_db_h db, void* context, mco_trans_counter_t trans_no)
    {
        int pid = *(int*)context;
        #ifdef _WIN32
            HANDLE h = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid);
            if (h != NULL) 
            {
                CloseHandle(h);
                return MCO_S_OK;
            }
        #else
            if (kill(pid, 0) == 0) 
            {
                return MCO_S_OK;
            }
        #endif
        printf("Process %d is crashed\n", pid);
        return MCO_S_DEAD_CONNECTION;
    }
    &#160;</pre>
                </div>
                <p>If the user callback function returns <code>MCO_S_DEAD_CONNECTION</code>, recovery will be performed for this connection. Now <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm">mco_db_sniffer()</a></code>iterates through database connections and will call the user callback function depending on the policy specified (third parameter).  The possible values for this policy parameter are as follows:</p>
                <ul>
                    <li value="1"><code>MCO_SNIFFER_INSPECT_ACTIVE_CONNECTIONS</code>: for all active connections,</li>
                    <li value="2"><code>MCO_SNIFFER_INSPECT_ACTIVE_TRANSACTIONS</code>: for all connections with active transactions, or</li>
                    <li value="3"><code>MCO_SNIFFER_INSPECT_HANGED_TRANSACTIONS</code>: for connections with active transactions whose transaction number has not changed since the previous invocation of <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm">mco_db_sniffer()</a></code> (such a connection is assumed to be hung; it is up to the user to correctly specify and enforce the interval between successive calls to <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/sniffer.htm">mco_db_sniffer()</a></code> to avoid false detection of hung transactions).</li>
                </ul>
                <p>A “watchdog” thread could then be implemented in the application as follows:</p>
                <div class="code-block"><pre>&#160;
    THREAD_PROC_DEFINE(sniffer_loop, arg)
    {
        mco_db_h db;
        int pid = get_pid();
        mco_db_connect_ctx(dbName, &amp;pid, &amp;db));
        while (1) 
        {
            mco_db_sniffer(db, sniffer_callback,
                    MCO_SNIFFER_INSPECT_ACTIVE_CONNECTIONS));
            sleep(SNIFFER_INTERRVAL);
        }
        mco_db_disconnect(db);
        THREAD_RETURN(0);
    }
    &#160;</pre>
                </div>
                <p>Recovery actually consists of two stages. In the first stage the dead connection is “grabbed”.  Each connection has private (process specified) pointers which must be adjusted to be used in the context of the process performing recovery.  In the second stage, internal functions are called to rollback any transactions that might have been in progress and to release the dead connections’ data structures. (Please see SDK sample <a href="../../../Programming/C/SDK_Samples/Core_Samples/19-Recovery_Sniffer.htm">19_recovery_sniffer</a> for an example.)</p>
                <h2>NVRAM database support and recovery</h2>
                <p><i>e</i>X<i>treme</i>DB allows C and C++ applications to re-connect to databases created in non-volatile memory (NVRAM, or battery-backed RAM) after a system restart, or similar activities. The database can be created either in conventional or shared memory. If the database is corrupted, the <i>e</i>X<i>treme</i>DB<a name="kanchor263"></a> runtime makes an attempt to recover the database based on the content of the memory buffer specified in the call to <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code>.</p>
                <p>In order to reconnect to a database in NVRAM, the application specifies the  memory device to <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code> and sets flag <code>MCO_DB_OPEN_EXISTING</code> as a parameter (in the <code><a href="../../../Programming/C/Structures/Database_Open_Modes.htm">mco_db_params_t.mode_mask</a></code> argument). For example:</p>
                <div class="code-block"><pre>&#160;
    mco_db_params_t db_params;
    ...
    mco_db_params_init(&amp;db_params);
    ...
    if (...) 
    {
        db_params.mode_mask |= MCO_DB_OPEN_EXISTING;
    }
    ...
    rc = mco_db_open_dev(db_name... , &amp;db_params);
    &#160;</pre>
                </div>
                <p>The database runtime performs the necessary steps to ensure consistency of the database metadata and the database content. If <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code> returns <code>MCO_S_OK</code>, the application can proceed to connect to the database normally by calling <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/connect.htm">mco_db_connect()</a></code>.</p>
                <p>Note that database recovery can fail under certain conditions (such as application errors that corrupt the database runtime metadata).  If recovery fails, <code><a href="../../../Programming/C/Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code> returns an error code. (Please refer to the “Recovery from failed processes” section above for further discussion about <i>e</i>X<i>treme</i>DB recovery procedures. Also refer to the SDK sample <a href="../../../Programming/C/SDK_Samples/Core_Samples/02-Open_Nvram.htm">02-open_nvram</a>).</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>