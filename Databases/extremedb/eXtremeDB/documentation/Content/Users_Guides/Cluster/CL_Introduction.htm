<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide|Cluster User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Introduction to eXtremeDB Cluster</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Introduction to <i>e</i>X<i>treme</i>DB Cluster</h1>
            <blockquote>
                <p><i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> is a distributed database implementation. Instances of applications can run on different nodes in a network, and all database modifications will be automatically replicated between all instances. For example, the following diagram illustrates a 5-node cluster.</p>
                <p>&#160;</p>
                <p>
                    <img src="../../Resources/Images/Cluster_5-Node.png" />
                </p>
                <p>All nodes in a cluster hold the same copy of the database. All nodes in a cluster are equal, i.e. <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> has no dedicated <i>master</i> or <i>replica</i> nodes (as with <i>e</i>X<i>treme</i>DB<i> High Availability</i>). Each node can perform <code>READ_WRITE</code> and <code>READ_ONLY</code> operations. <code>READ_ONLY</code> transactions are local, i.e. they don't require network operations, and run as fast as with a standalone database.</p>
                <h2>Theory of operation</h2>
                <p>To update a database, a two-phase commit protocol is used.  All operations are local, no network communications are involved, until the transaction is committed. The update scenario is as follows:</p>
                <blockquote>
                    <p>1.	The thread running on the cluster node (called the initiator) performs a call  to the C/C++ function <code><a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit.htm">mco_trans_commit()</a></code>, or the Java/C# <code>ClusterConnection.CommitTransaction()</code> method, for a <code>READ_WRITE</code> transaction.</p>
                    <p>2.	Internally the <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> implementation of the transaction commit invokes <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase1.htm"><code>commit_phase1()</code></a> for the initiator database copy. If <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase1.htm"><code>commit_phase1()</code></a> fails, the transaction is aborted and rolled back locally. (No network communication happens.)</p>
                    <p>3.	If the <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase1.htm"><code>commit_phase1()</code></a> succeeds, the transaction is serialized and sent to all other nodes (called participants) in the Cluster.</p>
                    <p>4.	Each participant opens a transaction, applies the serialized data from the initiator and performs <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase1.htm"><code>commit_phase1()</code></a>.</p>
                    <p>5.	The results of these operations (<code>SUCCESS</code> or <code>FAIL</code>) are sent back to the initiator.</p>
                    <p>6.	The initiator gathers replies from all participants and decides how to complete the global transaction:</p>
                    <ul>
                        <li value="1">	If all participants report <code>SUCCESS</code>, the initiator completes the local transaction with <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase2.htm"><code>commit_phase2()</code></a> and sends <code>CONFIRM</code> messages to participants.</li>
                        <li value="2">	If at least one participants replied with <code>FAIL</code>, the initiator rolls back the transaction and sends <code>REJECT</code> messages to the participants.</li>
                        <li value="3">	Depending on the type of message (<code>CONFIRM</code> or <code>REJECT</code>), participants perform <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/commit_phase2.htm"><code>commit_phase2()</code></a> or <a href="../../Programming/C/Core_Functions/Static/Transaction_Control/rollback.htm"><code>rollback()</code></a> to complete the transaction.</li>
                    </ul>
                </blockquote>
                <p>Accordingly, database changes are either applied to all nodes, or rolled back.  Since pessimistic locking is extremely expensive and subject to unpredictable failure-points when implemented in a network environment, <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> employs only the  <a href="../Core/MVCC_Transaction_Manager.htm" name="kanchor207">MVCC</a><a name="kanchor208"></a> transaction manager.</p>
                <p>The <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> implementation automatically controls the availability of nodes using timeouts and keep-alive messages. If a number of nodes become unavailable (i.e. there is no quorum), the processing of <code>READ_WRITE</code> transactions may be suspended.</p>
                <p>&#160;</p>
                <h2>Terminology</h2>
                <p>The term <i>Node Address</i> refers to a character string containing the transport-layer-dependent address of a node. For example, a node address for the <code>TCP/IP</code> transport could be <code>&lt;hostname&gt;:&lt;port&gt;</code> or <code>&lt;IP-address&gt;:&lt;port&gt;</code>. (See examples below.)</p>
                <p>The term <i>Node Quorum Rank</i> refers to an integer value that is used to determine whether enough interconnected nodes are online to work. If the sum of the <code>qrank</code> values for node <code>A</code> and all nodes connected to <code>A</code> is more than half of the sum of the <code>qrank</code> values for all cluster nodes (online and offline), then node <code>A</code> (and other nodes online) will continue to work.</p>
                <p>It is helpful to consider two node quorum rank example scenarios:</p>
                <blockquote>
                    <p>1.	All nodes have the same <code>qrank</code> value: in this case the cluster will work if more than half of the nodes are active and connected to each other. If the cluster is split exactly in half, the cluster will not work.</p>
                    <p>2.	One node (call it <code>main</code>) has a <code>qrank</code> value of 1, all other nodes have a <code>qrank</code> value of 0: in this case the cluster of nodes connected to <code>main</code> will always work. If the <code>main</code> node dies, the cluster ceases to work.</p>
                </blockquote>
                <p>
                    <img src="../../Resources/Images/note.png" />Note that in any scenario, if the cluster nodes split into several disconnected parts, <code>WRITE</code> operations will be allowed only for one of these parts.</p>
                <p>&#160;</p>
                <h2>Overview</h2>
                <p><i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> is built on the <i>e</i>X<i>treme</i>DB<i> High Availability</i> technology. However, while <i>e</i>X<i>treme</i>DB<i> High Availability</i> provides the synchronization / replication support in a master-replica scenario, <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i> provides a simple interface for managing a peer-to-peer network of “equal” nodes.</p>
                <p>As a new node is connected to the cluster, it is synchronized in <code>hot</code> mode, i.e. the newly connected node receives synchronization data and transactions from other nodes. Other currently connected cluster nodes can still perform <code>READ_WRITE</code> transactions during the startup synchronization of the new node. (The new node selects the active node with the largest number of completed transactions at the moment of connection to perform the synchronization. If all the cluster nodes are equally <code>loaded</code> with completed transactions, then the synchronizer node is selected randomly from the active cluster nodes.)</p>
                <p>&#160;</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>