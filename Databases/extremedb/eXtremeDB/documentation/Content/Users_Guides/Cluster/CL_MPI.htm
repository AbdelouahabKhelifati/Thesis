<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|High Availability User's Guide|Cluster User's Guide">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using an MPI channel with eXtremeDB Cluster</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Using an MPI channel with<i> e</i>X<i>treme</i>DB Cluster</h1>
            <blockquote>
                <p>To use an MPI channel in a Cluster application, it must be linked with the <code>mcoclmpi</code> library (instead of <code>mcocltcp</code>). The MPI standard requires that the first MPI call in the MPI-program must be <code>MPI_Init()</code> or <code>MPI_Init_thread()</code>, and the last call must be <code>MPI_Finalize()</code>. Another requirement is that <code>MPI_Init()</code> or <code>MPI_Init_thread()</code> and <code>MPI_Finalize()</code> must be called only once per process.</p>
                <p>The difference between <code>MPI_Init()</code> and <code>MPI_Init_thread()</code> is that <code>MPI_Init_thread()</code><a name="kanchor225"></a> allows the application to set the desired level of thread support. The Cluster runtime requires the <code>MPI_THREAD_MULTIPLE</code> level, which allows the runtime to call MPI functions from different threads without additional synchronization.</p>
                <p>In view of the above, there are two ways to initialize the MPI in cluster applications: <code>explicitly</code> or <code>implicitly</code>. In the first case, the application explicitly calls <code>MPI_Init_thread()</code> / <code>MPI_Finalize()</code>, and passes to <a href="../../Programming/C/Cluster_Functions/db_open.htm"><code>mco_cluster_db_open()</code></a> an opaque MPI object called <code>communicator</code>. Communicator defines the communication context, in other words it defines which processes are involved in communications.</p>
                <p>The <code>MPI</code> runtime automatically creates the communicator <code>MPI_COMM_WORLD</code>, which includes all the processes. There is also an <code>MPI API</code>, that allows creation of derived communicators. The communicator is passed to <code><a href="../../Programming/C/Cluster_Functions/db_open.htm">mco_cluster_db_open()</a></code> via the communicator field in the <code><a href="../../Programming/C/Structures/Cluster_Parameters.htm">mco_clnw_mpi_params_t</a></code> structure. If this field is not set (or is <code>NULL</code>), <code>MPI_COMM_WORLD</code> is used.</p>
                <p>In the second case (implicit MPI initialization) <code>MPI_Init_thread()</code> and <code>MPI_Finalize()</code> will be automatically called inside the cluster runtime and the<code> MPI_COMM_WORLD</code> communicator will be used. Implicit initialization is a little easier for developers and the application can still be linked with <code>mcoclmpi</code>, or with <code>mcocltcp</code> if the <code>MPI</code> channel is not used, without any changes.</p>
                <p><code>Explicit</code> initialization allows the user to define the <code>lifetime</code> of MPI. For example, if MPI is used for custom communications, unrelated to <i style="font-weight: normal;">e</i>X<i style="font-weight: normal;">treme</i>DB <i style="font-weight: normal;">Cluster</i>. For example the following sample illustrates explicit MPI initialization:</p>
                <div class="code-block"><pre>    &#160;
    main (int argc, char * argv)
    {
        mco_cluster_params_t cl_params;
        mco_db_params_t db_params;
        mco_db_h db;
        mco_device_t devs [N];
    &#160;
        int provided;
        MPI_Init_thread (&amp; argc, &amp; argv, MPI_THREAD_MULTIPLE, &amp; provided);
        mco_cluster_init ();
        mco_cluster_params_init (&amp; cl_params);
        cl_params.nw.mpi.communicator = (void *)MPI_COMM_WORLD;
        &lt;initialize db_params and devs&gt;
        mco_cluster_db_open (dbName, cldb_get_dictionary (), dev, n_dev, &amp;db_params,
                            &amp;cl_params);
        &#160;
        /* start listener threads */
        sample_start_connected_task (&amp; listener_task, ClusterListener,
        dbName, 0);
    &#160;
        mco_db_connect(dbName, &amp;db);
        ...                                                                                             
        mco_cluster_stop (db);
        &#160;
        sample_join_task (&amp; listener_task);
        &#160;
        mco_db_disconnect (db);
        mco_db_close (dbName);
        MPI_Finalize ();
        return 0;
    }
    &#160;</pre>
                </div>
                <p style="text-indent: 0.5in;text-align: left;">&#160;</p>
                <p>This is very similar to a normal Cluster application using TCP, with the exception of the MPI calls and setting the communicator parameter:</p>
                <div class="code-block"><pre>&#160;
    cl_params.nw.mpi.communicator = (void *)MPI_COMM_WORLD;
            
    &#160;</pre>
                </div>
                <p>Some fields of the <code><a href="../../Programming/C/Structures/Cluster_Parameters.htm">mco_cluster_params_t</a></code> structure are not mandatory for MPI channel:</p>
                <blockquote>
                    <p><code>uint2 n_nodes -</code> total number of nodes in the cluster.</p>
                    <p>MPI provides the function <code>MPI_Comm_size()</code> which returns the number of processes in the communicator. So this Cluster parameter is optional. If <code>n_nodes</code> is specified and not the same as <code>MPI_Comm_size</code>, the error code <code>MCO_E_NW_INVALID_PARAMETER</code> is returned.</p>
                    <p>&#160;</p>
                    <p><code>uint2 node_id –</code> the ID of the node.</p>
                    <p>MPI provides the function <code>MPI_Comm_rank()</code> which returns the process ID in the communicator. So this Cluster parameter is also optional. If it is specified and not the same as <code>MPI_Comm_rank()</code>, <code>MCO_E_NW_INVALID_PARAMETER</code>  is returned.</p>
                    <p>&#160;</p>
                    <p><code>mco_cluster_node_params_t * nodes</code> – the node list.</p>
                    <p>This list is also optional for MPI. It can still be used to specify the names of the processes (<code>addr</code> field in the <code><a href="../../Programming/C/Structures/Cluster_Parameters.htm">mco_cluster_node_params_t</a></code> structure ).</p>
                    <p>&#160;</p>
                    <p>Also, currently MPI doesn't use the <code>check_quorum_func</code> and <code>check_quorum_param</code> fields, since MPI doesn't allow dynamic connection / disconnection of processes.</p>
                </blockquote>
                <p>To compile applications that explicitly call MPI functions (and link with the <code>mcoclmpi</code> library) the wrappers (scripts) <code>mpicc</code> (for C) and <code>mpicxx</code> (for C++) must be used. These scripts, which are part of the MPI package, call <code>gcc/g++</code> or another standard compiler and know how to build MPI applications specifying the proper include / library paths, macro definitions and other compiler options.</p>
                <p>For UNIX-based systems, specifying <code>PRJ_F_CLUSTER = MPI</code> in the makefile will cause <code>header.mak</code> to automatically set <code>CC = mpic</code>c and <code>CXX = mpicxx</code>, and link the application with the <code>mcoclmpi</code> library.</p>
                <p>To start MPI applications the <code>mpirun</code> or <code>mpiexec</code> commands are used. These are also the part of the MPI package. The command is:</p>
                <div class="code-block"><pre>&#160;
    mpirun &lt;mpirun arguments&gt; &lt;program&gt; &lt;program arguments&gt;
            
    &#160;</pre>
                </div>
                <p>The most important <code>mpirun</code> arguments are:</p>
                <blockquote>
                    <p><code>-n &lt;nprocs&gt; -</code> number of processes (<code>nodes</code>) in the cluster</p>
                    <p><code>-machinefile &lt;filename&gt;</code> - the name of the text file that contains a list of nodes, one node per line</p>
                </blockquote>
                <p>For example, to run the application <code>mpi_test</code> on nodes <code>nodeA</code> and <code>nodeB</code>, create the file <code>nodes</code> with the lines:</p>
                <div class="code-block"><pre>    &#160;
    nodeA
    nodeB
    &#160;</pre>
                </div>
                <p>Then execute the command:</p>
                <div class="code-block"><pre>    &#160;
    mpirun -n 2 -machinefile ./nodes ./mpi_test
            
    &#160;</pre>
                </div>
                <p>As mentioned above, <code>n_nodes</code> and <code>node_id</code> are not mandatory for the MPI channel, so <code>mpi_test</code> can be started without command line arguments.</p>
                <p>If an MPI channel is used, then the underlying transport (TCP, IB, shared memory, etc.) is determined by MPI tools. Usually it's a command line option for <code>mpirun</code> or an environment variable, but it depends on the MPI implementation. Often MPI automatically determines the "best" transport. For example, If we run multiple processes on a single physical host, MPI will use IPC (shared memory). If we run the application on different hosts that have <code>Infiniband</code>, MPI will use the IB transport, otherwise (without <code>Infiniband</code>) it will use TCP.</p>
                <p>The limitation of MPI is that it uses a static process model. There is no convenient and standard way to handle a node's failure or to dynamically connect new nodes. The MPI implementations may provide tools or APIs for Network-Level fault tolerance, migration, etc., but these features are not covered by the standard, so they highly depend on the MPI library in use.</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>