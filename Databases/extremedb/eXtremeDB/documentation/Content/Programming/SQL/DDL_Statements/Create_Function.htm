<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>SQL Create Function</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>SQL Create Function</h1>
            <blockquote>
                <p>The <code>create function</code> statement is used to create a <a href="../../../Users_Guides/SQL/C++_API/User_Defined_Functions.htm">User Defined Function</a>.</p>
                <p>The complete syntax is as follows:</p>
                <div class="code-block"><pre>&#160;
    CREATE FUNCTION name "(" { arg_name data_type  [ "," ... ] ")"
        RETURNS return_type [VOLATILE]
&#160;
    AS library_path ["," c_function_name ] | 
    IN "'"language_name"'" AS "'"function_body"'"
    &#160;
    data_type: 
        BIT | BOOLEAN | CHAR [ "(" size ")" ] | VARCHAR [ "(" size ")" ] | LOGNVARCHAR [ "(" size ")" ] | 
        STRING [ (" width ")" ] | UNICODE[ (" width ")" ]  -- corresponds to eXtremeDB nstring or nchar
        | TINYINT    -- signed&lt;1&gt;
        | SMALLINT -- signed&lt;2&gt;
        | INT [ "(" n ")" ]      -- where n=1,2,4,8 corresponds to eXtremeDB signed&lt;n&gt;
        | INTEGER [ "(" n ")" ]      -- where n=1,2,4,8 corresponds to eXtremeDB signed&lt;n&gt;
        | UNSIGNED [ "(" n ")" ]      -- where n=1,2,4,8 corresponds to eXtremeDB unsigned&lt;n&gt;
        | BIGINT -- signed&lt;8&gt;
        | FLOAT
        | REAL -- double
        | DOUBLE
        | NUMERIC [ "(" width [ "," precision ]  ")" ]  -- eXtremeDB numeric&lt; width,precision&gt; type
        | DECIMAL [ "(" width [ "," precision ]  ")" ]   -- eXtremeDB numeric&lt; width,precision&gt; type
        | DATE -- eXtremeDB 8-byte datetime type
        | TIME   -- eXtremeDB 8-byte datetime type
        | TIMESTAMP  -- eXtremeDB 8-byte datetime type
        | BIANRY [ "(" size ")" ]  --- array or vector of signed&lt;1&gt;
        | VARBINARY  [ "(" size ")" ]   --- array or vector of signed&lt;1&gt;
        | LONGVARBINARY  [ "(" size ")" ]   --- array or vector of signed&lt;1&gt;
        | REFERENCE
        | BLOB
        | ARRAY "(" data_type [ "," length ] ")"
        | SEQUENCE "(" scalar_data_type [ ASC | DESC ] ")"
        | user-defined-type  -- declared by "create domain"
        &#160;</pre>
                </div>
                <p>Note that all SQL keywords are case <i>insensitive</i> in <i>e</i>X<i>treme</i>SQL - i.e. "<code>CREATE FUNCTION</code>" and <code>"create function"</code> are equivalent.</p>
                <h2>Examples</h2>
                <p>For example, the following SQL statement could be executed for loading the C++ user-defined function <code>load_cme_trades()</code> as SQL function <code>load_trades()</code>:</p>
                <div class="code-block"><pre>&#160;
    create function load_trades(fname string, book string) returns integer as 'mcocme', 'load_cme_trades';
            
    &#160;</pre>
                </div>
                <p>Here <code>mcocme</code> refers to the dynamic load file <code>libmcocme.so</code> (or <code>mcocme.dll</code> on Windows systems) that contains the implementation of UDF <code>load_cme_trades</code>.</p>
                <p>When executed this statement creates table <i>Functions</i>, if it is not already created, and inserts the row defining this UDF.</p>
                <p>To create function defined in scripting language, which can be called stored procedure, the second form of the <code>create</code> statement can be used. For example, a Lua UDF could be defined as follows:</p>
                <div class="code-block"><pre>&#160;
    create function twice(x integer) returns integer in 'lua' as 'return x+x end';
    &#160;</pre>
                </div>
                <p>Or, a Python UDF could be defined as follows:</p>
                <div class="code-block"><pre>&#160;
    create function pyadd(x int, y int) returns int in 'python' as 'return x+y end';
    &#160;</pre>
                </div>
                <p>The UDFs can then be executed in SQL with a statement like the following:</p>
                <div class="code-block"><pre>&#160;
    XSQL&gt;select twice(3), pyadd(5,7);
    #1 #2
    -----------------------------------------
    6 12
&#160;
    Selected records: 1
    &#160;</pre>
                </div>
                <p>When a Python UDF is first called, it loads the python interpreter, compiles the function code and executes it. A reference to the created interpreter object and compiled code is saved in memory, so this loading process occurs only one time in the life of the application and the UDF is compiled only once.</p>
                <p>(Note that, for Windows users, a Python UDF module (DLL) <code>mcopythonapi.dll</code> is a plugin module for the <i>e</i>X<i>treme</i>SQL engine, and has a link dependency to library <code>mcosql.dll</code>. This means that to use a UDF (Lua as well as Python  UDFs) from a user program, it must load <i>e</i>X<i>treme</i>SQL and the <i>e</i>X<i>treme</i>DB<a name="kanchor12"></a> core runtime dynamically. See <code><a href="../../C/Core_Functions/Static/Auxiliary/Miscellaneous/core_load.htm">mco_core_load()</a></code> for further details)</p>
                <h2>Function Caching</h2>
                <p>When a function call is performed, the SQL engine will store the function result and use this cached value for subsequent calls of this function if the function arguments are the same; i.e. <i>the arguments are the same syntactic construct in the query</i>.</p>
                <p>So call will be cached if:</p>
                <ul>
                    <li value="1">the argument is a constant expression</li>
                </ul>
                <p>or</p>
                <ul>
                    <li value="1">the argument is physically the same database value; i.e. it is the same column value in the same row in the same table.</li>
                </ul>
                <p>It will not be cached if:</p>
                <ul>
                    <li value="1">a constant expression or column appeared more than one time in a query</li>
                </ul>
                <p>Practically, only two use cases are known to use the function result caching:</p>
                <ul>
                    <li value="1">an evaluation function of a constant expression for many rows in the result</li>
                    <li value="2">when joining two tables <i>A</i> and <i>B</i> in a query like "select * from A,B where sin(A.x) &gt; 0;". Here function <code>sin(A.x)</code> will be called only cardinality(A) times, but not cardinality(A) * cardinality(B).</li>
                </ul>
                <p>For some functions this caching is not appropriate, e.g. <code>random()</code>. To disable caching for a particular function, the <code>VOLATILE</code> flag can be used.</p>
                <h3>Example</h3>
                <div class="code-block"><pre>    &#160;
    create function vmtf(name varchar, dept_no unsigned(2), salary unsigned(4)) returns int VOLATILE in 'lua' as '
        require("test_udf")
            return mtf_impl(name, dept_no, salary)
        end
        ';
        &#160;</pre>
                </div>
                <p>(To remove a function a <code><a href="Drop_Synonym.htm"><a href="Drop_Function.htm"><code>drop function</code></a></a></code> statement is used.)</p>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>