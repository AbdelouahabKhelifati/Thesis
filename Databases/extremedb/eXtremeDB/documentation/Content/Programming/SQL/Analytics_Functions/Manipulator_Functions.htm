<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sequence Manipulator SQL Functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Sequence Manipulator SQL Functions</h1>
            <blockquote>
                <p>The following <i>sequence manipulator</i> functions take a variety of <i>input</i> sequence or scalar arguments and produce result sequences or scalar types as described in the table below:</p>
                <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 226px;" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Repeat.htm">seq_repeat( n_times )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence with each element of the object's sequence repeated <i>n_times</i> <![CDATA[ ]]></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Reverse.htm">seq_reverse( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the <i>input</i> sequence in reverse order</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Concat.htm">seq_concat( input1, input2 )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the <i>input1</i> sequence concatenated with the <i>input2</i> sequence</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Subseq.htm">seq_subseq( input, from, till )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sub-sequence [<i>from</i>,<i>till</i>] of the <i>input</i> sequence</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Diff.htm">seq_diff( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence consisting of the differences between pairs of the <i>input</i> sequence elements </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Unique.htm">seq_unique( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return only the unique elements in the ordered <i>input</i> sequence  by "collapsing duplicates"</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Norm.htm">seq_norm( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the normalized values of the <i>input</i> sequence; i.e. divide each sequence element by the square root of the sum of squares of all elements</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Trend.htm">seq_trend( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the  trend by comparing pairs</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Ceil_Floor.htm">seq_ceil( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence of nearest integer values <b>greater than</b> the <i>input</i> element values of type double</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Ceil_Floor.htm">seq_floor( input )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence of nearest integer values <b>less than</b> the <i>input</i> element values of type double</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Stretch.htm">seq_stretch()</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Returns a sequence of the same length as argument 1 containing values from the sequence val</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Stretch0.htm">seq_stretch0()</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Returns a sequence of the same length as argument 1 containing values from the sequence val. Injects missed elements associated with argument 2 so that the corresponding timestamps of ts1 and ts2 are matched</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Asof_Join.htm">seq_asof_join()</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence of the <i>values</i> sequence corresponding to the timestamp of <i>ts2</i> closest to the timestamp of <i>ts1</i>. For example, assume <i>ts1</i> = <code>{4,9}</code>, <i>ts2</i> = <code>{1,3,6,10}</code>, and <i>values</i> = <code>{0.1,0.3,0.6,1.0}</code>. With these input sequences the result will be  <code>{0.3,1.0}</code> <![CDATA[ ]]></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/SQL_Cross.htm">seq_cross( input, cross_direction )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the positions in the  sequence where it crosses zero. If the integer argument <i>cross_direction</i> is positive then the <i>result</i> sequence starts with the first cross above zero; if negative it starts with cross below zero; if <i>cross_direction</i> is zero then it doesn't matter, i.e. the first cross can be above or below zero.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1"><a href="Manipulator/SQL_Extrema.htm">seq_extrema( input, first_extremum )</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Return the positions  of extrema (local minimum and maximums) in the <i>input</i> sequence. If the integer argument <i>first_extremum</i> is positive then the result sequence starts with first local maximum; if negative it starts with with local minimum; if <i>first_extremum</i> is zero then it doesn't matter.</td>
                        </tr>
                    </tbody>
                </table>
                <h2>Example</h2>
                <p>Following is an example code snippet demonstrating <i>sequence manipulator</i> methods:</p>
                <div class="code-block"><pre>    &#160;
    -- seq_repeat, seq_reverse
            
    &#160;
    INSERT INTO SimpleSequence(testNumber,iVal1)
        VALUES(4,'{42,17}');
&#160;
    SELECT iVal1,seq_repeat(iVal1,3) AS "repeat" FROM SimpleSequence 
    WHERE testNumber=4;
    SELECT iVal1,seq_reverse(iVal1) AS "reverse" FROM SimpleSequence 
    WHERE testNumber=4;
    &#160;
    iVal1{}   
    repeat{}
    -------------------------------------------------------------------------
    {42, 17}        
    {42, 42, 42, 17, 17, 17}
    &#160;
    iVal1{} 
      reverse{}
    -------------------------------------------------------------------------
    {42, 17} 
           {17, 42}
    &#160;
    &#160;
    -- seq_concat, seq_subseq
            
    &#160;
    INSERT INTO SimpleSequence(testNumber,iVal1,iVal2)
        VALUES(1,'{42,-13,27,19}','{2,3}');
&#160;
    SELECT iVal1,iVal2,seq_concat(iVal1,iVal2) AS "concat" FROM SimpleSequence 
    WHERE testNumber=1;
    SELECT iVal1, seq_subseq(iVal1,1,2) AS "subseq" FROM SimpleSequence 
    WHERE testNumber = 1;
    &#160;
    iVal1{}  
     iVal2{}  
     concat{}
    -------------------------------------------------------------------------
    {42, -13, 27, 19}       
    {2, 3} 
     {42, -13, 27, 19, 2, 3}
    &#160;
    iVal1{} 
      subseq{}
    -------------------------------------------------------------------------
    {42, -13, 27, 19}       
    {-13, 27}
    &#160;
&#160;
    -- seq_diff, seq_unique
            
&#160;
    INSERT INTO SimpleSequence(testNumber,iVal1)
        VALUES(2,[4,9,2,9,1,4,9,7,5,3]);
    INSERT INTO SimpleSequence(testNumber,iVal1)
        VALUES(3,[4,4,7,7,7,5,4,3]);
    &#160;
    SELECT iVal1, seq_diff(iVal1) AS "diff" FROM SimpleSequence 
    WHERE testNumber = 2;
    SELECT iVal1, seq_unique(iVal1) AS "unique" FROM SimpleSequence 
    WHERE testNumber = 3;
    &#160;
    iVal1{} 
      diff{}
    -------------------------------------------------------------------------
    {4, 9, 2, 9, 1, 4, 9, 7, 5, 3}  
    {0, 5, -7, 7, -8, 3, 5, -2, -2, -2}
    &#160;
    iVal1{} 
      unique{}
    -------------------------------------------------------------------------
    {4, 4, 7, 7, 7, 5, 4, 3} 
           {4, 7, 5, 4, 3}
    &#160;
    &#160;
    -- seq_norm, seq_trend
            
    &#160;
    INSERT INTO SimpleSequence(testNumber,dVal1)
        VALUES(5,[1,2,3]);
    INSERT INTO SimpleSequence(testNumber,iVal1)
        VALUES(6,[1,2,3,3,2,2,4,5,6,5]);
        &#160;
    SELECT dVal1, seq_norm(dVal1) AS "norm" FROM SimpleSequence 
    WHERE testNumber = 5;
    SELECT iVal1, seq_trend(iVal1) AS "trend" FROM SimpleSequence 
    WHERE testNumber = 6;
    &#160;
    dVal1{} 
      norm{}
    -------------------------------------------------------------------------
    {1, 2, 3} 
          {0.267261241912424, 0.534522483824849, 0.801783725737273}
    &#160;
    iVal1{} 
      trend{}
    -------------------------------------------------------------------------
    {1, 2, 3, 3, 2, 2, 4, 5, 6, 5} 
     {0, 1, 1, 1, -1, -1, 1, 1, 1, -1}
    &#160;
    -- seq_ceil, seq_floor
            
&#160;
    INSERT INTO SimpleSequence(testNumber,dVal1)
        VALUES(4,[2.9,3.14,4.6]);
&#160;
    SELECT dVal1, seq_ceil(dVal1) AS "ceil" FROM SimpleSequence 
    WHERE testNumber = 4;
    SELECT dVal1, seq_floor(dVal1) AS "floor" FROM SimpleSequence 
    WHERE testNumber = 4;
    &#160;
    dVal1{} 
      ceil{}
    -------------------------------------------------------------------------
    {2.9, 3.14, 4.6}        
    {3, 4, 5}
    &#160;
    dVal1{} 
      floor{}
    -------------------------------------------------------------------------
    {2.9, 3.14, 4.6}        
    {2, 3, 4}
&#160;
    -- seq_stretch, seq_stretch0
            
    &#160;
    INSERT INTO SimpleSequence(testNumber,ts1,ts2,dVal3)
        VALUES(5,'{1,2,3,4,5}','{2,4}','{1.1,2.2}');
    INSERT INTO SimpleSequence(testNumber,ts1,ts2,dVal3)
        VALUES(6,'{1,2,3,5}','{2,3,4}','{1.1,1.2,1.3}');
        &#160;
    SELECT ts1,ts2,dVal3,seq_stretch(ts1,ts2,dVal3) AS "stretch" FROM SimpleSequence 
    WHERE testNumber=5;
    SELECT ts1,ts2,dVal3,seq_stretch0(ts1,ts2,dVal3) AS "stretch0" FROM SimpleSequence 
    WHERE testNumber=6;
    &#160;
    ts1{}  
       ts2{} 
        dVal3{} 
      stretch{}
    -------------------------------------------------------------------------
    {1, 2, 3, 4, 5} 
    {2, 4} 
     {1.1, 2.2} 
         {1.1, 2.2, 2.2, 1, 1}
    &#160;
    ts1{} 
        ts2{} 
        dVal3{} 
      stretch0{}
    -------------------------------------------------------------------------
    {1, 2, 3, 5} 
       {2, 3, 4} 
          {1.1, 1.2, 1.3} 
    {0, 1.1, 1.2, 1.3, 0}
    &#160;
    -- _asof_join
            
    INSERT INTO SimpleSequence(testNumber,ts1,ts2,dVal3)
    VALUES(7,'{4,9}','{1,3,6,10}','{0.1,0.3,0.6,1.0}');
    &#160;
    SELECT ts1,ts2,dVal3,seq_asof_join(ts1,ts2,dVal3) AS "asof_join" FROM SimpleSequence 
    WHERE testNumber=7;
    &#160;
    ts1{} 
        ts2()
         dVal3{}   
    asof_join{}
    -------------------------------------------------------------------------
    {4, 9} 
     {1, 3, 6, 10}   
    {0.1, 0.3, 0.6, 1}      
    {0.3, 1}
    &#160;
    -- _cross
            
    INSERT INTO SimpleSequence(testNumber,iVal1)
    VALUES(8,'{-1,0,1,-3,2}');
&#160;
    SELECT iVal1,seq_cross(iVal1,-1) AS "cross-neg", seq_cross(iVal1,1) AS "cross-pos",
        seq_cross(iVal1,0) AS "cross-0" FROM SimpleSequence 
    WHERE testNumber=8;
    &#160;
    iVal1{} 
      cross-neg{} 
          cross-pos{} 
          cross-0{}
    -------------------------------------------------------------------------
    {-1, 0, 1, -3, 2} 
          {3}     
    {1, 4} 
    {1, 3, 4}
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>