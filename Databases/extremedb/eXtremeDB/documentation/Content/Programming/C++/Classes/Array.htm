<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|C++ API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The C++ Array Class</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/IndentedFunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The C++ <i>Array</i> Class</h1>
            <p>The <i>Array</i> class is provided for handling arrays of <i><a href="Value.htm">Values</a></i>. </p>
            <h3>For an overview see page <a href="../Cpp_Classes.htm">C++ Classes</a></h3>
            <p>Note that <i>Array</i> inherits from <i><a href="List.htm">List</a></i> which implements methods common to <i>Arrays</i> and <i><a href="String.htm">Strings</a></i>.</p>
            <p class="BodyParagraph">The <i>Array</i> methods are listed below.</p>
            <table class="TableStyle-IndentedFunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');" cellspacing="0">
                <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 388px;" />
                <col class="TableStyle-IndentedFunctionReference-Column-Column2" style="width: 464px;" />
                <tbody>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">McoSql::ValueRef <b>getAt</b>(
		size_t index )
</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                            <p>Return a reference to the <i><a href="Value.htm">Value</a></i> object at <code>index</code>. (Note that, if the application gets a reference to an object, and this object is deallocated (perhaps along with its parent array), <i>the reference becomes invalid</i>. In this case the user should obtain a copy of the object using <code>getCopyAt()</code>(see  below) instead of the reference.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">McoSql::Value *<b>getCopyAt</b>(
		size_t index )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Return a copy of the object at <code>index</code>. Note that the difference between <code>getAt()</code> and <code>getCopyAt()</code> is that <code>getAt()</code> returns a reference (<code>ValueRef</code>) to the element in the array, while <code>getCopyAt()</code> returns a copy of the element. When using <code>getCopyAt()</code>, the application is responsible for explicitly freeing (deallocating) the copy.  For example:<div class="code-block"><pre>&#160;
  // Get a copy of the object at index 0
  McoSql::Value *v = array-&gt;getCopyAt(0);
  &#160;
  // Use the object...
  &#160;
  // Explicitly destroy the copy to avoid memory leak
  v-&gt;destroy(&amp;allocator);
&#160;</pre></div></td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">void <b>setAt</b>( size_t index, McoSql::Value* value)</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Set the array element at position <code>index</code> to <code>value</code></td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">Value *	<b>updateAt</b>(	int index )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Get the structure or array element with the specified index for update; returns the <i><a href="Value.htm">Value</a></i> of the element with the specified index whose components or elements will be updated</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">size_t <b>size</b>();</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Return the number of elements in the allocated array</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">void <b>setSize</b>(size_t newSize);</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Set the number of elements in the array to operate on. Note that the specified size <i>must not exceed the size of the allocated array</i> (returned by method <code>size()</code>) and it is necessary to later restore it to the original value (by calling again method <code>setSize()</code>) after the desired operation is completed;
         <i>otherwise deallocation will be performed incorrectly</i></td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">void	<b>getBody</b>(	void * dst,
		size_t offs,
		size_t len )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Copy the specified number of elements <code>len</code> from the array body to the buffer <code>dst</code>. (Note that this method can be used only for arrays of scalar types)
</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">void	<b>setBody</b>(	void * src,
		size_t offs,
		size_t len )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Set the specified number of elements <code>len</code> from the buffer <code>src</code> to the array body (Note that this method can be used only for arrays of scalar types)
</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">size_t <b>getElemSize</b>(	void )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Return the size in bytes of an array element</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">McoSql::Type <b>getElemType</b>()</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Return the type of the type of the array elements</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">size_t	<b>toString</b>(	char * buf ,
		size_t &amp; size )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Serialize the current <i><a href="Value.htm">Value</a></i> to the specified buffer. Only <code>size</code> bytes are copied (Note that if the terminating null does not fit in size bytes, the resulting buffer will NOT be null-terminated)</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">Value *	<b>clone</b>(	McoSql::Allocator* allocator )</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Create a copy of the array using the specified memory <code>allocator</code></td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">Array * <b>makeNullable</b>()</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">Return the underlying value array as a <i><a href="NullableArray.htm">NullableArray</a></i></td>
                    </tr>
                </tbody>
            </table>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>