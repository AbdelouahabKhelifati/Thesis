<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Java API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The Java LogReader Class</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The Java <i>LogReader</i> Class</h1>
            <p><i>LogReader</i> provides an <i>e</i>X<i>treme</i>DB<i> Transaction Logging</i> transaction log reader.</p>
            <h3>Class Definition</h3>
            <div class="code-block"><pre>&#160;
    public class LogReader
    {
        /**
        *  Transaction log reader constructor.
        *  @param con Connection to the pipe database or to the database where log is replayed
        *  @param filePath Path to the transaction log file
        */
        public LogReader(Connection con, String filePath)
        {
            this.con = con;
            this.filePath = filePath;
        }
&#160;
        /**
        *  Apply transactions from the log to the database up to the specified label id
        *  @param labelId Label ID
        */
        public void apply(int labelId)
        {
            applyLog(con.id, filePath, labelId);
        }
&#160;
        /**
        *  Apply transactions from the log to the database up to the end of log
        */
        public void apply()
        {
            applyLog(con.id, filePath, -1);
        }
&#160;
        /**
        *  Information gathered from log file
        */
        public static class LogInfo
        {
            /**
            *  Transaction counter at start of log
            */
            public long    startTransCounter;
&#160;
            /**
            *  Transaction counter at end of log
            */
            public long    stopTransCounter;
&#160;
            /**
            *  Count of stored transactions
            */
            public long    storedTransactions;
&#160;
            /**
            *  Size of single disk page
            */
            public int     diskPageSize;
&#160;
            /**
            *  Size of in-memory database page
            */
            public int     pageSize;
            &#160;
            /**
            *  Size of log in bytes
            */
            public long    logSize;
&#160;
            /**
            *  List of labels it the log
            */
            public String[] labels;
            &#160;
            /**
            *  If log covered with CRC32
            */
            public boolean crc;
&#160;
            /**
            *  If log written with alignment
            */
            public boolean aligned;
            &#160;
            /**
            *  If log compatible with current dict.
            */
            public boolean dictionaryCompat;
&#160;
            /**
            *  If log suitable to be applied
            */
            public boolean transactionApplyCompat;
&#160;
            /**
            *  If log suitable to be appended
            */
            public boolean transactionAppendCompat;
&#160;
            /**
            *  If log finished correctly
            */
            public boolean notCorrupted;
&#160;
            /**
            *  Log is applicable for synchronisation with external database (saved with flag MCO_TRANSLOG_ITERABLE)
            */
            public boolean iteratable;
        }
    &#160;
        /**
        *  Get information about the log file
        */
        public LogInfo getInfo()
        {
            return getLogReaderInfo(con.id, filePath);
        }
&#160;
        /**
        *  Interface for iterator through transaction log objects
        */
        public interface LogIterator
        {
            /**
            *  Callback on object creation
            *  @param obj Created object
            */
            void create(Object obj);
&#160;
            /**
            *  Callback on object update
            *  @param obj Updated object
            */
            void update(Object obj);
&#160;
            /**
            *  Callback on object delete
            *  @param obj Deleted object
            */
            void delete(Object obj);
&#160;
            /**
            *  Callback on delete all class instances
            *  @param type Type of the deleted objects
            */
            void deleteAll(Class type);
&#160;
            /**
            *  Callback on end of transaction. Is called if option RT_OPTION_MARK_LAST_OBJ set
            */
            void endOfTransaction();
        }
&#160;
        /**
        *  Iterate through transaction log file entries
        *  @param iterator Iterator class which method will be invoked for all log entries
        *  @param memSize Size of temporary database used to fetch objects 
        * (should be large enough to fit the largest objects)
        */
        public void iterateFile(LogIterator iterator, long memSize, long hint)
        {
            Database db = con.db;
            iterateLog(0, filePath, db.structsList.toArray(), db.classes, db.hasInmemDistribClasses, 
                    db.hasDiskDistribClasses, db.totalFields, db.totalIndices, db.totalKeys, 
                    db.events.size(), db.config, iterator, memSize, hint, null);
        }
&#160;
        /**
        *  Iterate through transaction log entries fetched from pipe
        *  @param iterator Iterator class which method will be invoked for all log entries
        *  @param memSize Size of temporary database used to fetch objects (should be large enough to fit the largest objects)
        */
        public void iteratePipe(LogIterator iterator, long memSize, long hint)
        {
            Database db = con.db;
            iterateLog(con.id, filePath, db.structsList.toArray(), db.classes, db.hasInmemDistribClasses, 
                    db.hasDiskDistribClasses, db.totalFields, db.totalIndices, db.totalKeys, 
                    db.events.size(), db.config, iterator, memSize, hint, null);
        }
        public void iteratePipe(LogIterator iterator, long memSize, long hint, Database.Device pipe)
        {
            Database db = con.db;
            iterateLog(con.id, filePath, db.structsList.toArray(), db.classes, db.hasInmemDistribClasses, 
                    db.hasDiskDistribClasses, db.totalFields, db.totalIndices, db.totalKeys, 
                    db.events.size(), db.config, iterator, memSize, hint, pipe);
        }
&#160;
        /**
        *  Stop method iteratePipe specified by connection of current LogReader
        */
        public void stopPipeIteration()
        {
            stopIteration(con.id);
        }
&#160;
        Connection con;
        String filePath;
&#160;
        /**
        *  Internal method, should not be called by application
        */
        public int invokeCallback(LogIterator iterator, int operation, int classId, long handle)
        {
            ...
        }
&#160;
        private native void applyLog(long con, String filePath, int labelId);
        private native LogReader.LogInfo getLogReaderInfo(long con, String filePath);
        private native void iterateLog(long con, String filePath, Object[] structs,
                            Database.ClassDescriptor[] classes, 
                            boolean hasInmemDistribClasses, 
                            boolean hasDiskDistribClasses,
                            int totalFields, int totalIndices, int totalKeys, 
                            int totalEvents, int config,
                            LogIterator iterator, long memSize, long hint, 
                            Database.Device pipe);
        private native void stopIteration(long con);
    }
    &#160;</pre>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>