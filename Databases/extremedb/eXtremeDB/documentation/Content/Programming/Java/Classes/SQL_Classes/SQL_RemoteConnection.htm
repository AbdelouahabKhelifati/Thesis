<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Java API|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The Java SqlRemoteConnection Class </title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The Java  <i>SqlRemoteConnection</i>  Class </h1>
            <p><i>SqlRemoteConnection</i> provides </p>
            <h3>For an overview see page <a href="../../Java_Classes.htm">Java Classes</a></h3>
            <h3>Class Definition</h3>
            <div class="code-block"><pre>&#160;
    public  class SqlRemoteConnection implements SqlConnection, java.io.Closeable
    {
&#160;
        public static class OpenParameters
        {
            public String host = null;
            public int port;
            public String[] nodes;
            public int nReplicas;
            public ReplicationType replType;
            public int maxAttempts;
            public int txBufSize;
            public int connectTimeout;
            public int readTimeout;
            public int compressionLevel;

&#160;
            public Database.SSLParameters sslParameters;
            public String user;
            public String password;
&#160;
            public OpenParameters() 
            {
                host = null;
                port = 0;
                nodes = null;
                nReplicas = 1;
                replType = ReplicationType.SQLReplication;
                maxAttempts = 10;
                txBufSize = 64*1024;
                connectTimeout = 2000;
                readTimeout = 1200*1000;
                compressionLevel = 0;
                sslParameters = null;
                user = null;
                password = null;
            }
        }
&#160;
        public SqlRemoteConnection(OpenParameters params) 
        {
            if (params.host != null) 
            {
                engine = open(params.host, params.port, params.maxAttempts, 
                    params.txBufSize, params.connectTimeout, params.readTimeout,
                    params.sslParameters, params.user, params.password );
            } else if (params.nodes != null) 
            {
                engine = openDistributed(params.nodes, params.nReplicas, params.replType.ordinal(),
                    params.maxAttempts, params.txBufSize, params.connectTimeout, params.readTimeout,
                    params.sslParameters, params.user, params.password);
            } else 
            {
                throw new IllegalArgumentException("host or nodes should be set in OpenParameters");
            }
        }
&#160;
        /**
        * Constructor of the remote database connection.
        * @param host hostname of xsql server
        * @param port port of xsql server
        * @param maxAttempts maximal attempts of connection to server, interval between
        * each connection attempt is one second, so totally connection will be performed
        * during maxAttempts seconds
        */
        public SqlRemoteConnection(String host, int port, int maxAttempts) 
        {
            engine = open(host, port, maxAttempts, 64*1024, 2000, 1200*1000, null, null, null);
        }
&#160;
        /**
        * Constructor of the remote database connection.
        * @param host hostname of xsql server
        * @param port port of xsql server
        * @param maxAttempts maximal attempts of connection to server, interval between
        * each connection attempt is one second, so totally connection will be performed
        * during maxAttempts seconds
        * @param txBufSize size of internal transmit buffer in bytes. Required to serialize
        * query or statement data
        */
        public SqlRemoteConnection(String host, int port, int maxAttempts, int txBufSize) 
        {
            engine = open(host, port, maxAttempts, txBufSize, 2000, 1200*1000, null, null, null);
        }
&#160;
        /**
        * Constructor of the remote database connection.
        * @param host hostname of xsql server
        * @param port port of xsql server
        * @param maxAttempts maximal attempts of connection to server, interval between
        * each connection attempt is one second, so totally connection will be performed
        * during maxAttempts seconds
        * @param txBufSize size of internal transmit buffer in bytes. Required to serialize
        * query or statement data
        * @param connectTimeout timeout for each connect attempt in milliseconds, so totally
        * connection can take up to connectTimeout*maxConnectionAttempts milliseconds
        * @param readTimeout timeout for read operations in milliseconds
        */
        public SqlRemoteConnection(String host, int port, int maxAttempts, int txBufSize, int connectTimeout, 
                        int readTimeout) 
        {
            engine = open(host, port, maxAttempts, txBufSize, connectTimeout, readTimeout, null, null, null);
        }
&#160;
        public enum ReplicationType { SQLReplication, HAReplication };
        /**
        * Constructor of the distributed database connection.
        * @param nodes database nodes (each entry should have format "ADDRESS:PORT")
        * @param nReplicas redundancy level
        * @param replType replication method
        * @param maxAttempts maximal attempts of connection to server, interval between
        * each connection attempt is one second, so totally connection will be performed
        * during maxAttempts seconds
        * @param txBufSize size of internal transmit buffer in bytes. Required to serialize
        * query or statement data
        */
        public SqlRemoteConnection(String[] nodes, int nReplicas, ReplicationType replType, int maxAttempts, 
                        int txBufSize) 
        {
            engine = openDistributed(nodes, nReplicas, replType.ordinal(), maxAttempts, txBufSize, 
                            2000, 1200*1000, null, null, null);
        }
&#160;
        /**
        * Constructor of the distributed database connection.
        * @param nodes database nodes (each entry should have format "ADDRESS:PORT")
        */
        public SqlRemoteConnection(String[] nodes) 
        {
            engine = openDistributed(nodes, 1, ReplicationType.SQLReplication.ordinal(), 10, 64*1024, 
                            2000, 1200*1000, null, null, null);
        }
&#160;
        /**
        * Constructor of the distributed database connection.
        * @param nodes database nodes (each entry should have format "ADDRESS:PORT")
        * @param nReplicas redundancy level
        * @param replType replication method
        * @param maxAttempts maximal attempts of connection to server, interval between
        * each connection attempt is one second, so totally connection will be performed
        * during maxAttempts seconds
        * @param txBufSize size of internal transmit buffer in bytes. Required to serialize
        * query or statement data
        * @param connectTimeout timeout for each connect attempt in milliseconds, so totally
        * connection can take up to connectTimeout*maxConnectionAttempts milliseconds
        * @param readTimeout timeout for read operations in milliseconds
        */
        public SqlRemoteConnection(String[] nodes, int nReplicas, ReplicationType replType, int maxAttempts, 
                        int txBufSize, int connectTimeout, int readTimeout) 
        {
            engine = openDistributed(nodes, nReplicas, replType.ordinal(), maxAttempts, txBufSize, 
                            connectTimeout, readTimeout, null, null, null);
        }
&#160;
        /**
        * Execute SQL query.
        * @param query SQL query with '?' used as parameter placeholder.
        * @return cursor through selected tuples
        */
        public SqlResultSet executeQuery(String query, Object... params) 
        {
            if (result != null) 
            {
                result.close();
            }
            return result = new SqlResultSet(this, executeQuery(engine, query, params));
        }
&#160;
        /**
        * Execute SQL update statement
        * @param stmt SQL DML statement with '?' used as parameter placeholder.
        * @return number of affected (updated, inserted, deleted) records
        */
        public int executeStatement(String stmt, Object... params) 
        {
            return executeStatement(engine, stmt, params);
        }
&#160;
        public void detachResultSet(SqlResultSet res) 
        {
            result = null;
        }
&#160;
        /**
        * Close this connection.
        */
        public void disconnect() 
        {
            if (engine != 0) 
            {
                if (result != null) 
                {
                    result.close();
                    result = null;
                }
                close(engine);
                engine = 0;
            }
        }
&#160;
        /**
        * Close this connection. The same as disconnect.
        */
        public void close() 
        {
            disconnect();
        }
&#160;
        private SqlResultSet result;
        private long engine;
        private native long open(String host, int port, int maxAttempts, int txBufSize, 
                        int connectTimeout, int readTimeout, 
                        Database.SSLParameters params, String user, String password);
        private native long openDistributed(String[] nodes, int nReplicas, int replType, int maxAttempts, 
                        int txBufSize, int connectTimeout, int readTimeout, 
                        Database.SSLParameters params, String user, String password);
        private native long executeQuery(long engine, String query, Object[] params);
        private native int  executeStatement(long engine, String stmt, Object[] params);
        private native void close(long engine);
    };
    &#160;</pre>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>