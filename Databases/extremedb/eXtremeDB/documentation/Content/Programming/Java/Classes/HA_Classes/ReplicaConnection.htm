<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Java API|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The Java ReplicaConnection Class</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>The Java <i>ReplicaConnection</i> Class</h1>
            <p><i>ReplicaConnection</i> extends the <i>Connection</i> class for <i>e</i>X<i>treme</i>DB<i> High Availability</i> <i>replica</i> applications.</p>
            <h3>Class Definition</h3>
            <div class="code-block"><pre>&#160;
    public class ReplicaConnection extends Connection 
    {
        /**
        * Switch to master after initial synchronization
        */
        public static final int MCO_HAMODE_FORCE_MASTER = 0x4000;
&#160;
        /**
        * Force to use synchronous replication
        */
        public static final int MCO_HAMODE_FORCE_SYNC = 0x10000;
&#160;
        /**
        * Send list of registered REST interfaces to master
        */
        public static final int MCO_HAMODE_SEND_RESTLIST = 0x20000;
&#160;
        /**
        * Don't restore WRITE access to the database on master disconnection
        */
        public static final int MCO_HAMODE_EXPLICIT_WRITE_ACCESS = 0x40000;
&#160;
        public ReplicaConnection(Database db) 
        {
            super(db);
        }
        &#160;
        public interface ReplicaNotifying 
        {
            public enum NotificationCode 
            {
                Connected,
                ConnectFailed,
                DbEqual,
                DbLoadBegin,
                DbLoadFailed,
                DbLoadOK,
                CommitFailed,
                ReplicaStopped,
                DbCreationFailed,
                HotSync,
                HotSyncEnd,
                StatefulSync,
                StatefulSyncEnd,
                MasterDbExtended,
                MasterDbCleaned
            }
&#160;
            public void onNotify(NotificationCode code, long param);
        };
&#160;
        /**
        * The replication connection parameters.
        */
        public static class Parameters
        {
            public static final int MSEC = 1000;
            &#160;
            /**
            * The timeout for read transaction data.
            */
            public int commitTimeout;
&#160;
            /**
            * The timeout (wait limit) for initial synchronization.
            */
            public int initialTimeout;
            &#160;
            /**
            * The amount of time a replica waits for a next commit.
            */
            public int waitDataTimeout;
&#160;
            /**
            * The number of times to repeat the commit if the master doesn't answer.
            */
            public int repeatCounter;
&#160;
            /**
            * Multicast support
            */
            public int mcastPort;
            public String mcastAddr;
&#160;
            /**
            * Disk commit policy during initial synchronization
            */
            public Database.CommitPolicy initialCommitPolicy;
&#160;
            /**
            * Number of objects per transaction during initial synchronization
            */
            public int initialObjsInTrans;
&#160;
            /**
            * A combination of MODE_* bit flags.
            */
            public int modeFlags;
            public ReplicaNotifying notifyCallback;
&#160;
            public String cancelpointAddr;
            public TransIterator.Iterator iterator;
&#160;
            /**
            SSL parameters or null if SSL not used
            */
            public Database.SSLParameters sslParameters = null;
&#160;
            /**
            * Compression level: 0..9, 0 - no compression
            */
            public int compressionLevel;
&#160;
            public Parameters(int mode) 
            {
                initParameters(this);
                modeFlags = mode;
            }
&#160;
            public Parameters() 
            {
                initParameters(this);
            }
        }
&#160;
        /**
        * Attach to the master application.
        * @param connectionString the master transport-layer-dependent connection string.
        * (For the TCP/UDP transport this must be "masterhost:port", where masterhost is the hostname or
        * IP-address of the master node, and "port" is the number of the listening port
        * (defined on the master side by the "masterport" parameter of attachReplica(); eg. '192.168.0.1:10000').
        * @param params the replication connection parameters.
        * @param timeout the connection timeout period.
        * @return true when the master is connected sucessfully, false if the master can not be connected within
        * the specified timeout period.
        */
        public boolean attachMaster(String connectionString, ReplicaConnection.Parameters params, int timeout) 
        {
            return attachMaster(id, connectionString, params, timeout);
        }
&#160;
        /**
        * Terminate the replica's wait for updates.
        */
        public void stopReplication() 
        {
            stopReplication(id);
        }
&#160;
        /**
        * Enable or disable replication filter for "local" classes
        */
        public void enableFilter(boolean enabled) 
        {
            enableFilter(id, enabled);
        }
&#160;
        public static native void cancel(String cancelAddr, int timeout);
&#160;
        private native boolean attachMaster(long id, String connectionString, ReplicaConnection.Parameters params, int timeout);
        private native void stopReplication(long id);
        private native void enableFilter(long id, boolean enabled);
        private static native void initParameters(ReplicaConnection.Parameters params);
    }
    &#160;</pre>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>