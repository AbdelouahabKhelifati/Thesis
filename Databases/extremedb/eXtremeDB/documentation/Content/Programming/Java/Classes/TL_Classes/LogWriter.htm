<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Java API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The Java LogWriter Class</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <blockquote>
                <h1>The Java <i>LogWriter</i> Class</h1>
                <p><i>LogWriter</i> provides an <i>e</i>X<i>treme</i>DB<i> Transaction Logging</i> transaction log writer.</p>
                <h3>Class Definition</h3>
                <div class="code-block"><pre>&#160;
    public class LogWriter
    {
        /**
        *  Start each record with new disk page
        */
        public static final int LF_ALIGNED                = 0x01;
&#160;
        /**
        *  Append to an existing log file
        */
        public static final int LF_APPEND                 = 0x02;
&#160;
        /**
        *  Cover transaction data with CRC32
        */
        public static final int LF_CRC                    = 0x04;
&#160;
        /**
        *  User call-back function to limit size  (not supported in .Net API)
        */
        public static final int LF_SIZE_CALLBACK          = 0x08;
&#160;
        /**
        *  Do disk flush on each record             *
        */
        public static final int LF_SYNC_INSTANTLY         = 0x10;
&#160;
        /**
        *  Do disk flush by timer
        */
        public static final int LF_SYNC_TIMER             = 0x20;
&#160;
        /**
        *  Do disk flush by record count
        */
        public static final int LF_SYNC_COUNT             = 0x40;
&#160;
        /**
        *  Make log applicable for LogReader.LogIterate method
        */
        public static final int LF_ITERABLE               = 0x80;
&#160;
        /**
        *  Stop previous log at once
        */
        public static final int LF_RESTART                = 0x100;
&#160;
        /**
        *  Use pipe interface instead of file
        */
        public static final int LF_PIPE                   = 0x200;
&#160;
        /**
        *  Support for dynamic pipes
        */
        public static final int LF_DYNAMIC_PIPE           = 0x1000;
&#160;
        /**
        *  Transaction log writer constructor
        *  @param con Database connection
        *  @param filePath Path to the written transaction log file
        */
        public LogWriter(Connection con, String filePath)
        {
            this.con = con;
            this.filePath = filePath;
        }
&#160;
        /**
        *  Logging parameters
        */
        public static class LogParams
        {
            /**
            *  Transaction log flags (bitmask of LF_* constants)
            */
            public int flags;
&#160;
            /**
            *  Size of single disk page
            */
            public int diskPageSize;
&#160;
            /**
            *  Maximum count of unflushed records
            */
            public int flushDepth;
&#160;
            /**
            *  Time lag between flushed records (milliseconds)
            */
            public long flushTime;
        };
&#160;
        /**
        *  Start transaction logging. Database should be created with Database.Mode.TransactionLoggtingSupport flag.
        *  @param logParams logginf parameters
        */
        public void start(LogParams logParams)
        {
            startLogging(con.id, filePath, logParams);
        }
&#160;
        /**
        *  Stop logging and close log file
        */
        public void stop()
        {
            stopLogging(con.id);
        }
&#160;
        /**
        *  Terminate logging if reader in pipe mode get defunctioned
        */
        public void terminate()
        {
            terminateLogging(con.id);
        }
&#160;
        /**
        *  Mark label on the log at current position (to allow replay of log up to current moment)
        *  @param label label name
        *  @return label id
        */
        public int setLabel(String label)
        {
            return setLogLabel(con.id, label);
        }
&#160;
        /**
        *  Truncate log and start it again (same as stop/start sequence)
        */
        public void truncate()
        {
            truncateLog(con.id);
        }
&#160;
        /**
        * Save a database snapshot to the specified file together with log truncation.
        * This snaphot can later be loaded by the Database.open method if the corresponding
        * file path is specified in Database.Parameters.databaseSnapshotFilePath.
        * This function guarantee both operations (Connection::saveSnapshot and
        * TransactionLog::truncate) in a single blocking to avoid missed transactions.
        * @param databaseSnapshotFilePath the path to the file where the snapshot will be saved.
        * (A file is always created or overwritten if it exists).
        * @return true if the snapshot was sucessfully saved and log was truncated, false if the 
        * specified file can not be opened or log truncation failed.
        */
        public boolean saveSnapshot(String databaseSnapshotFilePath) 
        {
            return saveDBLog(con.id, databaseSnapshotFilePath);
        }
&#160;
        /**
        *  Flush log immediately
        */
        public void flush()
        {
            flushLog(con.id);
        }
        &#160;
        /**
        *  Information about current log
        */
        public static class LogInfo
        {
            /**
            *  Transaction log flags (bitmask of LF_* constants)
            */
            public int      flags;
&#160;
            /**
            *  Transaction counter at start of log
            */
            public long     startTransCounter;
&#160;
            /**
            *  Current transaction counter
            */
            public long     lastTransCounter;
&#160;
            /**
            *  Count of stored transactions
            */
            public long     storedTransactions;
&#160;
            /**
            *  Size of log in bytes
            */
            public long     logSize;
            &#160;
            /**
            *  Used size of pipe in bytes
            */
            public long     pipeUsedSize;
&#160;
            /**
            *  Count of labels it the log
            */
            public int      labelsCount;
&#160;
            /**
            *  Max logging slots used for parallel transaction commits in mvcc. 
            * (Total number of slots is max_connections*2)
            */
            public int      maxParallelTrans;
&#160;
            /**
            *  Count of times when all of the of logging slots were exceeded
            */
            public int      exceededTransSlotsCount;
&#160;
            /**
            *  Size of largest transaction
            */
            public int      maxTransactionSize;
        }
&#160;
        /**
        *  Get information about the current log
        */
        public LogInfo getInfo()
        {
            return getLogWriterInfo(con.id);
        }
&#160;
        private native void startLogging(long con, String filePath, LogWriter.LogParams logParams);
        private native void stopLogging(long con);
        private native void terminateLogging(long con);
        private native int setLogLabel(long con, String label);
        private native void truncateLog(long con);
        private native boolean saveDBLog(long con, String name);
        private native void flushLog(long con);
        private native LogWriter.LogInfo getLogWriterInfo(long con);
&#160;
        Connection con;
        String filePath;
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>