<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Miscellaneous C Sequence Functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Miscellaneous C Sequence Functions</h1>
            <blockquote>
                <p>The following  functions take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below:</p>
                <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 211px;" />
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 446px;" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_histogram_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Build a histogram for the <i>input</i> sequence. Minimal (inclusive) and maximal (exclusive) values for input sequence should be specified as well as the number of intervals (histogram columns). (The number of intervals should not be greater than tile size)</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_histogram_TYPE(
            mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            TYPE min_value, 
            TYPE max_value, 
            size_t n_intervals);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_sort_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Sort the sequence elements previously extracted using <code><a href="Manipulator.htm">mco_seq_get()</a></code> and construct a permutation array (of positions) that can be used to access the elements of other sequences (also extracted to arrays)</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_sort_TYPE(TYPE const* elems, 
            mco_seq_no_t* permutation, 
            mco_size_t n_elems);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_order_by_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Sort the sequence elements using a permutation produced by <code>mco_seq_sort()</code>. If the <code>data</code> parameter is NULL, this function extracts all sequence elements to an array and then creates an iterator through this array according to the given permutation. The created array should be removed by a reset method. If the <code>data</code> parameter is not NULL, then the <i>input</i> iterator is ignored and data is taken from this array.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_order_by_TYPE(mco_seq_iterator_h result,
             mco_seq_iterator_h input, 
            mco_seq_no_t* permutation, 
            mco_size_t n_elems, 
            TYPE* data);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1" colspan="2">
                                <p>The following  group of C API functions  apply a specific operation via function pointer <i>func</i> to a single <i>input</i> sequence or to two input sequences, <i>left</i> and <i>right</i>.  They produce <i>result</i> sequences or scalar types as described in the table below:</p>
                                <p>For APIs <code>mco_seq_func2_TYPE()</code> and <code>mco_seq_func2_ctx_TYPE()</code> the two input sequences must be of the same type. If the two input sequences are of different lengths the operation will be performed on only the number of elements in the shorter of the two sequences. </p>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_func_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Apply the function pointed to by argument <i>func</i> to the <i>input</i> sequence and produce <i>result</i> sequence of the same TYPE<div class="code-block"><pre>&#160;
    MCO_RET mco_seq_func_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_func_TYPE_ptr_t func);
&#160;</pre></div></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_func2_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Apply the function pointed to by argument <i>func</i> to the  <i>left</i> and <i>right </i>sequences and produce <i>result</i> sequence of the same TYPE<div class="code-block"><pre>&#160;
    MCO_RET mco_seq_func2_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h left, 
            mco_seq_iterator_h right, 
            mco_seq_func_TYPE_ptr_t func);
&#160;</pre></div></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_func_ctx_TYPE</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Apply the function pointed to by argument <i>func</i> to the <i>input</i> sequence using the context pointed to by <i>ctx </i><p>and produce <i>result</i> sequence of the same TYPE</p><div class="code-block"><pre>&#160;
    MCO_RET mco_seq_func_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_func_TYPE_ptr_t func,
            void* ctx);
&#160;</pre></div></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_func2_ctx_TYPE</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Apply the function pointed to by argument <i>func</i> to the <i>input</i> sequence using the context pointed to by <i>ctx </i></p>
                                <p>and produce <i>result</i> sequence of the same TYPE</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_func2_ctx_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h left, 
            mco_seq_iterator_h right, 
            mco_seq_func_TYPE_ptr_t func,
            void* ctx);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_cond_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Evaluate boolean predicate function pointed to by argument <i>func</i> to the <i>input</i> sequence and produce <i>result</i> sequence of type <code>boolean</code><div class="code-block"><pre>&#160;
    MCO_RET mco_seq_cond_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_cond_TYPE_ptr_t func);
&#160;</pre></div></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_cond_ctx_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Evaluate boolean predicate function pointed to by argument <i>func</i> to the <i>input</i> sequence using the context pointed to by <i>ctx</i>  and produce <i>result</i> sequence of type <code>boolean</code><div class="code-block"><pre>&#160;
    MCO_RET mco_seq_cond_ctx_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_func_TYPE_ptr_t func,
            void* ctx);
            &#160;</pre></div></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mco_seq_hash()</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Calculate the 32-bit hash code for each value of <i>input</i> sequence and produce a result sequence of type <code>uint4</code>. This function can combine the hash with a previously calculated hash for another sequence (if the hash argument is not null). <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_hash(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_iterator_h hash);
            &#160;</pre></div></td>
                        </tr>
                    </tbody>
                </table>
                <h2>Example</h2>
                <p>Following is an example code snippet demonstrating one of these functions:</p>
                <div class="code-block"><pre>        &#160;
    {
        mco_trans_h trans;
        mco_cursor_t quote_cursor;
        Quote quote;
        mco_seq_iterator_t high_iterator, result_iterator;
        MCO_RET rc;
        float max = 142.54;
        float min = 24.13;
        int n_intervals = 20;
        ...
        &#160;
        for (rc = mco_cursor_first(trans, &amp;quote_cursor); 
            rc != MCO_S_CURSOR_END; 
            rc = mco_cursor_next(trans, &amp;quote_cursor)) 
        {
            Quote_from_cursor(trans, &amp;quote_cursor, &amp;quote);
            Quote_high_iterator(&amp;quote, &amp;high_iterator);
            ...
            rc = mco_seq_histogram_float(&amp;result_iterator,  &amp;high_iterator, max, min, n_intervals);
            
            ...
        }
        ...
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>