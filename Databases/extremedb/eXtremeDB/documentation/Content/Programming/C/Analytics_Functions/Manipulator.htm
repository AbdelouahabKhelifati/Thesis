<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sequence Manipulator C Functions</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Sequence Manipulator C Functions</h1>
            <blockquote>
                <p>The following <i>sequence manipulator</i> C functions take a variety of <i>input</i> sequence arguments and produce <i>result</i> sequences as described in the table below:</p>
                <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 215px;" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_filter_first_pos()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in integer sequence <i>result</i> the first <i>n</i> positions of <code>true</code> elements in the boolean sequence <i>cond</i>.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_filter_first_pos(mco_seq_iterator_h result,
             mco_seq_iterator_h cond, 
            mco_size_t n);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_reverse_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Reverse the elements of the <i>input</i> sequence.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_reverse_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_concat()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Concatenate two sequences of any type by appending sequence <i>right</i> to sequence <i>left</i>. The <i>result</i> sequence will be of the same type as <i>left</i> and <i>right</i>.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_concat(mco_seq_iterator_h result, 
            mco_seq_iterator_h left, 
            mco_seq_iterator_h right);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_cat()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Concatenate two sequences of any type by appending sequence <i>right</i> to sequence <i>left</i>. The <i>result</i> sequence will be of  type <code>char</code>.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_cat(mco_seq_iterator_h result, 
            mco_seq_iterator_h left, 
            mco_seq_iterator_h right);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_limit_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Copy to the <i>result</i> sequence the sub-sequence from the <i>input</i> using sequence positions <i>from</i> and <i>till</i>. </p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_limit_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_no_t from, 
            mco_seq_no_t till);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_get_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Extract data from the <i>input</i> sequence to the buffer <i>buf</i> whose length is specified by parameter <i>size</i>. On success the return value is <code>MCO_S_OK</code> and parameter <i>size</i> contains the number of elements actually placed in the buffer.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_get_TYPE(mco_seq_iterator_h input, 
            TYPE* buf, 
            mco_size_t* size);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_get_nullable_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Extract data, including <i>nulls</i>, from the <i>input</i> sequence to the buffer <i>buf</i> whose length is specified by parameter <i>size</i>. On success the return value is <code>MCO_S_OK</code> and parameter <i>size</i> contains the number of elements actually placed in the buffer. Parameter <i>nulls</i> is a bitmap indicating <i>null</i> values in the sequence.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_get_TYPE(mco_seq_iterator_h input, 
            TYPE* buf, 
            mco_size_t* size,
            mco_bitmap_word_t const * nulls);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_unget_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Iterate through the elements of the buffer <i>buf</i>  previously created with <code>mco_seq_get_TYPE()</code> to return  sequence result of the same type. Parameter <i>buf_size</i> is the length of the buffer.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_unget_TYPE(mco_seq_iterator_h result, 
            TYPE const* buf, 
            mco_size_t buf_size);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_unget_nullable_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Iterate through the elements, including <i>nulls</i>, of the buffer <i>buf</i>  previously created with <code>mco_seq_get_TYPE()</code> to return  sequence result of the same type. Parameter <i>buf_size</i> is the length of the buffer. Parameter <i>nulls</i> is a bitmap indicating <i>null</i> values in the sequence.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_unget_TYPE(mco_seq_iterator_h result, 
            TYPE const* buf, 
            mco_size_t buf_size
            mco_bitmap_word_t const * nulls);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_uniq_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Copy to the <i>result</i> sequence only the unique elements in ordered sequence <i>input</i> by "collapsing duplicates".</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_uniq_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/Skip_NaN.htm">mco_seq_skip_nan_TYPE()</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Copy  the <i>input</i> sequence to <i>result</i> skipping <code>NaN</code> (Not-a-Number) elements. (Please see the <code><a href="Manipulator/Skip_NaN.htm">mco_seq_skip_nan_TYPE()</a></code> page for further details on this API.)</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_skip_nan_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_norm_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the normalized <i>input</i> sequence; i.e. divide each sequence element by the square root of the sum of squares of all elements.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_norm_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_thin_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Copy  the <i>input</i> sequence to <i>result</i> selecting elements with the specified <i>origin</i> and <i>step.</i></p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_thin_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_size_t origin, 
            mco_size_t step);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_diff_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the differences between pairs of sequence elements in <i>input</i>.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_diff_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_trend_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the " trend" by comparing  pairs of sequence elements in <i>input</i>: the sign of the difference between pairs of non-equal sequence elements. For example, the <i>input</i> sequence <code>{1,2,3,3,2,2,4,5,6,5,5}</code> would produce the <i>result</i> <code>{0,1,1,1,-1,-1,1,1,1,-1,-1}</code>.</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_trend_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_const_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Construct sequence <i>result</i> with elements having the constant value <i>val</i>. (Note that there is no length argument so the <i>result</i> sequence is effectively infinite, you can call <code>mco_seq_next()</code> on it forever.)</p>
                                <div class="code-block"><pre>&#160;
    MCO_RET mco_seq_const_TYPE(mco_seq_iterator_h result, 
            TYPE val);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_parse_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Construct sequence <i>result</i> from the string literal <i>str</i>, e.g. "{1.0, -1.1, 0}".</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_parse_TYPE(mco_seq_iterator_h result, 
            char const* str);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a href="Manipulator/Join.htm">mco_seq_join_TYPE()</a>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Use a metaiterator to combine multiple sequences. (Please see the <a href="Manipulator/Join.htm">seq_join function</a> page for a more detailed explanation.)</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_join_TYPE(mco_seq_iterator_h result, 
            mco_seq_meta_iterator_h meta_iterator);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_union_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the union of the two ordered sequences <i>left</i> and <i>right</i> using the specified <i>order</i>. Note that <i>result</i> will contain different elements from both input sequences.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_union_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h left, 
            mco_seq_iterator_h right, 
            mco_seq_order_t order);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_tee()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Create two iterators for the same <i>input</i> sequence (i.e. fork the sequence iterator). (Note that these iterators should be traversed together (i.e. used in the same expression). The <i>input</i> sequence can be of any type.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_tee(mco_seq_iterator_h iterator1, 
            mco_seq_iterator_h iterator2, 
            mco_seq_iterator_h input);
&#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_map_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the elements extracted from the <i>input</i> sequence using the positions specified in the <i>positions</i> sequence. The <i>positions</i> should be provided in ascending order. (Note that while most of the sequence functions returning positions, like <code>mco_seq_filter_pos()</code>, return positions in ascending order, mco_seq_top_pos_TYPE() obviously violates this rule.)</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_map_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            mco_seq_iterator_h positions);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_repeat_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> each element of the <i>input</i> sequence repeated <i>n_times</i> times.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_repeat_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            int n_times);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_stretch_TS_TYPE_VAL_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the elements of the <i>values</i> sequence stretched to the length of the <i>ts1</i> sequence by repeating the elements of <i>values</i> while the corresponding timestamp in sequence <i>ts2</i> is larger than timestamp from <i>ts1</i>. Use the <i>filler</i> values for elements where the corresponding timestamp in sequence <i>ts2</i> is less than timestamp from <i>ts1</i>. </p>
                                <p>For example, assume <i>ts1</i> = <code>{1,2,3,4,5}</code>, <i>ts2</i> = <code>{2,4}</code>, <i>values</i> = <code>{1.1,2.2}</code> and <i>filler</i> =<code>1.0</code>. With these input sequences the <i>result</i> will be <code>{1.1,2.2,2.2,1.0,1.0}</code>. </p>
                                <p>(This function can be used to calculate <i>split adjusted price</i> where it is necessary to revert time series of splits, calculate the cumulative product and multiply on price.)</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_stretch_TS_TYPE1_VAL_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h ts1, 
            mco_seq_iterator_h ts2, 
            mco_seq_iterator_h values, 
            TYPE2 filler);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_stretch0_TS_TYPE_VAL_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the elements of the <i>values</i> and <i>filler</i> sequences by injecting the elements of <i>values</i> where the corresponding timestamps in sequence <i>ts2</i> match the timestamp from <i>ts1</i>. Use the <i>filler</i> values for elements where the  timestamp in sequence <i>ts2</i> has no matching timestamp in <i>ts1</i>. </p>
                                <p>For example, assume <i>ts1 </i>= <code>{1,2,3,5}</code>, <i>ts2</i> = <code>{2,3,4}</code>, <i>values</i> = <code>{1.1,1.2,1.3}</code> and <i>filler</i> = <code>0.0</code>. With these input sequences the <i>result</i> will be <code>{0.0,1.1,1.2,1.3,0.0}</code>.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_stretch0_TS_TYPE1_VAL_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h ts1, 
            mco_seq_iterator_h ts2, 
            mco_seq_iterator_h values, 
            TYPE2 filler);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_asof_join_TS_TYPE_VAL_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the elements of the <i>values</i> sequence corresponding to the timestamp of <i>ts2</i> closest to the timestamp of <i>ts1</i>. </p>
                                <p>For example, assume <i>ts1</i> = <code>{4,9}</code>, <i>ts2</i> = <code>{1,3,6,10}</code>, and <i>values</i> = <code>{0.1,0.3,0.6,1.0}</code>. With these input sequences the <i>result</i> will be  <code>{0.3,1.0}</code> .</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_asof_join_TS_TYPE1_VAL_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h ts1, 
            mco_seq_iterator_h ts2, 
            mco_seq_iterator_h values);
    &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mco_seq_cross_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in <i>result</i> the positions in the <i>input</i> sequence where it crosses zero. If the integer argument <i>first_cross_direction</i> is positive then the <i>result</i> sequence starts with the first cross above zero; if negative it starts with cross below zero; if <i>first_cross_direction</i> is zero then it doesn't matter, i.e. the first cross can be above or below zero.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_cross_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            int first_cross_direction);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mco_seq_extrema_TYPE()</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">
                                <p>Return in <i>result</i> the positions  of extrema (local minimum and maximums) in the <i>input</i> sequence. If the integer argument <i>first_extremum</i> is positive then the <i>result</i> sequence starts with first local maximum; if negative it starts with with local minimum; if <i>first_extremum</i> is zero then it doesn't matter.</p>
                                <div class="code-block"><pre>    &#160;
    MCO_RET mco_seq_extrema_TYPE(mco_seq_iterator_h result, 
            mco_seq_iterator_h input, 
            int first_extremum);
            &#160;</pre>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2>Example</h2>
                <p>Following is an example code snippet demonstrating a <i>sequence manipulator</i> function:</p>
                <div class="code-block"><pre>        &#160;
    {
        mco_trans_h trans;
        mco_cursor_t quote_cursor;
        Quote quote;
        mco_seq_iterator_t high_iterator, low_iterator, result_iterator;
        MCO_RET rc;
        ...
        &#160;
        for (rc = mco_cursor_first(trans, &amp;quote_cursor); 
            rc != MCO_S_CURSOR_END; 
            rc = mco_cursor_next(trans, &amp;quote_cursor)) 
        {
            Quote_from_cursor(trans, &amp;quote_cursor, &amp;quote);
            Quote_high_iterator(&amp;quote, &amp;high_iterator);
            Quote_low_iterator(&amp;quote, &amp;low_iterator);
            ...
            rc = mco_seq_cross_float(&amp;result_iterator, &amp;low_iterator, &amp;high_iterator);
            
            ...
        }
        ...
    }
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>