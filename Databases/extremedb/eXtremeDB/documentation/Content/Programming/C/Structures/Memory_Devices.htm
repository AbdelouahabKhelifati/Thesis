<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Control Structures used in the C API">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Memory Devices</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/IndentedFunctionReference.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Memory Devices</h1>
            <blockquote>
                <p><a name="kanchor717"></a>C and C++ applications specify storage devices at runtime via the array of <code>mco_device_t</code> structures: the  argument (named <code>devs</code> in most SDK samples) passed to <code><a href="../Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code>.&#160; Typically, an array of device structures is stack-allocated and initialized prior to calling <code><a href="../Core_Functions/Static/Database_Control/open_dev.htm">mco_db_open_dev()</a></code>.  Each memory device is defined by a <code>mco_device_t</code> structure that specifies:</p>
                <table style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" class="TableStyle-FunctionReference" cellspacing="0">
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                                <p>type</p>
                            </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>The type of memory region; must be one of the following values defined in <code>mco.h</code>:</p>
                                <table style="mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');margin-left: 0;margin-right: auto;" class="TableStyle-IndentedFunctionReference" cellspacing="0">
                                    <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 173px;" />
                                    <col class="TableStyle-IndentedFunctionReference-Column-Column2" />
                                    <tbody>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_CONV</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Conventional (non-shared) memory </td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_NAMED</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Named (shared) memory</td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_INT_DESC</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Some operating environments address shared memory regions through an integer descriptor. This option accommodates these operating systems through the memory device</td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_FILE</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A file device</td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_MULTIFILE</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A multi-file device</td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_RAID</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A RAID device</td>
                                        </tr>
                                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                                            <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">MCO_MEMORY_CYCLIC_FILE_BUF</td>
                                            <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">A pair of files used to implement a cyclic buffer. This option is intended to overcome the limitation of some file systems that do not provide <code>fsync()</code> or some equivalent file system call to make all changes persistent. It is used with the <code>MCO_COMMIT_DELAYED</code><a name="kanchor718"></a> transaction commit policy where <code>log_params.max_commit_delay</code> is set to the persistent media manufacturer’s specifications.&#160; (See <a href="../../../Users_Guides/Core/Persistent_Databases/Persistent_Media_IO.htm">Writing Data to Persistent Storage</a>  for explanation of the meaning of these transaction policies).</td>
                                        </tr>
                                    </tbody>
                                </table>
                                <p>&#160;</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">assignment</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The use for this device; must be one of the following values defined in <code>mco.h</code>:<br /><table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');" class="TableStyle-IndentedFunctionReference" cellspacing="0"><col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 194px;" /><col class="TableStyle-IndentedFunctionReference-Column-Column2" /><tbody><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_ASSIGN_DATABASE</td><td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A memory region for meta-data  and user-data, indexes and other database structures</td></tr><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_ASSIGN_CACHE</td><td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1"><a name="kanchor719"></a>A memory region for the disk manager cache (page pool)</td></tr><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_ASSIGN_PERSISTENT</td><td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A persistent storage device (can be file, multi-file or RAID). Note that if a persistent device is defined and the application does not explicitly assign disk_page_size (see below) the runtime will assign it the default value of 4096 bytes. If multiple applications or tasks attempt to assign different disk page sizes for the same database the runtime returns an error code.</td></tr><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_ASSIGN_LOG</td><td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">A device that contains the database log file</td></tr><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_MEMORY_ASSIGN_HA_ASYNC_BUF</td><td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">An asynchronous buffer device for <i>e</i>X<i>treme</i>DB<i> High Availability</i></td></tr><tr class="TableStyle-IndentedFunctionReference-Body-Body1"><td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">MCO_MEMORY_ASSIGN_PIPE_BUF</td><td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">A buffer for an <i>e</i>X<i>treme</i>DB<i> Transaction Logging</i> pipe</td></tr></tbody></table><p><br /></p></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">size</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The size of this device.&#160; </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">dev</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">
                                <p>A union containing a pointer to pre-allocated memory for conventional or shared memory devices or a filename and flags for persistent storage devices. This union is defined as follows in <code>mco.h</code>: </p>
                                <div class="code-block"><pre>&#160;
    typedef struct mco_device_t_ {
        unsigned int type;
        unsigned int assignment;
        mco_size_t   size;
        union {
            struct {
                void * ptr;
                int flags;
            } conv;
            struct {
                char name[MCO_MAX_MEMORY_NAME];
                unsigned int flags;
                void * hint;
            } named;
            struct {
                int flags;
                char name[MCO_MAX_FILE_NAME];
            } file;
            struct {
                int flags;
                char name[MCO_MAX_MULTIFILE_NAME];
                mco_offs_t segment_size;
            } multifile;
            struct {
                int flags;
                char name[MCO_MAX_MULTIFILE_NAME];
                int level;
                mco_offs_t offset;
            } raid;
            struct {
                unsigned long handle;
            } idesc;
        } dev;
    } mco_device_t, *mco_device_h;
    &#160;</pre>
                                </div>
                                <p>(See the descriptions below for <code>dev</code> parameter settings for different types of memory management. Note that the <code>idesc</code> portion of the struct is reserved for future use, intended for all other custom embedded memory driver implementations. Currently this capability is not used by the runtime.)</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2>Conventional memory parameters</h2>
                <p>For in-memory (<code>conv</code>) databases, the <code>struct</code> contains a pointer to allocated memory and flags. The <code>ptr</code> element is set to the address of the memory block allocated for the database. The <code>flags</code> element is used internally by the runtime and not used by the application; it can safely be set to zero or ignored by the application.</p>
                <h2>Shared memory parameters</h2>
                <p>For a shared memory (<code>named</code>) device, it is necessary to specify a <code>name</code>, <code>flags</code>  and a <code>hint</code> address where the shared memory block is located in the operating system shared memory pool. Setting the <code>dev.named.hint</code> parameter to zero causes <i>e</i>X<i>treme</i>DB to determine the actual shared memory segment address.  But this could fail when called from a second process attempting to open the shared database. In this case it is the application's responsibility to provide a valid <code>hint</code> address. (Please see <a href="../../../Users_Guides/Core/Shared_Memory/Shared_Memory_C.htm">Shared Memory Runtime Options</a> for a detailed explanation of the shared memory hint address implications on Windows and Unix-Linux systems.)</p>
                <p>On Unix-Linux systems using the POSIX <code>mcompsx</code> memory driver, the <code>named.flags</code> can be set to <code>MCO_RT_POSIX_SHM_SHARED</code> (for an “all process accessible” database) or <code>MCO_RT_POSIX_SHM_ANONYMOUS</code> (for a database “private” for the process). For all other memory drivers this element is not used and should be set to zero initially.</p>
                <h2>Persistent storage parameters</h2>
                <p>For persistent storage devices a <code>name</code> must be specified; for <code>multifile</code> optionally <code>segment_size</code> and <code>flags</code> may be specified; and for <code>raid</code> devices <code>level</code> and <code>offset</code> must be specified and optionally <code>flags</code>. The file open mode is defined by the <code>flags</code> parameter which can have values as follows (different combinations of flags can be or’ed with the pipe ‘|’ operator):</p>
                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_DEFAULT</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The standard, unified and fail-safe way to open a file in the manner supported by target platform file system. Depending on the file-system wrapper linked into the target executable it does the following:<table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0"><col class="TableStyle-FunctionReference-Column-Column2" style="width: 75px;" /><col class="TableStyle-FunctionReference-Column-Column2" /><tbody><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for the KDSA storage system. The code uses a <code>cblk_open()</code> call to create the file descriptor for IO operations.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofkdsa.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for the KDSA storage system. The code uses <code>xpd_init_device_name()</code>, <code>xpd_connect_via_link()</code> and <code>xpd_set_handle_flags()</code> calls to initialize the device header for successive IO operations. </td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofucos.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for the uCOS FAT32 file system; use (<code>FILE_MODE_READ | FILE_MODE_WRITE</code>) for the <code>FILE_OpenShort()</code> call. This opens the file for reading and writing. There is no check for file existence, so if the file exists the content will be lost.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyD-Column2-Body1" colspan="2"><p colspan="2"> Note the following meanings for the two Windows APIs below: </p><ul><li colspan="2" value="1">GENERIC_READ:  Read access </li><li colspan="2" value="2">GENERIC_WRITE: Write access</li><li colspan="2" value="3"> FILE_SHARE_READ: share for reading </li><li colspan="2" value="4">FILE_SHARE_WRITE: share for writing </li><li colspan="2" value="5">OPEN_ALWAYS: Opens a file, always

</li></ul></td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofw32.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for the Win32(NT family). The wrapper calls the <code>CreateFile()</code> routine passing flag combinations (<code>GENERIC_READ|GENERIC_WRITE</code>), (<code>FILE_SHARE_READ|FILE_SHARE_WRITE</code>) and <code>OPEN_ALWAYS</code>. This creates the specified file unconditionally and opens it for write and read access.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofwrt.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for WinRT. The wrapper calls the <code>CreateFiles2()</code> routine passing  flag combinations (<code>GENERIC_READ|GENERIC_WRITE</code>), (<code>FILE_SHARE_READ|FILE_SHARE_WRITE</code>) and <code>OPEN_ALWAYS</code>. This creates the specified file unconditionally and opens it for write and read access.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofmem.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">"In-memory file"; as this implementation does not open any real files but simulates them with memory there are no file system calls made.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyD-Column2-Body1" colspan="2">The following file system wrappers share the same POSIX interface to open the requested file. They initialize the file handle by a call to <code>open()</code> with the (<code>O_RDWR|O_CREAT</code>) flags combination. This call creates the file if it does not exist and opens it for reading and writing. Note from POSIX specs: <code>O_RDWR</code> - open for reading and writing <code>O_RDONLY</code> - open for reading only<code> O_CREAT</code> - create file if it does not exist <code>O_LARGEFILE</code> - Allow files whose sizes cannot be represented in an <code>off_t</code> (but can be represented in an <code>off64_t</code>) to be opened.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofecos.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for eCos</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofintp.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for Integrity OS (POSIX)</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofose.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for OSE Embedded File System. EFS is a file system for the OSE Real Time Kernel.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofuni.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for Unix without <code>pread</code> and <code>pwrite</code> support</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofvx.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for VxWorks</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyD-Column2-Body1" colspan="2"><span style="color: #000000;">The following file system wrappers do a similar call to <code>open()</code> as above but in addition they use flag <code>O_LARGEFILE</code> to enable operations on large files (&gt;4G).</span></td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofu98aio.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Asynchronous file implementation for Unix supporting <code>pread</code> and <code>pwrite</code> (Unix98 standard)</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofu98.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">File implementation for Unix supporting <code>pread</code> and <code>pwrite</code> (Unix98 standard)</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofu98zip.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Compressed file implementation for Unix supporting <code>pread</code> and <code>pwrite</code> (Unix98 standard)</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofu98ziplog.c</td><td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Compressed file implementation for Unix supporting <code>pread</code> and <code>pwrite</code> (Unix98 standard)</td></tr></tbody></table></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_READ_ONLY</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Set read-only mode for a file, no modifications of the file will be allowed for <i>e</i>X<i>treme</i>DB. Depending on the target file system it does the following:<table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0"><col class="TableStyle-FunctionReference-Column-Column2" /><col class="TableStyle-FunctionReference-Column-Column2" /><tbody><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c, mcofkdsa.c, mcofmem.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Does nothing, no implementation required.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofecos.c, mcofintp.c, mcofose.c, mcofu98aio.c, mcofu98.c, mcofu98zip.c, mcofu98ziplog.c, mcofuni.c, mcofvx.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Adds flag <code>O_RDONLY</code> (POSIX: open for reading only) into flags combination for <code>open()</code> call. </td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1"> mcofucos.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Excludes <code>FILE_MODE_WRITE</code> from flags combination for <code>FILE_OpenShort()</code> call (leaves <code>FILE_SHARE_READ</code> flag only).</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofw32.c, mcofwrt.c</td><td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Excludes <code>GENERIC_WRITE</code> flags from normal (<code>GENERIC_READ | GENERIC_WRITE</code>) flags combination  for calling <code>CreateFiles()</code> or <code>CreateFiles2()</code></td></tr></tbody></table></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_TRUNCATE</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Instructs <i>e</i>X<i>treme</i>DB to truncate the file being opened to zero length before use. Depending on the implementation of file system wrapper: </p>
                                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 350px;" />
                                    <col class="TableStyle-FunctionReference-Column-Column2" />
                                    <tbody>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Calls <code>cblk_file_truncate()</code> on the file.</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofkdsa.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Calls <code>kdsa_file_truncate()</code> on the file.</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"> mcofucos.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Calls <code>FILE_Truncate()</code> on the file.</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofmem.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">No calls required. </td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                                                <p>mcofecos.c, mcofintp.c, mcofose.c, mcofu98aio.c, mcofu98.c, </p>
                                                <p>mcofu98zip.c, mcofu98ziplog.c, mcofuni.c, mcofvx.c</p>
                                            </td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Adds the <code>O_TRUNC</code> flag (POSIX: truncate size to 0) to flags combination for the <code>open()</code> call. </td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofw32.c, mcofwrt.c </td>
                                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Sets flag <code>CREATE_ALWAYS</code> (The WinAPI creates a new file, always) instead of <code>OPEN_ALWAYS</code> (which opens a file, always.) for the call of the <code>CreateFiles() / CreateFiles2()</code> routine.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_NO_BUFFERING </td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Tells the underlying file system do not cache the file content but run IO operations immediately. Depending on the file system wrapper implementation, it: </p>
                                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                                    <col class="TableStyle-FunctionReference-Column-Column2" />
                                    <col class="TableStyle-FunctionReference-Column-Column2" />
                                    <tbody>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c, mcofkdsa.c, mcofucos.c, mcofmem.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Does nothing - nothing is required</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofecos.c, mcofintp.c, mcofose.c, mcofu98aio.c, mcofu98.c, mcofu98zip.c, mcofu98ziplog.c, mcofuni.c, mcofvx.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Includes the <code>O_DIRECT</code> flag (POSIX: Try to minimize the cache effects of the I/O to and from this file) into the flag combination for the <code>open()</code> call. For SunOS: calls the <code>directio( DIRECTIO_ON )</code> routine (SUNOS: provides advice to the system about the expected behavior of the application when accessing the data in the file).</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofw32.c, mcofwrt.c</td>
                                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Adds flag <code>FILE_FLAG_NO_BUFFERING</code> (WinAPI: The file or device is being opened with no system caching for data reads and writes) into the flags combination for the call of the <code>CreateFiles()</code> / <code>CreateFiles2()</code> routine. </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_EXISTING</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Requires <i>e</i>X<i>treme</i>DB to open the file only if it exists, <i>e</i>X<i>treme</i>DB will not create a new file. Depending on the file system wrapper implementation, it: </p>
                                <table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0">
                                    <col class="TableStyle-FunctionReference-Column-Column2" />
                                    <col class="TableStyle-FunctionReference-Column-Column2" />
                                    <tbody>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c, mcofkdsa.c, mcofmem.c, mcofucos.c</td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Does nothing - nothing is required</td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofecos.c, mcofintp.c, mcofose.c, mcofu98aio.c, mcofu98.c, mcofu98zip.c, mcofu98ziplog.c, mcofuni.c, mcofvx.c </td>
                                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Excludes the <code>O_CREAT</code> flag from the initial flags combination for the <code>open()</code> call. This means that <code>open()</code> will open the file only if it exists. No new file will be created. </td>
                                        </tr>
                                        <tr class="TableStyle-FunctionReference-Body-Body1">
                                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofw32.c, mcofwrt.c</td>
                                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Adds flag <code>OPEN_EXISTING</code> (WinAPI: Opens a file or device, only if it exists) into the initial flags combination for the call of the <code>CreateFiles()</code> / <code>CreateFiles2()</code> routine. </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_TEMPORARY</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Instructs the underlying file system to open the file as temporary. Depending on the file system wrapper the implementation, does the following:<table class="TableStyle-FunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" cellspacing="0"><col class="TableStyle-FunctionReference-Column-Column2" /><col class="TableStyle-FunctionReference-Column-Column2" /><tbody><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyE-Column2-Body1">mcofcblk.c, mcofkdsa.c, mcofmem.c, mcofucos.c, mcofecos.c, mcofintp.c, mcofose.c, mcofu98aio.c, mcofu98.c, mcofu98zip.c, mcofu98ziplog.c, mcofuni.c, mcofvx.c</td><td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Does nothing and works with a file marked as <code>MCO_FILE_OPEN_TEMPORARY</code> as with a typical file.</td></tr><tr class="TableStyle-FunctionReference-Body-Body1"><td class="TableStyle-FunctionReference-BodyB-Column2-Body1">mcofw32.c, mcofwrt.c</td><td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Sets flag <code>FILE_ATTRIBUTE_TEMPORARY</code> (WinAPI: The file is being used for temporary storage) to the flag combination for the call of the <code>CreateFiles()</code> / <code>CreateFiles2()</code>  routine. </td></tr></tbody></table></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_FSYNC_FIX</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Enables the flush-operation fix for UNIX-98 file system wrappers. The fix confirms that the underlying file system (<code>ext3</code> file system specifically) really puts the file content modification to the storage. This usage is required for <code>ext3</code> only and in some rare conditions when it is confirmed that the underlying file system has flush-realted issues.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_SUBPARTITION</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Works for the RAID-implementation of database persistent storage. This flag specifies that the file system wrapper must take the value of the offset field of the <code>mco_device_t</code> struct into account for all segments of the RAID.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_FSYNC_AIO_BARRIER</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Works for the AIO (<code>u98aio</code>) file system wrapper. This flag specifies that the wrapper must execute a barrier for flush operations - all IO operations must be finished before the flush operation.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_COMPRESSED</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Works for the compressed (<code>u98zip</code> and <code>u98ziplog</code>) file system wrappers. This flag specifies that the file must be compressed. Otherwise the file system wrapper will work with the file transparently.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_LOCK</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Works for the <code>u98</code> implementation only. This flag instructs the file system wrapper to setup rules for inter-locking the file. The implementation calls the <code>flock()</code> routine (POSIX : A call to <code>flock()</code> may block if an incompatible lock is held by another process.)</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_FILE_OPEN_NO_READ_BUFFERING and MCO_FILE_OPEN_NO_WRITE_BUFFERING</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Works for the <code>u98</code> implementation only. Controls usage of pre-read and pre-write hints for the underlying file system. The implementation uses <code>posix_fadvise()</code> (POSIX : Programs can use <code>posix_fadvise()</code> to announce an intention to access file data in a specific pattern in the future, thus allowing the kernel to perform appropriate optimizations.) <b>Use these flags only if it is advised by </b><i>McObject Support</i> .</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MAP_HUGETLB</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Most modern Linux systems allow configuring some part of their virtual memory space to use by huge pages. The huge pages feature enables the Linux kernel to manage large pages of memory in addition to the standard 4KB (on x86 and x86_64) or 16KB (on IA64) page size. When the system needs to access a virtual memory location, it uses the page tables to translate the virtual address to a physical address. Using huge pages means that the system needs to load fewer such mappings into the Translation Lookaside Buffer (TLB), which is the cache of page tables on a CPU that speeds up the translation of virtual addresses to physical addresses. Enabling the huge pages feature allows the kernel to use hugetlb entries in the TLB that point to huge pages. The hugetlb entries mean that the TLB entries can cover a larger address space, requiring many fewer entries to map the memory.

On systems with more than 16GB of memory running <i>e</i>X<i>treme</i>DB databases, enabling the huge pages feature can improve database performance.

 Specifying the MAP_HUGETLB flag (for <i>mmap</i>) makes it possible to use the huge page feature. </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">SHM_HUGETLB</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">This flag has the same effect as MAP_HUGETLB but for <i>e</i>X<i>treme</i>DB <b>shared memory</b> databases (i.e. for <i>shmget).</i></td>
                        </tr>
                    </tbody>
                </table>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>