<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Control Structures used in the C API|Database Parameters">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Database Open Modes</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Database Open Modes</h1>
            <blockquote>
                <p>The <code>mode_mask</code> element of the <code><a href="Database_Parameters.htm">mco_db_params_t</a></code> structure can be set with the following values:</p>
                <table style="mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');margin-left: 0;margin-right: auto;" class="TableStyle-FunctionReference" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1"><a name="kanchor963"></a>MCO_DB_MODE_MVCC_AUTO_VACUUM </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes automatic cleanup of stale versions (<code>MVCC</code>) when the database  is opened.  This mode can be used to delete obsolete versions of objects in the case of recovery after a disk-based database application crash. </p>
                            <p>This procedure can take a significant amount of time as it reads the database file to scan the database at startup. (Hence it is not the default mode.) If the disk-based database was gracefully shut down, then the next run should not use this option. But when the database is recovered after a crash, or even multiple crashes, its size can be reduced using <code>MCO_DB_MODE_MVCC_AUTO_VACUUM</code> mode. (See description of  <code><a href="../Core_Functions/Static/Disk_Manager/vacuum.htm">mco_disk_database_vacuum()</a></code> )</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_MODE_SMART_INDEX_INSERT</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1"><a name="kanchor964"></a>Causes the runtime to pre-sort transaction data based on the first index declared for the class prior to including them in indexes. This can optimize the index tree structure in the case of very large disk indexes in conjunction with large transactions. (The benefit may not be readily evident and depends to a large extent on the database schema. Hence this mode is not the default.)</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_OPEN_EXISTING</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Instructs the runtime not to initialize an all-in-memory database, but rather to treat the database memory device as an already initialized memory space. For example, an <code>NVRAM</code> based device could be switched off or lose power. Then, on the next startup, it has in fact already initialized and filled NV memory. So in <code>MCO_DB_OPEN_EXISTING</code> mode, the runtime simply opens that memory assuming that it was initialized by the previous run.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_USE_CRC_CHECK</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Instructs the runtime to calculate and store the CRC for each database page.  </p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_TRANSIENT</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Forces all database classes to be “in-memory” (<code>transient</code>) even if the classes are declared <code>persistent</code> in the database schema. This may be useful to temporarily override the definition of <code>persistent</code> classes for testing purposes.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_LAZY_MEM_INITIALIZATION </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">By default, the runtime  initializes all given memory: splits it into pages and links these pages into the page manager's list. But for very large databases (several gigabytes) it may take a significant amount of time. With this run-time option, memory is "formatted" on demand which delays the memory pages initialization procedure from the initialization stage to the moment of the first usage of each database page. So it speeds up database initialization at the expense of performance during data access.
This option is not the default because it adds one extra check during page allocation; and by initializing memory in advance, physical memory is reserved for the database so that database access time is reduced.	
</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_INMEMORY_PROTECTION</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Enables the runtime to implement page level encryption. If  flag <code>MCO_DB_INMEMORY_PROTECTION</code> and <code><a href="Database_Parameters.htm"><code>mco_db_params_t::cipher_key</code></a></code><a name="kanchor965"></a> are flag  then the memory pages of transient databases are encrypted by currently available symmetric encryption algorithm. However this combination is not compatible with the disk manager, thus it is not applicable for hybrid databases (i.e. with both transient and persistent classes) .
(See <a href="../../../Users_Guides/Core/Encryption/Encryption_C.htm">Database Encryption</a>). 
</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_INCLUSIVE_BTREE </p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Allows the runtime to exploit CPU cache memory for data structures and algorithms which in many cases can improve performance dramatically over normal RAM access. This option can be especially effective when index B-Tree structures are very large. (See <a href="../../../Users_Guides/Core/Indexes_Cursors/Inclusive_Covering_Indexes.htm">Key-Value-Inclusive and Covering Indexes</a>)</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_INMEMORY_COMPRESSION</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Enables the runtime to conserve memory through data compression.  If  flag <code>MCO_DB_INMEMORY_COMPRESSION</code> and <code><a href="Database_Parameters.htm"><code>mco_db_params_t::cipher_key</code></a></code> are set then transient database pages are both zipped and encrypted. However this combination is not compatible with the disk manager, thus it is not applicable for hybrid databases (i.e. with both transient and persistent classes) .
(See <a href="../../../Users_Guides/Core/Compression/Compression_C.htm">Database Compression</a>). 
</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_SEPARATE_BITMAP</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Allows the runtime to use separate memory allocation bitmap pages for aligned and unaligned memory objects. This can help avoid disk file fragmentation for persistent databases. Placing objects together (sequentially) can significantly speed-up a linear search. For in memory databases the locality of reference is not so critical (though sequential access is faster, especially with NUMA). But for <i>e</i>X<i>treme</i>DB Persistent databases there are two ways to improve locality of references:</p>
                            <ul>
                                <li value="1">By using allocation blocks: when a particular block (usually several megabytes) is used for allocation of objects of particular class. (See generated function <code><a href="../Core_Functions/Generated/Class/set_allocation_block_size.htm"><i>classname</i>_set_allocation_block_size()</a></code>.)</li>
                                <li value="2">By setting the <code>MCO_DB_SEPARATE_BITMAP</code> flag. In this case index pages and object pages will be allocated using different allocators. It allows better grouping of records and reduces fragmentation. But it can cause greater disk space consumption.</li>
                            </ul>
                            <p>It is difficult to give a concrete recommendation when this option should be used or estimate its impact on performance and database size. So it should be considered an experimental option to validate empirically.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p><a name="kanchor966"></a>MCO_DB_MURSIW_DISK_COMMIT_OPTIMIZATION </p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>When using the <code>MURSIW</code><a name="kanchor967"></a> transaction manager, this flag causes the runtime to save modified pages to the transaction log file and flush the log outside of a critical section, allowing read-only transactions to process. This may increase concurrency and reduce delays during transaction processing.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_BULK_WRITE_MODIFIED_PAGES</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes the runtime to sort and write all non-pinned dirty pages, instead of writing just a single dirty page thrown away from the disk page pool when loading a new page from disk. This can reduce disk head movement with the possible drawback that a modified page may be written multiple times.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_DISABLE_PAGE_POOL_RESERVE</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>For Persistent databases, it is possible for the cache memory to be exhausted. For this reason a “reserved pool” of pages is added to the cache. The runtime automatically allocates this additional cache memory unless this flag is set to disable the reserve page pool. (See <a href="../../../Users_Guides/Core/Persistent_Databases/Cache_Management/Cache_Management_C.htm">Cache Management</a>)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_INDEX_PRELOAD</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes the runtime to try to preload the next B-Tree page using system function <code>fadvise()</code>. This may increase the speed of sequential scans. (However <code>fadvise()</code> can cause a synchronous page read on Linux which is likely to decrease performance .)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_DISABLE_NESTED_TRANSACTIONS</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes the runtime to disable nested transactions. This flag causes error <code>MCO_ERR_NESTED_TRANS_TRAP</code> to be thrown if <code>mco_trans_start()</code> is called before a commit or rollback.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_DISABLE_IMPLICIT_ROLLBACK</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes the runtime to not implicitly rollback active transaction(s) on disconnect. Instead an error is reported. This can be used for debugging unintentional nesting of transactions.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_DISABLE_BTREE_REBALANCE_ON_DELETE</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Causes the runtime to disable B-Tree rebalancing when deleting objects. Most frequently deletes are followed by inserts so rebalancing the B-Tree greatly decreases performance.  But disabling this rebalancing can lead to a non-optimal tree (with a lot of almost empty pages).</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_AUTO_ROLLBACK_FIRST_PHASE</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>If the commit of the first stage of a two-phase fails, then this flag causes the runtime to implicitly rollback the transaction, not waiting for the application to call <code>mco_trans_rollback()</code>.  This is not the default behavior for two-phase commit because in some scenarios if the first phase of a transaction fails on some nodes in a network, other nodes may have to explicitly roll back their transactions.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_MVCC_COMPATIBILITY_MODE</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>Open a persistent database that was created while using the <code>MVCC</code> transaction manager with an application (or <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span>) using the <code>MURSIW</code> transaction manager. (It is also possible to instruct the <span style="color: #000000; font-style: italic; font-weight: normal;">xSQL</span> to open the database in the transaction manager compatibility mode by setting the <code>mode_mask</code> in the configuration file section <code>db_params:mode_mask</code>).</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_DISABLE_PAGE_POOL_RESERVE</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>By default, if the threshold for the minimal amount of available (not-pinned) pages is reached, the runtime will set the transaction error code, preventing commit of the current transaction. Setting this flag causes the runtime to not reserve space in the page pool, allowing it to use all of the page pool memory and thus make it possible to complete any active transaction. (Note that this may cause a <code>SIGSEGV</code> in the case of page pool exhaustion because the page pool overflow may not be properly handled.)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_REDO_LOG_OPTIMIZATION</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>By default, when using the REDO log option, the transaction size is limited by the size of the page pool. This limitation can prevent applications from performing operations such as creating tables or indexes as the transaction size is effectively limited by the available memory. This flag can be set to enable the runtime, in many cases, to allow transactions larger than the pool page size. (See <a href="../../../Users_Guides/Core/Persistent_Databases/Setting_Log_File_Type.htm">Setting Transaction Log Type and Parameters</a>)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_DISABLE_HOT_UPDATES</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Allows  eliminating the update of indexes if index keys are modified by an update operation. "Hot updates" may increase search time because a search has to traverse the hot update chain to locate the proper object. If updates are relatively rare and the search speed is much more critical, then it can be useful to disable hot updates by setting this flag. </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_SQL_AUTOCHECKPOINT</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">This causes all newly created database objects to be inserted into the defined indexes so that they can be accessed within the transaction without the need to explicitly call the checkpoint API.</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_MODE_READ_ONLY</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>If the flag is set, a <code>READ_WRITE</code> or <code>UPDATE</code> transaction returns the <code>MCO_E_ACCESS</code> error code. Furthermore if the file device assigned to the persistent database (<code>MCO_MEMORY_FILE</code>, <code>MCO_MEMORY_MULTIFILE</code> or <code>MCO_MEMORY_RAID</code>) is detected to be read-only, the database runtime automatically adds the <code>MCO_DB_MODE_READ_ONLY</code> into the open database mode mask.</p>
                            <p>Note that, for persistent databases, the log file must remain writable. If the log device file is made read-only, or if the <code>MCO_FILE_OPEN_READ_ONLY</code> flag for the log device is set by the application, a fatal exception is raised.</p>
                            <p>Also, a database (either persistent or transient) can be loaded via the <code>mco_db_load_*()</code> API (or the corresponding Java, C# or Python APIs) from a previously saved image. In this case, the database is loaded and made read-only, so no further modifications to the database are allowed.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">
                            <p>MCO_DB_USE_AIO</p>
                        </td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                            <p>If the flag is set Asynchronous IO&#160;is used for persistent database writes. By default one AIO thread is started for each database and the default queue size is set to 10007. Sometimes it could be beneficial to change the number of AIO threads (for example if the database is comprised of multiple physical IO devices, or is resided on a RAID) and/or the queue size. However note that the number of I/O threads won't exceed the number of databases created in a process, regardless of the value of worker's threads passed by the application (the runtime does not allow more then one AIO thread to serve a database)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_INCREMENTAL_BACKUP</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">This flag controls the marking of database pages for incremental backup support. Without this flag enabled it is still possible to make backups, but snapshots only, as the database engine will not trace the modification of pages. It is possible to get the status and enable or disable the incremental backup processing at run time using mco_backup_incremental_processing_get() and mco_backup_incremental_processing_set()</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_MVCC_TABLE_LEVEL_LOCKING</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Directs the runtime to block the entire table’s space instead of a selective instances during database operations when using the <code><a href="../../../Users_Guides/Core/MVCC_Transaction_Manager.htm">MVCC</a></code> transaction manager only. The influence of this option on database performance depends on the application’s database access pattern.  </td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_DB_DISABLE_SMART_ALLOC</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">This flag affects the allocation for objects. When set the <i>e</i>X<i>treme</i>DB runtime allocates space for the average object size, calculated from statistics. This can be useful in some cases as it  truncates before assignment, and reduces the number of full map rescans at object allocation.</td>
                    </tr>
                </table>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>