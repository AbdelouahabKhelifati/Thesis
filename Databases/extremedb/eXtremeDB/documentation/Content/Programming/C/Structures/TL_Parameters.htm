<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Control Structures used in the C API">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Transaction Logging Parameters</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/IndentedFunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Transaction Logging Parameters</h1>
            <blockquote>
                <p>The <i>e</i>X<i>treme</i>DB<i> Transaction Logging</i> feature (TL) is configured by specifying the parameters and bit mask values described below.</p>
                <h2>TL Params</h2>
                <p>The following structure is initialized  and passed to function <a href="../TL_Functions/start.htm"><code>mco_translog_start()</code></a>:</p>
                <div class="code-block"><pre>&#160;
    typedef struct mco_TL_start_data
    {
        uint2               flags;          /* MCO_TL_FLAGS - transaction log flags  */
        uint2               disk_page_size; /* size of single disk page              */
        uint2               flush_depth;    /* maximum count of not flushed records  */
        timer_unit          flush_time;     /* time lag between flushed records      */
        mco_TL_timer_proc   timer_proc;     /* user defined external timer procedure.*/
        /* (MUST signal when the specified amount*/
        /* of time has elapsed)                  */
        mco_size_t          max_size;       /* max size of log (warn when reached)   */
        mco_TL_warn_sz_proc warn_sz_proc;   /* user defined procedure that warns     */
        /* when maximum size is reached (MUST NOT*/
        /* call any eXtremeDB functions)         */
        char const          *dual_log_path; /* path to log file in dual out mode     */
        mco_event_mask_t    event_mask;     /* mask of logged events
        * MCO_LOG_MASK_ALL_CHANGES: all transaction changes will be logged
        * MCO_LOG_MASK_ALL_EVENTS: then only changes cause triggering of any of declared events will be logged
        * otherwise mask of logged event identifiers (MCO_EVENT_*)
        */
    &#160;
    } mco_TL_start_data_t, *mco_TL_start_data_h;
&#160;</pre>
                </div>
                <p>The structure elements for structure <code>mco_TL_start_data</code> are defined as follows:</p>
                <table class="TableStyle-IndentedFunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 110px;" />
                    <col class="TableStyle-IndentedFunctionReference-Column-Column2" style="width: 465px;" />
                    <tbody>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">flags</td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">The <a href="#TL">TL flags</a> combination (possible values for these flags are explained below).</td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>disk_page_size</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The size of a single disk page.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>flush_depth</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The number of transactions to accumulate before flushing to disk.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>flush_time</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The number of timer “ticks” to wait before flushing to disk.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>timer_proc</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The user-defined external timer procedure.  It must signal when the time specified in <code>flush_time</code> has elapsed.  (Note: The timer procedure will be invoked only in the process which started logging in the case of a shared memory application.)</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>max_size</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The log file size to activate a warning call to the user-defined procedure <code>warn_sz_proc</code>.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>warn_sz_proc</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The user-defined procedure that warns when the maximum log file size has been reached.</p>
                                <p>(Note: This function must NOT call any <i>e</i>X<i>treme</i>DB functions.)</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>dual_log_path</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>The path to the log file in dual out mode.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">
                                <p>event_mask</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">
                                <p>The bit mask of logged events:</p>
                                <p><code>MCO_LOG_MASK_ALL_CHANGES</code>: all transaction changes will be logged.</p>
                                <p><code>MCO_LOG_MASK_ALL_EVENTS</code>: only changes that cause the triggering of any of the declared events will be logged (i.e. mask all logged event identifiers <code>MCO_EVENT_*</code> generated by the schema compiler).</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2><a name="TL"></a>TL Flags</h2>
                <p>The <code>flags</code> element in structure <code>mco_TL_start_data</code> is specified as a combination of one or more of the following bit mask values:</p>
                <div class="code-block"><pre>&#160;
    enum MCO_TL_FLAGS
    {
        MCO_TRANSLOG_ALIGNED                = 0x01,   /* start each record with new disk page     */
        MCO_TRANSLOG_APPEND                 = 0x02,   /* append to an existing log file           */
        MCO_TRANSLOG_CRC                    = 0x04,   /* cover transaction data with CRC32        */
        MCO_TRANSLOG_SIZE_CLBK              = 0x08,   /* user call-back function to limit size    */
        MCO_TRANSLOG_SYNC_INSTANTLY         = 0x10,   /* do disk flush on each record             */
        MCO_TRANSLOG_SYNC_TIMER             = 0x20,   /* do disk flush by timer                   */
        MCO_TRANSLOG_SYNC_COUNT             = 0x40,   /* do disk flush by record count            */
        MCO_TRANSLOG_ITERABLE               = 0x80,   /* make log applicable for synchronization  */
                    /* with external database by function       */
                    /* mco_translog_iterate (will increase size */
                    /* of log file)                             */
        MCO_TRANSLOG_RESTART                = 0x100,  /* stop previous log at once                */
        MCO_TRANSLOG_PIPE                   = 0x200,  /* use pipe interface instead of file       */
        MCO_TRANSLOG_DUAL_OUT               = 0x400,  /* duplicate data into a local file if pipe */
        /* interface used                           */
        MCO_TRANSLOG_EVENT_MASK             = 0x800,  /* take event_mask field into account       */
        MCO_TRANSLOG_DYNAMIC_PIPE           = 0x1000, /* use dynamic pipes                        */
        MCO_TRANSLOG_PREREAD_PIPE           = 0x2000  /* pre-read pipe to internal buffer to      */
        /* reduce count of blocking operations      */
    };
&#160;</pre>
                </div>
                <p>The possible values for the flags element of the <code>mco_TL_start_data</code> structure are defined as follows (see enum <code>MCO_TL_FLAGS</code> in <code>mcolog.h</code>):</p>
                <table class="TableStyle-IndentedFunctionReference" style="mc-table-style: url('../../../Resources/TableStyles/IndentedFunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 232px;" />
                    <col class="TableStyle-IndentedFunctionReference-Column-Column2" style="width: 469px;" />
                    <tbody>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_TRANSLOG_ALIGNED</td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">Each new data block of a stored transaction begins on a new file page</td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_APPEND</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Append transactions to an earlier saved log file.  The number of the latest transaction in the log file must be the same as the current transaction number of the database.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_CRC</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Cover the body of the transaction's record with <code>CRC32</code><a name="kanchor633"></a> for strong safety. This integrity verification automatically enabled for log-to-file modes (which is also true for other disk manager storage operation such as <code><a href="../Core_Functions/Static/Database_Control/save.htm">mco_db_save()</a></code> and <code><a href="../Core_Functions/Static/Database_Control/load.htm">mco_db_load()</a></code>). In pipe modes (i.e. when <code>MCO_TRANSLOG_PIPE</code> , <code>MCO_TRANSLOG_DYNAMIC_PIPE</code> or <code>MCO_TRANSLOG_DUAL_OUT</code> are specified) this integrity check is <i>disabled by default</i> for improved performance. If <code>CRC32</code> verification is desired for pipe modes <i>it is necessary to specify flag </i><code>MCO_TRANSLOG_CRC</code>.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_SIZE_CLBK</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Call the user-defined procedure <code>warn_sz_proc</code> if the specified size of the log file is reached (element <code>max_size</code> must be greater than 0).</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_SYNC_INSTANTLY</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p><a name="kanchor634"></a>Flush the file system buffers each time a transaction record is written. If the flag  is not specified, the runtime buffers transaction in an intermediate buffer.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_SYNC_TIMER</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Flush to disk every <code>flush_time</code> timer ticks (element <code>flush_time</code> must be greater than 0) as controlled by the user-defined call-back  procedure <code>timer_proc</code> (element <code>timer_proc</code> must not be NULL).</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_SYNC_COUNT</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Flush to disk after every <code>flush_depth</code> transactions.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_RESTART</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Instant restart of a previously started logging session with a new file (without causing freezing of transactions).</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_ITERABLE</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Force the logging engine to write the bodies of deleted objects. This flag is required for creating a log file usable for reading by the function <code><a href="../TL_Functions/iterate.htm">mco_translog_iterate()</a></code> regardless of which method (file or pipe) is used.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_PIPE</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Write the log into the pipe specified in <code><a href="Memory_Devices.htm">mco_device_t</a></code> with assignment <code>MCO_MEMORY_ASSIGN_PIPE_BUF</code>. The argument <code>file_path</code> specifies an optional overflow file if necessary, or 0.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                                <p>MCO_TRANSLOG_DUALOUT</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                                <p>Duplicate the data into a local log file if pipe interface is used. Element <code>dual_log_path</code> specifies the file. The dual out option requires that flag <code>MCO_TRANSLOG_PIPE</code> also be specified.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                            <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">
                                <p>MCO_TRANSLOG_EVENT_MASK</p>
                            </td>
                            <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">
                                <p>Enable filtering of data stored in the log by events mask. Element <code>event_mask</code> specifies the desired filter.</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <h2>Implementation notes</h2>
                <p>Note that the flag values <code>MCO_TRANSLOG_SYNC_TIMER</code> and <code>MCO_TRANSLOG_SYNC_COUNT</code> are compatible with each other, but not with <code>MCO_TRANSLOG_SYNC_INSTANTLY</code>.</p>
                <p>The flag value <code>MCO_TRANSLOG_ITERABLE</code> should be used if the log is expected to be read by the function <code><a href="../TL_Functions/iterate.htm">mco_translog_iterate()</a></code>. It is extremely important that it be specified in conjunction with the flag value <code>MCO_TRANSLOG_PIPE</code>.</p>
                <p>Only the <code><a href="../../../Users_Guides/Core/MVCC_Transaction_Manager.htm" name="kanchor635">MVCC</a></code><a name="kanchor636"></a> transaction manager is supported for producing an iterable log when using Persistent databases.</p>
                <p>If mode <code>MCO_TRANSLOG_PIPE</code> is used, then at least one connection to a pipe must be kept open until <code><a href="../TL_Functions/stop.htm">mco_translog_stop()</a></code> is called. The simplest way to satisfy this requirement is to use the same connection that calls the function  <code><a href="../TL_Functions/start.htm">mco_translog_start()</a></code> to call the function<code> <a href="../TL_Functions/stop.htm"><code>mco_translog_stop(</code>)</a></code>. It is possible to call <code><a href="../TL_Functions/stop.htm">mco_translog_stop()</a></code> from another connection, but in this case be sure to keep the original connection open, otherwise data in the pipe may be lost, in which case the error <code>MCO_E_TL_PIPE_LOST</code> will be returned by<code> <a href="../Core_Functions/Static/Transaction_Control/commit.htm">mco_trans_commit()</a></code> or any of <code>mco_translog_*()</code> functions depending on the moment the pipe was lost. This is a guard feature and should never happen. But if it occurs, then logging should be stopped and started again.</p>
                <p>The two user-defined callback procedure elements of the <code>mco_TL_start_data</code> structure have the following prototypes:</p>
                <div class="code-block"><pre>&#160;
    typedef mco_bool(*mco_TL_timer_proc)(mco_TL_flush_timer_h timer);
    &#160;
    typedef void (*mco_TL_warn_sz_proc)(mco_size_t log_size);
    &#160;</pre>
                </div>
                <p>where the <code>mco_TL_flush_timer</code> structure is defined as follows:</p>
                <div class="code-block"><pre>&#160;
    typedef struct mco_TL_flush_timer_
    {
        timer_unit flush_time;   /* time of most recent flush */
        timer_unit time_elapsed; /* elapsed time since last flush */
    &#160;
    } mco_TL_flush_timer_t, *mco_TL_flush_timer_h;
    &#160;</pre>
                </div>
                <h2>Translog Play Params</h2>
                <p>The following structure is initialized by <code><a href="../TL_Functions/play_params_init.htm">mco_translog_play_params_init()</a></code> and passed to function <a href="../TL_Functions/start.htm"><a href="../TL_Functions/play_ex.htm"><code>mco_translog_play_ex()</code></a></a>:</p>
                <div class="code-block"><pre>&#160;
    typedef struct mco_TL_play_params_
    {
        char const                             *src_file_path;
        mco_db_h                                pipe_db;
        mco_device_t                           *pipe_device;
        mco_trans_iterator_callback_t           iteration_proc;
        void                                   *iterproc_user_ctx;
        mco_dictionary_h                        dict;
        void                                   *mem_ptr;
        mco_size_t                              mem_size;
        mco_translog_register_event_handlers_t  register_callback;
        void                                   *regevent_user_ctx;
        mco_size_t                              ddl_dict_size;
        int                                     ddl_dict_flags;
        int                                     max_classes;
        int                                     max_indexes;
    &#160;
    } mco_TL_play_params_t, *mco_TL_play_params_h;
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>