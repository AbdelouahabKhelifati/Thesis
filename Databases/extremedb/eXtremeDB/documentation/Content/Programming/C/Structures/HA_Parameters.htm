<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Control Structures used in the C API">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>HA_Params</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>HA_Params</h1>
            <blockquote>
                <p>The <i>e</i>X<i>treme</i>DB<i> High Availability</i> feature (HA) is configured by specifying the parameters and bit mask values described below.</p>
                <h3>For an overview see page <a href="../../../Users_Guides/HA/HA_Applications.htm">HA Applications</a></h3>
                <h2>HA Params</h2>
                <h3>Master Parameters</h3>
                <p>The following structure is initialized and passed to function <code><a href="../HA_Functions/set_master_params.htm">mco_HA_set_master_params()</a></code>:</p>
                <div class="code-block"><pre xml:space="preserve">&#160;
    typedef struct
    {
        uint4 mode_flags; /* &lt; HA modes &amp; options flags */
        uint2 max_number_of_replicas;
        mco_device_t async_databuf; /* for MCO_HAMODE_ASYNC */
        uint4 trans_log_length; /* for STATEFUL_REPLICATION */
        timer_unit commit_timeout; /* to send transaction data to replica(s) */
        timer_unit initial_timeout; /* attach_replica() timeout (initial synchronization) */
        timer_unit synch_timeout;  /* to wait ACK from replica(s) */
        timer_unit detach_timeout;  /* to detach replica(s) */
        uint2 mcast_port; /* for multicast */
        const char *mcast_addr;
        mco_HA_ErrorHandler errhandler; /* detach replica callback */
        void  *errhandler_ctx; /* detach replica callback context */
        uint4  hotsync_msg_objects;
        uint4  hotsync_msg_size;
        uint8  initial_ha_sequencer;
        void  *ssl_params; 
        mco_bool disable_writes_on_kill; /*&#160;To allow re-switching from master back to the 
                             replica instance when the original master has been 
                            restarted could result in lost transactions. */
        uint2  quorum; /* initial value of quorum */</pre><pre xml:space="preserve">        int    compression_level; /* the level of compression */
    } mco_HA_master_params_t;
   </pre>
                </div>
                <h3>Replica Parameters</h3>
                <p>The following structure is initialized and passed to function <code><a href="../HA_Functions/attach_master.htm">mco_HA_attach_master()</a></code>:</p>
                <div class="code-block"><pre>    &#160;
    typedef struct
    {
        uint4 mode_flags;
        timer_unit initial_timeout; /* &lt; initial sync timeout */
        timer_unit commit_timeout; /* read transaction data */
        timer_unit wait_data_timeout; /* &lt; amount of time replica waits for the next commit */
        mco_ha_notifying notifying_callback; /* &lt; pointer to notification callback routine */
        void* notifying_context; /* &lt; user-defined argument for notification callback routine */
        uint2 repeat_counter; /* &lt; counter of attempts to repeat the commit */
        uint2 mcast_port;
        const char *mcast_addr;
        const char* cancelpoint_addr;
        MCO_COMMIT_POLICY initial_commit_policy; /* disk commit policy during initial synchronization */
        uint4             initial_objs_in_trans; /* number of objects per transaction during initial synchronization */
        void *ssl_params;
        mco_trans_iterator_callback_t iterator; /* Related to replica-side transactions iteration */
        void                         *iterator_context; /* Related to replica-side transactions iteration */
        uint4 batch_commit_length; /* in transactions */
        uint4         batch_commit_bsize;   /* in bytes */
        timer_unit    batch_commit_period; /* in milliseconds */
        int           compression_level; /* the level of compression */
    &#160;
    } mco_HA_replica_params_t;
&#160;</pre>
                </div>
                <h3>Note on Batch Commit Parameters</h3>
                <p>If both <code>batch_commit_length</code> and <code>batch_commit_bsize</code> are 0, the batch commit is not used (regardless of <code>batch_commit_period</code> value). This is the default behaviour.</p>
                <p><i>Note that batch commit makes sense only for asynchronous replication mode or synchronous mode with transaction window size greater than 1</i><a name="kanchor56"></a>. This is because the HA runtime always commits a batch transaction before replica ACKs to the master. This preserves the semantic of synchronous replication: if replica reports a successful commit with ACK, the transaction has already been commited on the replica.</p>
                <h3>Examples</h3>
                <p>Following are example settings for some different batch commit behaviors. In all these examples <code>batch_commit_period</code> has the default value 1000 (1 second).</p>
                <p>Merge up to 10 transactions, regardless size of transactions:</p>
                <div class="code-block"><pre>&#160;
    mco_HA_replica_params_t rpl_p;
    mco_HA_replica_params_init( &amp;rpl_p );
    rpl_p.batch_commit_length = 10;
    &#160;</pre>
                </div>
                <p>Merge up to 10 transactions while the total size is less than 100Kb:</p>
                <div class="code-block"><pre>&#160;
    mco_HA_replica_params_t rpl_p;
    mco_HA_replica_params_init( &amp;rpl_p );
    rpl_p.batch_commit_length = 10;
    rpl_p.batch_commit_bsize = 100 * 1024;
    &#160;</pre>
                </div>
                <p>Merge transactions while the total size is less than 1Mb:</p>
                <div class="code-block"><pre>&#160;
    mco_HA_replica_params_t rpl_p;
    mco_HA_replica_params_init( &amp;rpl_p );
    rpl_p.batch_commit_bsize = 1024 * 1024;
    &#160;</pre>
                </div>
                <h2><a name="TL"></a>HA Flags</h2>
                <h3>Master Mode Flags</h3>
                <p>The <code>mode_flags</code> element in structure <code>mco_HA_master_params_t</code> is specified as a combination of one or more of the following bit mask values:</p>
                <div class="code-block"><pre>&#160;
    /* Master mode flags */
    #define MCO_MASTER_MODE                  0x1
    #define MCO_HAMODE_MULTIPROCESS_COMMIT   0x2
    #define MCO_HAMODE_ASYNCH                0x4
    #define MCO_HAMODE_MCAST                 0x8
    #define MCO_HAMODE_MCAST_RELIABLE        0x10
    #define MCO_HAMODE_HOTSYNCH              0x20
    #define MCO_HAMODE_STATEFUL_REPLICATION  0x40
    #define MCO_HAMODE_BINEVOLUTION          0x80
&#160;</pre>
                </div>
                <h3>Replica Mode Flags</h3>
                <p>The <code>mode_flags</code> element in structure <code>mco_HA_replica_params_t</code> is specified as a combination of one or more of the following bit mask values:</p>
                <div class="code-block"><pre>&#160;
    /* Replica mode flags */
    #define MCO_HAMODE_ALLOW_CANCEL           0x2000
    #define MCO_HAMODE_FORCE_MASTER           0x4000
    #define MCO_HAMODE_REPLICA_NOTIFICATION   0x8000
    #define MCO_HAMODE_FORCE_SYNC             0x10000
    #define MCO_HAMODE_SEND_RESTLIST          0x20000 /* Means that replica and master need to exchange 
                                information about the registered REST interfaces 
                                during the initial synchronization phase */
    #define MCO_HAMODE_EXPLICIT_WRITE_ACCESS  0x40000
&#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">Â© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>