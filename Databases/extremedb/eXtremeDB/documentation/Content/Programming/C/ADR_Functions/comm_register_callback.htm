<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Static API|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>mco_iot_comm_register_callback</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>mco_iot_comm_register_callback</h1>
            <p>Register a callback function.</p>
            <h3>For an overview see page <a href="../../../Users_Guides/ADR/ADR_Applications_C.htm">ARF Applications in C</a></h3>
            <h3>Prototype</h3>
            <div class="code-block"><pre>&#160;
    MCO_RET mco_iot_comm_register_callback(mco_iot_comm_h comm, 
                            iot_comm_callback_t *callback, 
                            void *context);
&#160;</pre>
            </div>
            <h3>Arguments</h3>
            <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                <col class="TableStyle-FunctionReference-Column-Column2" />
                <col class="TableStyle-FunctionReference-Column-Column2" style="width: 349px;" />
                <tbody>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">comm</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The <i>communicator</i> object to register the callbacks on</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">callback</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">The callback structure <code><a href="../Structures/IoT_Callbacks.htm">iot_comm_callback_t</a></code> with initialized function pointers</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">context</td>
                        <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">A user-defined context (a pointer to a structure containing application-specific data)</td>
                    </tr>
                </tbody>
            </table>
            <h3>Description</h3>
            <p>This function  registers a callback function structure <code><a href="../Structures/IoT_Callbacks.htm">iot_comm_callback_t</a></code> for <i>communicator</i> <code>comm</code><a name="kanchor134"></a> with the ARF (IoT) runtime. Note that the <code>context</code> must be unique for all currently active callbacks; i.e. it is not possible to register two callbacks with the same context. (See the <code><a href="../Structures/IoT_Callbacks.htm">iot_comm_callback_t</a></code> structure definition for a description of the events for which callback functions are called.) </p>
            <h3>Return Codes</h3>
            <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                <col class="TableStyle-FunctionReference-Column-Column2" />
                <col class="TableStyle-FunctionReference-Column-Column2" style="width: 205px;" />
                <tbody>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_S_OK</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Callbacks successfully registered</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_E_ILLEGAL_PARAM</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1"> Values in <code>params</code> are not valid / suitable</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">MCO_E_NOMEM</td>
                        <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Unable to allocate memory for the callback descriptor
</td>
                    </tr>
                    <tr class="TableStyle-FunctionReference-Body-Body1">
                        <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">MCO_E_IOT_DUPLICATE_CALLBACK</td>
                        <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">A callback with the same <code>context</code> is already registered (see Note above)</td>
                    </tr>
                </tbody>
            </table>
            <h3>Example</h3>
            <p>The code snippet below defines 5 callbacks, initializes the ARF (IoT) runtime and, after opening and connecting the database, creates the <i>communicator</i> then registers the callbacks:</p>
            <div class="code-block"><pre>    &#160;
    int iot_on_connect(mco_iot_connection_h iotc, void *context)
    {
        mco_iot_connection_stat_t iotc_stat;
        char address[MCO_NET_INETADDR_STRING_LEN];
        mco_iot_conn_get_stat(iotc, &amp;iotc_stat);
        mco_net_ntoa(&amp;iotc_stat.inetaddr, address);
        printf("Agent %llu connected. Address %s:%d\n", mco_iot_conn_get_agent_id(iotc), address, iotc_stat.port);
        return IOT_CALLBACK_OK;
    }
&#160;
    int iot_on_receive(mco_iot_connection_h iotc, mco_iot_read_stream_t *stream, void *context)
    {
        printf("DATA received from agent %llu\n", mco_iot_conn_get_agent_id(iotc));
        return IOT_CALLBACK_OK;
    }
&#160;
    int iot_on_ack(mco_iot_connection_h iotc, const iot_ack_t *ack, void *context)
    {
        printf("ACK  received from agent %llu : %llu-&gt;%llu, ts=%llu, errcode=%d (%s)\n", mco_iot_conn_get_agent_id(iotc),
        ack-&gt;sender_agent_id, ack-&gt;receiver_agent_id, ack-&gt;timestamp, ack-&gt;error_code, mco_strerror(ack-&gt;error_code));
        return IOT_CALLBACK_OK;
    }
&#160;
    int iot_on_disconnect(mco_iot_connection_h iotc, void *context)
    {
        mco_iot_connection_stat_t iotc_stat;
        mco_iot_conn_get_stat(iotc, &amp;iotc_stat);
        printf("Agent %llu disconnected. Bytes sent %llu, recevied %llu\n", mco_iot_conn_get_agent_id(iotc),
        iotc_stat.sent_bytes, iotc_stat.recv_bytes);
        return IOT_CALLBACK_OK;
    }
&#160;
    int iot_on_destroy(mco_iot_connection_h iotc, void *context)
    {
        printf("Agent connection %llu destroyed\n", mco_iot_conn_get_agent_id(iotc));
        return IOT_CALLBACK_OK;
    }
    &#160;
    int main(int argc, char *argv[])
    {
        mco_db_params_t db_params;
        mco_device_t dev;
        mco_db_h db;
        mco_iot_replicator_params_t repl_params;
        mco_iot_comm_params_t comm_params;
        mco_iot_replicator_h repl;
        mco_iot_comm_h comm;
        const char *conn_string = (argc &gt; 1) ? argv[1] : "127.0.0.1:15000";
        iot_comm_callback_t iot_callbacks = {&amp;iot_on_connect, &amp;iot_on_receive, &amp;iot_on_ack, &amp;iot_on_disconnect, &amp;iot_on_destroy};
        
&#160;
        /* Initialize eXtremeDB and IoT runtimes */
        mco_error_set_handler(&amp;sample_errhandler);
        mco_runtime_start();
        mco_iot_init();
&#160;
        /* Create database */
        dev.type       = MCO_MEMORY_CONV;
        dev.assignment = MCO_MEMORY_ASSIGN_DATABASE;
        dev.size       = DEVICE_DATABASE_SIZE;
        dev.dev.conv.ptr = (void*)malloc(dev.size);
        mco_db_params_init (&amp;db_params);
        db_params.db_max_connections = 5;
&#160;
        if (argc &gt; 2) {
            db_params.iot_agent_id = atoi(argv[2]); /* Override the agent_id in the schema */
        }
        CHECK(mco_db_open_dev(db_name, iotdevice_get_dictionary(), &amp;dev, 1, &amp;db_params));
        CHECK(mco_db_connect(db_name, &amp;db));
        mco_iot_comm_params_init(&amp;comm_params);
        CHECK(mco_iot_comm_create(&amp;comm_params, &amp;comm));
        ...
        CHECK(mco_iot_comm_register_callback(comm, &amp;iot_callbacks, comm));
    }
    &#160;</pre>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>