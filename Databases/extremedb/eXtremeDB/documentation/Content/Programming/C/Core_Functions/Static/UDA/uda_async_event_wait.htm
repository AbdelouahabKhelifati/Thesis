<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|[%=System.LinkedTitle%]|Static API|Uniform Database Access (UDA)">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>mco_uda_async_event_wait</title>
        <link href="../../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../../../Resources/TableStyles/IndentedFunctionReference.css" rel="stylesheet" />
        <script src="../../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>mco_uda_async_event_wait</h1>
            <blockquote>
                <p>Block the thread until the event is fired .</p>
            </blockquote>
            <h3>Prototype</h3>
            <div class="code-block"><pre>&#160;
    MCO_RET mco_uda_async_event_wait(	/*IN*/ mco_db_h db,
                       /*IN*/ unsigned short struct_no, 
                       /*IN*/ unsigned short event_no );
&#160;</pre>
            </div>
            <h3>Arguments</h3>
            <table class="TableStyle-IndentedFunctionReference" style="mc-table-style: url('../../../../../Resources/TableStyles/IndentedFunctionReference.css');" cellspacing="0">
                <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 94px;" />
                <col class="TableStyle-IndentedFunctionReference-Column-Column2" />
                <tbody>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">db</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">The database handle</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">
                            <p>struct_no</p>
                        </td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">
                            <p>The structure/class number (must be between 0 and <code><a href="dict_struct_count.htm">mco_dict_struct_count()</a></code> - 1)</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">
                            <p>event_no</p>
                        </td>
                        <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">
                            <p>The event number</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h3>Description</h3>
            <blockquote>
                <p>This function blocks the thread until the specified event  is fired by the application, or the application explicitly releases the event handler by calling function <code>mco_uda_async_event_release()</code> or <code>mco_uda_async_event_release_all()</code>.</p>
            </blockquote>
            <h3>Return Codes</h3>
            <table class="TableStyle-IndentedFunctionReference" style="mc-table-style: url('../../../../../Resources/TableStyles/IndentedFunctionReference.css');" cellspacing="0">
                <col class="TableStyle-IndentedFunctionReference-Column-Column1" style="width: 185px;" />
                <col class="TableStyle-IndentedFunctionReference-Column-Column2" />
                <tbody>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_S_OK</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">The event handler was released successfully</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyE-Column1-Body1">MCO_E_INVALID_HANDLE</td>
                        <td class="TableStyle-IndentedFunctionReference-BodyD-Column2-Body1">The database handle is invalid</td>
                    </tr>
                    <tr class="TableStyle-IndentedFunctionReference-Body-Body1">
                        <td class="TableStyle-IndentedFunctionReference-BodyB-Column1-Body1">
                            <p>MCO_S_EVENT_RELEASED</p>
                        </td>
                        <td class="TableStyle-IndentedFunctionReference-BodyA-Column2-Body1">
                            <p>The event was released by the application</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h3>Example</h3>
            <div class="code-block"><pre>    &#160;
    Application snippet:
        
    &#160;
    typedef struct ThrParam_
    {
        sample_task_t task;
        mco_db_h db;
        unsigned short struct_no;
        unsigned short event_no;
        int event_count;
        int finished;
    } ThrParam;
    &#160;
    void async_event_handler( sample_task_t * descriptor )
    {
        ThrParam* thr_p = (ThrParam*) descriptor-&gt;param;
        mco_dict_struct_info_t struct_info;
        mco_dict_field_info_t field_info;
        mco_dict_event_info_t event_info;
        mco_db_h db = thr_p-&gt;db;
        char *event_type;
        MCO_RET rc;
        &#160;
        thr_p-&gt;finished = 0;
        thr_p-&gt;event_count = 0;
        &#160;
        mco_dict_struct(metadict, 0, thr_p-&gt;struct_no, &amp;struct_info);
        mco_dict_event(metadict, 0, thr_p-&gt;struct_no, thr_p-&gt;event_no, &amp;event_info);
        if (event_info.type == MCO_EVENT_UPDATE) {
            mco_dict_field(metadict, 0, thr_p-&gt;struct_no, event_info.field_no, &amp;field_info);
        }
        switch (event_info.type) {
            case MCO_EVENT_UPDATE       : event_type = "UPDATE"; break;
            case MCO_EVENT_NEW          : event_type = "NEW"; break;
            case MCO_EVENT_DELETE       : event_type = "DELETE"; break;
            case MCO_EVENT_DELETE_ALL   : event_type = "DELETE_ALL"; break;
            case MCO_EVENT_CHECKPOINT   : event_type = "CHECKPOINT"; break;
            case MCO_EVENT_CLASS_UPDATE : event_type = "CLASSUPDATE"; break;
        }
        for (;;)
        {
            rc = mco_uda_async_event_wait(db, thr_p-&gt;struct_no, thr_p-&gt;event_no);
        
            printf("Async. event : class %s, event_no=%d, type=%s ", struct_info.name, thr_p-&gt;event_no, event_type);
            if (event_info.type == MCO_EVENT_UPDATE) {
                printf("field=%s ", field_info.name);
            }
            if (rc != MCO_S_OK) {
                printf(" exiting. Num. of events=%d\n", thr_p-&gt;event_count);
                thr_p-&gt;finished = 1;
                return ;
            }
            ++thr_p-&gt;event_count;
            printf("\n");
        }
    }
    &#160;
    void start_async_handlers(mco_db_h db)
    {
        unsigned short struct_count, s, e;
        mco_dict_struct_info_t struct_info;
        unsigned short thr_num = 0;
        &#160;
        mco_dict_struct_count(metadict, 0, &amp;struct_count);
        for (s = 0; s &lt; struct_count; ++s) {
            mco_dict_struct(metadict, 0, s, &amp;struct_info);
            for (e = 0; e &lt; struct_info.event_count; ++e) {
                all_thr_param[thr_num].db = db;
                all_thr_param[thr_num].struct_no = s;
                all_thr_param[thr_num].event_no  = e;
                sample_start_connected_task(&amp;all_thr_param[thr_num].task, async_event_handler, db_name, &amp;all_thr_param[thr_num]);
                ++thr_num;
                sample_sleep(100);
            }
        }
    }
    &#160;
    int main(int argc, char* argv[])
    {
        MCO_RET rc;
        mco_db_h db;
        ...
        start_async_handlers(db);
        ...
    }
    &#160;
&#160;</pre>
            </div>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>