<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="extremedb.xml" data-mc-path-to-help-system="../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Programming with eXtremeDB|Native APIs|Python API|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sequence Manipulator Python SequenceIterator Methods</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Resources/Stylesheets/KB_Style.css" rel="stylesheet" />
        <link href="../../../Resources/TableStyles/FunctionReference.css" rel="stylesheet" />
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="TopicContent">
            <div class="nocontent">
                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="7" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">ToC path: </span>
                </div>
            </div>
            <h1>Sequence Manipulator Python <i>SequenceIterator</i> Methods</h1>
            <blockquote>
                <p>The following <i>sequence manipulator</i> methods take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below:</p>
                <table class="TableStyle-FunctionReference" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/FunctionReference.css');" cellspacing="0">
                    <col class="TableStyle-FunctionReference-Column-Column2" style="width: 179px;" />
                    <col class="TableStyle-FunctionReference-Column-Column2" />
                    <tbody>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">reverse()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the object's sequence in reverse order</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">concat(input)</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the object's sequence concatenated with the <i>input</i> sequence</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">limit( from, till )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sub-sequence [<i>from</i>,<i>till</i>] of the object's sequence</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">get( [size] )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Extract data from the object's sequence to a list. If the optional parameter <i>size</i> is specified, limit the list to that length</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">unget( input, elemtype [, elemsize] )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Iterate through the buffer <i>input</i>  previously created with <code>get()</code> to return the result  sequence of the type <i>elemtype</i>. The optional parameter <i>elemsize</i> is the length of the buffer.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">uniq()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return only the unique elements in the object's ordered sequence  by "collapsing duplicates"</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">norm()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the normalized values of the object's sequence; i.e. divide each sequence element by the square root of the sum of squares of all elements.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">thin( origin, step )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the object's sequence "thinned" by selecting elements with the specified <i>origin</i> and <i>step.</i></td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">diff()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence consisting of the differences between pairs of the object's sequence elements </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">const( value, elemtype [,elemsize] )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence of the specified type <i>elemtype</i> with elements having the constant value <i>val</i>ue. The optional parameter <i>elemsize</i> determines the element size for a sequence of type character array</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">trend()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">
                                <p>Return in result sequence the " trend" by comparing  pairs of the object's sequence elements the sign of the difference between pairs of non-equal sequence elements. For example, the <i>input</i> sequence <code>{1,2,3,3,2,2,4,5,6,5,5}</code> would produce the <i>result</i><code>{0,1,1,1,-1,-1,1,1,1,-1,-1}</code>.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">tee()</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Create two iterators for the object's sequence (i.e. fork the sequence iterator). (Note that these iterators should be traversed together (i.e. used in the same expression).</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">repeat( n_times )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the sequence with each element of the object's sequence repeated <i>n_times</i> times</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyE-Column2-Body1">cross( cross_direction )</td>
                            <td class="TableStyle-FunctionReference-BodyD-Column2-Body1">Return the positions in the object's sequence where it crosses zero. If the integer argument <i>cross_direction</i> is positive then the <i>result</i> sequence starts with the first cross above zero; if negative it starts with cross below zero; if <i>cross_direction</i> is zero then it doesn't matter, i.e. the first cross can be above or below zero.</td>
                        </tr>
                        <tr class="TableStyle-FunctionReference-Body-Body1">
                            <td class="TableStyle-FunctionReference-BodyB-Column2-Body1">extrema( first_extremum )</td>
                            <td class="TableStyle-FunctionReference-BodyA-Column2-Body1">Return the positions  of extrema (local minimum and maximums) in the object's sequence. If the integer argument <i>first_extremum</i> is positive then the <i>result</i> sequence starts with first local maximum; if negative it starts with with local minimum; if <i>first_extremum</i> is zero then it doesn't matter.</td>
                        </tr>
                    </tbody>
                </table>
                <h2>Example</h2>
                <p>Following is an example code snippet demonstrating <i>sequence manipulator</i> methods:</p>
                <div class="code-block"><pre>    &#160;
    cursor = con.cursor("Quote", "by_sym")
    for quote in cursor:
        ...
        cl1,cl2 = quote.close.tee()
            
        avg5_it = cl1.window_agg_avg(5)
        avg20_it = cl2.window_agg_avg(20)
        sub_it = avg20_it.sub(avg5_it)
        cross_it = sub_it.cross(1)
            
        agg_it = quote.day.map(cross_it)
            
        ...
    &#160;</pre>
                </div>
            </blockquote>
            <p style="font-size: 6pt;margin-top: 0;margin-bottom: 0;">&#160;</p>
            <hr width="100%" size="0" align="center" />
            <p class="copyright" style="font-size: 8pt;"><a href="../../../Copyright_Notice.htm" title="Copyright Notice" alt="Copyright Notice">© 2001-2019 McObject LLC. All rights reserved</a>.</p>
            <p class="copyright" style="font-size: 8pt;">&#160;</p>
            <p class="copyrightFeedback" style="font-size: 8pt;"><a href="mailto:Support@McObject.com?subject=Online Documentation feedback">Send feedback</a> <span style="color: #000000;">on this topic to McObject. </span></p>
        </div>
    </body>
    <script id="MCO-LINKS">/* <![CDATA[ */
		(function(){
		var isFramed = false;
		try {
		isFramed = window != window.top || document != top.document || self.location != top.location;
		} catch (e) {
		isFramed = true;
		}
		if (!isFramed) {
		var link1 = document.createElement('a');
		link1.setAttribute('href','#');
		link1.setAttribute('id','back-id');
		link1.setAttribute('title','Go back');
		link1.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M0 0h24v24H0z" fill="none" /><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" /></svg>';
		var link2 = document.createElement('a');
		link2.setAttribute('href','/');
		link2.setAttribute('title','Go to mcobject.com');
		link2.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var link3 = document.createElement('a');
		link3.setAttribute('href','/docs/extremedb.htm');
		link3.setAttribute('title','Go to table of content');
		link3.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#555555"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z" /><path d="M0 0h24v24H0z" fill="none" /></svg>';
		var el = document.createElement('div');
		el.style.cssText = 'position:fixed;display:flex;flex-direction:column;right:16px;top:8px;background:#f7f7f7;box-shadow:4px 4px 4px #777777;padding:4px 8px;';
		el.appendChild(link1);
		el.appendChild(link2);
		el.appendChild(link3);
		document.body.append(el);
		document.querySelector('#back-id').addEventListener('click',function(e){e.preventDefault(); window.history.back();});
		}
		})();
	/* ]]> */</script>
</html>