define({"1438":{i:0.000217235969951972,u:"../Content/Programming/C++/Classes/Analytics_Methods/GridAgg_Methods.htm",a:"All Grid Aggregate C++ Sequence methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  Example Following is an example code snippet demonstrating a grid aggregate method:          \n    {\n        mco_trans_h trans;\n        ...",t:"Grid Aggregate C++ Sequence Methods"},"1439":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/WindowAgg_Methods.htm",a:"Like Grid Aggregate methods, all C++ Sequence Window Aggregate methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  The difference in how Window Aggregate methods determine their sliding window interval is described in the  ...",t:"Window Aggregate C++ Sequence Methods"},"1440":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/HashAgg_Methods.htm",a:"The Hash Aggregate C++ Sequence methods take various input arguments and return two iterators: result for the grouping values and groups for the group aggregates. Example Following is an example code snippet demonstrating use of a hash aggregate method to calculate the average Close price for Volume ...",t:"Hash Aggregate C++ Sequence Methods"},"1441":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/CumulativeAgg_Methods.htm",a:"All Cumulative Aggregate C++ Sequence methods produce a result sequence which is of the same type as the object\u0027s sequence or of type double depending on the operation performed. The value of each element is the result of the specified operation on all of the preceding elements. Example Following is ...",t:"Cumulative Aggregate C++ Sequence Methods"},"1442":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Miscellaneous_Methods.htm",a:"Miscellaneous C++ Sequence Methods The following C++ Sequence methods take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below:",t:"Miscellaneous C++ Sequence Methods"},"1443":{i:0.00311739610562819,u:"../Content/Programming/C++/Cpp_Classes.htm",a:"The principle class for most eXtremeSQL C++ applications is  McoSqlEngine or for multi-threaded applications  McoMultithreadedSqlEngine. However, functionality for managing transactions and executing prepared statements is provided in the  McoSqlSession class. The  McoSqlEngine instance may use  ...",t:"The C++ Classes"},"1444":{i:0.000557900739747041,u:"../Content/Programming/C++/Classes/SqlEngine.htm",a:"The SqlEngine class implements functionality common to all SQL databases, whereas  McoSqlEngine,  McoMultithreadedSqlEngine,  RemoteSqlEngine and  SqlServer (specialized subclasses) manage the specific integration of SQL with eXtremeDB databases. These subclasses inherit all public methods from base ...",t:"The C++ SqlEngine Class"},"1445":{i:0.00257424980697353,u:"../Content/Programming/C++/Classes/McoSqlEngine.htm",a:"This is the principle class for most eXtremeSQL C++ applications. An instance of McoSqlEngine is used to open and connect to an eXtremeDB database,  execute SQL statements and process query result sets, and perform other database operations. (Please view the  Embedded SQL Quick Start  page for an ...",t:"The C++ McoSqlEngine Class"},"1446":{i:0.000474501510448604,u:"../Content/Programming/Common/Format_Specifiers/Format_Specifiers_C_Cpp.htm",a:"When executing the McoSqlEngine methods executeStatement(), executeQuery() or prepare(), or the C API equivalents, the format specifiers for substituting variable values into the SQL string are defined in the sections below. The parameter substitution occurs wherever a per cent sign is followed by a ...",t:"The C++ SQL Parameter Substitution Format Specifiers"},"1447":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/Constructor.htm",a:"Create an instance of McoSqlEngine. For an overview see page  McoSqlEngine The McoSqlEngine default constructor takes no arguments and is invoked implicitly when an engine object is declared. Typically a C++ application will instantiate an McoSqlEngine object in the main program as illustrated ...",t:"default constructor"},"1448":{i:0.000312925675675646,u:"../Content/Programming/C++/Classes/McoSqlEngine/open1.htm",a:"Open the SQL engine with McoSqlOpenParameters. For an overview see page  McoSqlEngine Prototype  \n    void open(McoSqlOpenParameters const \u0026params);\n  Arguments Description This method opens an eXtremeDB database, an eXtremeDB SQL mapper and the McoSqlEngine instance with the parameters specified in ...",t:"open( params )"},"1449":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/open2.htm",a:"Open the SQL engine with a database handle. For an overview see page  McoSqlEngine Prototype  \n    void open(mco_db_h db);\n  Arguments Description This method opens an eXtremeDB SQL mapper and the McoSqlEngine instance with the database handle in argument db. Returns This method throws a ...",t:"open( database handle )"},"1450":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/open3.htm",a:"Open the SQL engine  with a list of parameters. Prototype  \n    void open(char const* name, \n            mco_dictionary_h dictionary, \n            size_t size,\n            size_t pageSize = 128,\n            void* mapAddress = MCO_DATABASE_DEFAULT_MAP_ADDRESS,\n            size_t maxTransSize = 0,\n    ...",t:"open( parameter list )"},"1451":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/executeQuery.htm",a:"Execute an SQL  select statement. For an overview see page  McoSqlEngine Prototypes  \n    ResultSet* SqlEngine::executeQuery(char const* sql, ...);\n     \n    ResultSet* SqlEngine::executeQuery(Transaction* trans, char const* sql, ...)\n  Arguments Description These methods execute an SQL  select ...",t:"executeQuery"},"1452":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/vexecuteQuery.htm",a:"Execute an SQL  select statement with a va_list argument containing a list of parameters or an array of  Value parameters. For an overview see page  McoSqlEngine Prototypes  \n    ResultSet* SqlEngine::vexecuteQuery(char const* sql, va_list* list);\n     \n    ResultSet* SqlEngine::vexecuteQuery(char ...",t:"vexecuteQuery"},"1453":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/executeStatement.htm",a:"Execute an SQL  insert,  update or  delete statement with a variable list of  parameters. For an overview see page  McoSqlEngine Prototypes  \n    int64_t  SqlEngine::executeStatement(char const* sql, ...);\n     \n    int64_t  SqlEngine::executeStatement(Transaction* trans, char const* sql, ...)\n  ...",t:"executeStatement"},"1454":{i:0.00012163265184034,u:"../Content/Programming/C++/Classes/McoSqlEngine/vexecuteStatement.htm",a:"Execute an SQL  insert,  update or  delete statement  with a va_list argument containing a list of parameters or an array of  Value parameters. For an overview see page  McoSqlEngine Prototypes  \n    int64_t SqlEngine::vexecuteStatement(char const* sql, va_list* list);\n     \n    int64_t ...",t:"vexecuteStatement"},"1455":{i:0.000292414167621695,u:"../Content/Users_Guides/SQL/C++_API/Prepared_Statements.htm",a:"As explained in the  Embedded SQL Application Development in C++  page, it is sometimes useful to create a SQL statement that will be executed multiple times. In eXtremeSQL, this is done by calling one of the prepare() or vprepare() methods in class  McoSqlEngine to compile the SQL statement into a ...",t:"Executing eXtremeSQL Prepared Statements in C++"},"1456":{i:0.00020267468577169,u:"../Content/Programming/C++/Classes/McoSqlEngine/beginTransaction.htm",a:"Start a database transaction creating a  Transaction instance. For an overview see page  McoSqlEngine Prototypes  \n    Transaction* SqlEngine::beginTransaction(Transaction::Mode mode, \n                            int priority = 0, \n                            Transaction::IsolationLevel level = \n    ...",t:"beginTransaction"},"1457":{i:0.000284165910607499,u:"../Content/Programming/C++/Classes/McoSqlEngine/backupCreate.htm",a:"Perform an incremental backup. For an overview see page  Incremental_Backup Prototype      \n    void backupCreate(McoSql::String* file, \n                McoSql::String* label, \n                McoSql::BackupKind kind, \n                int compressionLevel, \n                McoSql::String* ...",t:"backupCreate"},"1458":{i:0.000284165910607499,u:"../Content/Programming/C++/Classes/McoSqlEngine/backupRestore.htm",a:"Restore a database from an incremental backup. For an overview see page  Incremental_Backup Prototype      \n    void backupRestore(McoSql::String* file, \n                McoSql::String* label, \n                McoSql::String* cipherKey);\n      Arguments Description This method restores a database ...",t:"backupRestore"},"1459":{i:0.000284165910607499,u:"../Content/Programming/C++/Classes/McoSqlEngine/backupInfo.htm",a:"List the contents of a backup file. For an overview see page  Incremental_Backup Prototype      \n    void backupInfo(McoSql::String* file, \n                SyntheticTable* table, \n                Allocator* allocator);\n      Arguments Description This method lists the contents of a backup file by ...",t:"backupInfo"},"1460":{i:0.00107325772375283,u:"../Content/Programming/C++/Classes/McoSqlEngine/fileBackup.htm",a:"Perform a file backup for a persistent database. For an overview see page  File_Backup Prototype      \n    void fileBackup(char const *dbFile, char const* logFile, int nThreads = 1);\n      Arguments Description This method allows applications to copy the database and log file for a persistent ...",t:"fileBackup"},"1461":{i:0.00072883689089314,u:"../Content/Programming/C++/Classes/McoMultithreadedSqlEngine.htm",a:"The McoMultithreadedSqlEngine class is a specialized subclass of  McoSqlEngine designed for use in multithreaded applications where each thread has its own memory allocator. It instantiates a multithreaded allocator. There are no additional specialized methods; once instantiated, all of the methods ...",t:"The C++ McoMultithreadedSqlEngine Class"},"1462":{i:0.00132886724388237,u:"../Content/Programming/C++/Classes/McoSqlOpenParameters.htm",a:"The C++ McoSqlOpenParameters Class The McoSqlOpenParameters constructors, methods and properties are listed below. Note that some items have links to pages with more detailed descriptions:",t:"The C++ McoSqlOpenParameters Class"},"1463":{i:0.000215761593538308,u:"../Content/Programming/C++/Classes/MccoSqlOpenParameters/Constructor.htm",a:"Create an instance of McoSqlOpenParameters and initialize its properties from the arguments passed. For an overview see page  McoSqlOpenParameters Prototype      \n    McoSqlOpenParameters(char const* name, mco_dictionary_h dictionary, size_t size, \n                size_t pageSize = 128,\n             ...",t:"McoSqlOpenParameters: constructor with arguments"},"1464":{i:0.000252441297379725,u:"../Content/Programming/C++/Classes/MccoSqlOpenParameters/OpenFlags.htm",a:"McoSqlOpenParameters:OpenFlags  The possible values for McoSqlOpenParameters flags property. For an overview see page  McoSqlOpenParameters The OpenFlags enum defines the values listed below.",t:"McoSqlOpenParameters:OpenFlags"},"1465":{i:0.000252441297379725,u:"../Content/Programming/C++/Classes/MccoSqlOpenParameters/setDefaultValues.htm",a:" Initialize the properties of this instance of McoSqlOpenParameters with default values. For an overview see page  McoSqlOpenParameters The code snippet below shows how McoSqlOpenParameters default values are set:  \n    void McoSqlOpenParameters::setDefaultValues()\n    {\n        databaseName = ...",t:"McoSqlOpenParameters:setDefaultValues"},"1466":{i:0.000556865452538781,u:"../Content/Programming/C++/Classes/SqlOptimizerParameters.htm",a:"The SqlOptimizerParameters class provides options for tuning performance of the SQL engine. For an overview see page  C++ Classes The SqlOptimizerParameters properties are defined as follows in file /include/sql/sqlcpp.h:   \n    SqlOptimizerParameters::SqlOptimizerParameters()\n    {\n        ...",t:"The C++ SqlOptimizerParameters Class"},"1467":{i:0.000394121841348844,u:"../Content/Programming/C++/Classes/McoSqlSession.htm",a:"The McoSqlSession class is used to share a single database connection between multiple threads. For an overview see page  C++ Classes This class must be used to share a single database connection between multiple threads. Multi-threaded applications can use their own SQL engine for each connected ...",t:"The C++ McoSqlSession Class"},"1468":{i:0.000558174590988047,u:"../Content/Programming/C++/Classes/RemoteSqlEngine.htm",a:"RemoteSqlEngine provides the client interface for sending SQL requests to a server application implemented as a  SqlServer instance.  For an overview see page  C++ Classes RemoteSqlEngine  inherits all public methods from base class  SqlEngine; the principle methods  are listed in the  McoSqlEngine  ...",t:"The C++ RemoteSqlEngine Class"},"1469":{i:0.000216523269772162,u:"../Content/Programming/C++/Classes/RemoteSqlEngine/open.htm",a:"Open the SQL engine  with a list of parameters. Prototype  \n    bool open(char const* hostname, int port, \n            int maxConnectAttempts = 10, \n            bool localDomain = false, \n            void* sslParameters = NULL,\n            timer_unit connectTimeout = 2*1000, \n            timer_unit ...",t:"RemoteSqlEngine:open( parameter list )"},"1470":{i:0.000289698331608543,u:"../Content/Programming/C++/Classes/DistributedSqlEngine.htm",a:"DistributedSqlEngine provides the client interface for distributed execution of SQL queries. (Note that class  AsyncDistributedSqlEngine can be used for distributed asynchronous execution of multiple SQL queries simultaneously on database  shards .) For an overview see page  C++ Classes ...",t:"The C++ DistributedSqlEngine Class"},"1471":{i:0.000162673565171,u:"../Content/Programming/C++/Classes/DistributedSqlEngine/open.htm",a:"Open the connections with servers. Prototype  \n    bool open(char const* const* nodes, int nNodes, \n            int nReplicas = 1, \n            ReplicationType replType = SQL_REPLICATION,\n            int maxConnectAttempts = 10, \n            int* badNode = NULL, \n            bool localDomain = ...",t:"DistributedSqlEngine:open( parameter list )"},"1472":{i:0.000400145618297289,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine.htm",a:"The C++ AsyncDistributedSlqEngine Class AsyncDistributedSqlEngine provides the client interface for distributed asynchronous execution of multiple SQL queries simultaneously on database  shards . It is also possible to perform asynchronous  parallel execution of multiple SQL queries using the Python ...",t:"The C++ AsyncDistributedSqlEngine Class"},"1473":{i:0.000155645277731279,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/Constructor.htm",a:"Create an instance of AsyncDistributedSqlEngine. For an overview see page  AsyncDistributedSqlEngine This is an variant of  DistributedSqlEngine that facilitates execution of several queries at the same time. It allows starting a list of queries simultaneously and waiting for all results to arrive ...",t:"AsyncDistributedSqlEngine: constructor"},"1474":{i:0.000221794800893968,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/open.htm",a:"Start the connection pool, and synchronously connect all worker processes. Prototype  \n    bool open(char const* const* nodes, int nNodes, \n            int nReplicas = 1, \n            ReplicationType replType = SQL_REPLICATION,\n            int maxConnectAttempts = 10, \n            int* badNode = ...",t:"AsyncDistributedSqlEngine:open( parameter list )"},"1475":{i:0.000155645277731279,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/open2.htm",a:"Start the connection pool, and synchronously connect all worker processes. Prototype  \n    bool open(OpenParameters *params, int *badNode = 0);\n  Arguments Description This method opens an eXtremeDB database, an eXtremeDB SQL mapper and the AsyncDistributedSqlEngine instance with the parameters ...",t:"AsyncDistributedSqlEngine:open( OpenParameters )"},"1476":{i:0.000187782175003029,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/OpenParameters.htm",a:"The AsyncDistributedSqlEngine method open() allows arguments to be specified in the following OpenParameters structure:  \n    struct OpenParameters \n    {\n        struct NodeParams \n        {\n            const char *address;\n            void       *sslParameters;\n            NodeParams() : ...",t:"AsyncDistributedSqlEngine: OpenParameters"},"1477":{i:0.00103720260423541,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/executeMany.htm",a:"Start executing a list of queries. Prototype  \n    void executeMany(Vector\u003cString\u003e *queries, \n                Vector\u003cConnectionArgs\u003e *args, \n                Allocator *ret_allocator);\n  Arguments Description This method starts executing a list of queries. Each query string is executed by an ...",t:"AsyncDistributedSqlEngine:executeMany"},"1478":{i:0.00012163265184034,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/ConnectionArgs.htm",a:"The AsyncDistributedSqlEngine method executeMany() takes arguments for substitution into query strings. These arguments are specified in the following ConnectionArgs structure:  \n    struct ConnectionArgs\n    {\n        McoSql::Value **args;\n        size_t nargs;\n        ...",t:"AsyncDistributedSqlEngine: ConnectionArgs"},"1479":{i:0.00103720260423541,u:"../Content/Programming/C++/Classes/AsyncDistributedSqlEngine/waitMany.htm",a:"Wait on worker processes and return the vector of query results. Prototype  \n    Vector\u003cTable\u003e *waitMany();\n  Arguments Description This method waits on the worker processes and returns a vector containing the results of each query launched by  executeMany().  Returns A vector containing the results ...",t:"AsyncDistributedSqlEngine:waitMany"},"1480":{i:0.000470044077324231,u:"../Content/Programming/C++/Classes/SqlServer.htm",a:"The C++ SqlServer Class The SqlServer class executes client SQL requests. For an overview see page  C++ Classes The SqlServer methods  are described  in the table below. ",t:"The C++ SqlServer Class"},"1481":{i:0.000384249045381217,u:"../Content/Programming/C++/Classes/Transaction.htm",a:"The Transaction class provides the capability of interacting directly with a transaction performing a number of database operations.  For an overview see page  C++ Classes As explained in the  Managing eXtremeSQL Transactions in C++  page, it is possible to manage a block of database transactions by ...",t:"The C++ Transaction Class"},"1482":{i:0.00124512133648206,u:"../Content/Programming/C++/Classes/QueryResult.htm",a:"The QueryResult class is used to control the  DataSource object returned by  methods executeQuery() and  executePreparedQuery() of classes  McoSqlEngine,  RemoteSqlEngine and  McoMultithreadedSqlEngine.  For an overview see page  C++ Classes The QueryResult class inherits its principle methods from ...",t:"The C++ QueryResult Class"},"1483":{i:0.00020304512888174,u:"../Content/Programming/C++/Classes/QueryResult/records.htm",a:"Return a  Cursor over the result set  DataSource. For an overview see page  QueryResult Prototype  \n    Cursor* records( void );\n  Arguments Description Return a  Cursor over the result set  DataSource. Returns An iterator over the vector of Fields or throws a RuntimeException in the case of an ...",t:"QueryResult:records()"},"1484":{i:0.00020304512888174,u:"../Content/Programming/C++/Classes/QueryResult/fields.htm",a:"Create an iterator for all Fields (columns) in the  DataSource. For an overview see page  QueryResult Prototype  \n    Iterator \u003cField\u003e* fields( void );\n  Arguments Description Create an iterator for all Fields (columns) in the  DataSource. Returns An iterator over the vector of Fields or throws a ...",t:"QueryResult:fields()"},"1485":{i:0.00020304512888174,u:"../Content/Programming/C++/Classes/QueryResult/extract.htm",a:"Extract Record components to the corresponding C struct. For an overview see page  QueryResult Prototype  \n    void extract( Record* rec, void* dst, size_t size, \n            bool nullIndicators[] = NULL, \n            ExtractMode mode = emReferenceToBody);\n  Arguments Description This method ...",t:"QueryResult:extract()"},"1486":{i:0.000597692344421897,u:"../Content/Programming/C++/Classes/DataSource.htm",a:"The abstract class DataSource cannot be instantiated directly but is instead instantiated though one of its related classes; typically via a  QueryResult object returned by methods executeQuery() and executePreparedQuery() of classes  McoSqlEngine,  RemoteSqlEngine and  McoMultithreadedSqlEngine.  ...",t:"The C++ DataSource Class"},"1487":{i:0.00048251281263326,u:"../Content/Programming/C++/Classes/Cursor.htm",a:"The Cursor class provides an iterator object for scrolling through the individual rows of a result set in a QueryResult.  For an overview see page  C++ Classes Normally a Cursor is instantiated by calling  QueryResult method records(), then each row of the result set is accessed as a Record instance ...",t:"The C++ Cursor Class"},"1488":{i:0.000310159776472795,u:"../Content/Programming/C++/Classes/Table.htm",a:"The Table class provides access to the tables in an eXtremeDB database as well as temporary tables.  For an overview see page  C++ Classes The result set of a SQL query is returned as a temporary Table which is a subclass of the abstract class  DataSource and, because the result set  QueryResult ...",t:"The C++ Table Class"},"1489":{i:0.000703075279473139,u:"../Content/Programming/C++/Classes/Record.htm",a:"The C++ Record Class The Record class inherits from  Struct and  Value which implement many of its methods. For an overview see page  C++ Classes The Record methods are listed below.",t:"The C++ Record Class"},"1490":{i:0.00040757712372561,u:"../Content/Programming/C++/Classes/Field.htm",a:"The C++ Field Class The Field class represents a field in a database record (object or instance of a database class). For an overview see page  C++ Classes The Field methods are listed below.",t:"The C++ Field Class"},"1491":{i:0.000792723957054442,u:"../Content/Programming/C++/Classes/String.htm",a:"The C++ String Class The String class is provided for handling character stings.  For an overview see page  C++ Classes Note that String inherits from  List which implements methods common to  Arrays and Strings. The String methods are listed below.",t:"The C++ String Class"},"1492":{i:0.000668319540704901,u:"../Content/Programming/C++/Classes/Struct.htm",a:"The C++ Struct Class The Struct class is provided for handling compound structure  Values.  For an overview see page  C++ Classes Note that Struct inherits from Value which implements many of its methods. The following table describes methods specialized for the Struct subclass:",t:"The C++ Struct Class"},"1493":{i:0.00112918766113161,u:"../Content/Programming/C++/Classes/Array.htm",a:"The C++ Array Class The Array class is provided for handling arrays of  Values.  For an overview see page  C++ Classes Note that Array inherits from  List which implements methods common to Arrays and  Strings. The Array methods are listed below.",t:"The C++ Array Class"},"1494":{i:0.000604272737222629,u:"../Content/Programming/C++/Classes/NullableArray.htm",a:"NullableArray overrides the  Array methods allowing for null values in the array. For an overview see page  C++ Classes NullableArray  overrides all public methods of base class  Arrayusing the nullBitmap to determine which array elements have null values. The nullBitmap is an array of unsigned 64 ...",t:"The C++ NullableArray Class"},"1495":{i:0.000792723957054442,u:"../Content/Programming/C++/Classes/List.htm",a:"The C++ List Class The List class is inherits all of the methods from its base-class  Value and implements specialized method common to  Strings and  Arrays.  For an overview see page  C++ Classes The List methods are listed below.",t:"The C++ List Class"},"1496":{i:0.00032616464668421,u:"../Content/Programming/C++/Classes/Index.htm",a:"The C++ Index Class The Index class represents a database table index. For an overview see page  C++ Classes The Index methods are listed below.",t:"The C++ Index Class"},"1497":{i:0.000362170087913821,u:"../Content/Programming/C++/Classes/Key.htm",a:"The C++ Key Class The Key class represents a component in an  Index. For an overview see page  C++ Classes The Key methods are listed below.",t:"The C++ Key Class"},"1498":{i:0.000320351278453748,u:"../Content/Programming/C++/Classes/Sequence.htm",a:"The Sequence class is used  for managing database fields of type  sequence .  For an overview see page  C++ Classes As explained in page  Using Sequences in C++ , a C++ Sequence instance is essentially an iterator over the vector of  sequence  values. When using a  Sequence instance it is important ...",t:"The C++ Sequence Class"},"1499":{i:0.00147353885826535,u:"../Content/Programming/C++/Classes/Value.htm",a:"The Value class is a generic base class that implements methods common to several subclasses. For an overview see page  C++ Classes The classes  List,  Array,  String,  Struct and  Record inherit from Value and implement (and in some cases override) methods  particular to these specialized ...",t:"The C++ Value Class"},"1500":{i:0.000185788221164396,u:"../Content/Programming/Csharp_API.htm",a:"The eXtremeDB C# API (provided only in Windows packages) consists of a set of wrapper classes that encapsulate the low-level C functions which make up the eXtremeDB  runtime. The usage of these classes is demonstrated in the  C# SDK Samples . For developers new to eXtremeDB, we recommend the Quick ...",t:"C# API"},"1501":{i:0.000147952789786514,u:"../Content/Programming/Csharp/Runtime_Libraries.htm",a:"The core eXtremeDB runtime functionality is encapsulated in the extremedb4net.dll library which is loaded dynamically at application startup. Then the following Database.Mode values can be set to dynamically load the associated library when a Database object is instantiated: (Please see SDK Sample  ...",t:"C# Runtime Libraries"},"1502":{i:0.00190893573210597,u:"../Content/Programming/Csharp/Csharp_Samples.htm",a:"The C# sample applications are provided only in Windows packages. The build procedure for the  C# samples  are described in the \"Getting Started\" section.  By default, all sample executables are built in the eXtremeDB/target/bin directory so, after building the sample(s), it is convenient to cd to ...",t:"Programming Examples in C#"},"1503":{i:0.000392068136545477,u:"../Content/Programming/Csharp/SDK_Samples/Csharp_Core_Samples.htm",a:"C# Core  samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"C# Core  samples"},"1504":{i:0.000884597385703925,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/async_native.htm",a:"This sample demonstrates asynchronous events with a shared memory database together with sample  AsyncManaged . How to Run In a console window run:  \n    AsyncManaged\n      Then in a second console window run:  \n    async_native\n  Now in the AsyncManaged console press Enter to start listener threads ...",t:"async_native"},"1505":{i:0.000190805927379397,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/AsyncDelegate.htm",a:"AsyncDelegate This sample demonstrates how to setup async event handlers as C# Delegates. How to Run In a console window run:  \n    AsyncDelegate\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"AsyncDelegate"},"1506":{i:0.000190805927379397,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/AsyncEvent.htm",a:"AsyncEvent This sample demonstrates how to setup async events as standard Threads. How to Run In a console window run:  \n    AsyncEvent\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"AsyncEvent"},"1507":{i:0.000884597385703925,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/AsyncManaged.htm",a:"This sample demonstrates asynchronous events with a shared memory database together with sample  async_native . How to Run In a console window run:  \n    AsyncManaged\n      Then in a second console window run:  \n    async_native\n  But it is more instructive to run one instance in your development ...",t:"AsyncManaged"},"1508":{i:0.000132741357000683,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/BTree.htm",a:"BTree This sample demonstrates search operations with a tree index. How to Run In a console window run:  \n    BTree\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"BTree"},"1509":{i:0.000132741357000683,u:"../Content/Programming/Csharp/SDK_Samples/Core_Samples/Compound.htm",a:"Compound This sample demonstrates definition and usage of compound (multifield) indexes. How to Run In a console window run:  \n    Compound\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Compound"},});