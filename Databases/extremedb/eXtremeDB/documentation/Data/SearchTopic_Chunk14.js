define({"961":{i:0.000162238887305514,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_collate_get.htm",a:"Return a value from the specified collation. Prototype  \n    MCO_RET mco_uda_collate_get(\t/*IN*/ const mco_collate_h c, \n                     /*OUT*/ mco_uda_value_t *val );\n  Arguments Description This function returns a value from the  mco_collate_h struct. It is used within collation compare and ...",t:"mco_uda_collate_get"},"962":{i:0.000162238887305514,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_collate_get_range.htm",a:"Return a string value from the specified collation. Prototype  \n    MCO_RET mco_uda_collate_get_range(\t/*IN*/ const mco_collate_h c, \n                        /*IN*/ uint2 from,\n                        /*OUT*/ mco_uda_value_t *val );\n  Arguments Description This function returns a string value from ...",t:"mco_uda_collate_get_range"},"963":{i:0.000162078215999153,u:"../Content/Programming/C/Transaction_Logging.htm",a:"Transaction Logging API Please use the links below to view Reference Guide pages for the eXtremeDB Transaction Logging API functions: ",t:"Transaction Logging API"},"964":{i:0.000398594570381778,u:"../Content/Programming/C/TL_Functions/apply.htm",a:"This function reads a specified log file up to the specified label and applies its content to the database. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_apply (\tmco_db_h db, \n                    char const *file_path,\n                     int label_id )\n  Arguments ...",t:"mco_translog_apply"},"965":{i:0.000235270793283582,u:"../Content/Programming/C/TL_Functions/flush.htm",a:"This function flushes the file system buffers of a log file. It has no purpose if the  MCO_TRANSLOG_SYNC_INSTANTLY flag is used. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_flush(\tmco_db_h db )\n  Arguments Description This function flushes the file system buffers ...",t:"mco_translog_flush"},"966":{i:0.00024888797657599,u:"../Content/Programming/C/TL_Functions/get_info.htm",a:"This function obtains information about the currently running TL runtime. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_get_info(\tmco_db_h db, \n                    mco_TL_current_info_h info )\n  Arguments Description This function obtains information about the ...",t:"mco_translog_get_info"},"967":{i:0.000235270793283582,u:"../Content/Programming/C/TL_Functions/init.htm",a:"This function initializes internal database runtime core pointers to provide access to service functions inside the TL library. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_init()\n  Arguments none Description This function initializes internal database runtime core ...",t:"mco_translog_init"},"968":{i:0.000846727011965662,u:"../Content/Programming/C/TL_Functions/iterate.htm",a:"This function reads a specified log file or pipe and iterates its content by user-defined callback. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_iterate (\tchar const *file_path,\n                       mco_db_h db, \n                      mco_trans_iterator_callback_t ...",t:"mco_translog_iterate"},"969":{i:0.000446866185704588,u:"../Content/Programming/C/TL_Functions/label.htm",a:"This function stores a label in the log file. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_label(\tmco_db_h db,\n                    const char* label, \n                    int * label_id )\n  Arguments Description This function stores a label in the log file.  The TL ...",t:"mco_translog_label"},"970":{i:0.000246778207444859,u:"../Content/Programming/C/TL_Functions/play.htm",a:"This function reads a specified log file or pipe and, if the log file is “compatible”, iterates its content by calling the user-defined callback and also fires registered events. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_play (\tchar const *file_path, mco_db_h db, ...",t:"mco_translog_play"},"971":{i:0.000314653865421834,u:"../Content/Programming/C/TL_Functions/play_params_init.htm",a:"This function initializes the parameters passed to  mco_translog_play_ex().  For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_play_params_init(mco_TL_play_params_h tl_play_params);\n  Arguments Description This function initializes the parameters passed to  ...",t:"mco_translog_play_params_init"},"972":{i:0.000345133350830461,u:"../Content/Programming/C/TL_Functions/play_ex.htm",a:"This function reads a specified log file or pipe and, if the log file is “compatible”, iterates its content by calling the user-defined callback and also fires registered events. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_play_ex(\tmco_TL_play_params_h ...",t:"mco_translog_play_ex"},"973":{i:0.00013024309398889,u:"../Content/Programming/C/TL_Functions/play_stop.htm",a:"This function provides the ability to stop one instance of transaction logging without affecting other instances of transaction logging (in this context a \"transaction logging instance\" refers to a thread which calls  mco_translog_play() ) . For an overview see page  TL Applications Prototype  \n    ...",t:"mco_translog_play_stop"},"974":{i:0.000348206827298967,u:"../Content/Programming/C/TL_Functions/query_info.htm",a:"This function reads a specified log file to check it for compatibility with the current database and to enumerate its labels. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_query_info (\tmco_db_h db, \n                        char const *file_path, \n                     ...",t:"mco_translog_query_info"},"975":{i:0.000553405661838385,u:"../Content/Programming/C/TL_Functions/start.htm",a:"This function begins logging transactions according to the specified options. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_start(\tmco_db_h db, \n                    char const * file_path, \n                    mco_TL_start_data_h data)\n  Arguments Description This ...",t:"mco_translog_start"},"976":{i:0.000438779125932392,u:"../Content/Programming/C/TL_Functions/stop.htm",a:"This function terminates transaction logging and closes the log file. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_stop(\tmco_db_h db )\n                      Arguments Description This function terminates transaction logging and closes the log file. Return Codes ...",t:"mco_translog_stop"},"977":{i:0.00013024309398889,u:"../Content/Programming/C/TL_Functions/terminate.htm",a:"This function terminates transaction logging when logging  MCO_TRANSLOG_PIPE was enabled and the pipe has become full. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_terminate(\tmco_db_h db )\n  Arguments Description This function should be called to terminate ...",t:"mco_translog_terminate"},"978":{i:0.000235270793283582,u:"../Content/Programming/C/TL_Functions/truncate.htm",a:"This function truncates the log file and begins logging anew.  Its effect is the same as a stop/start sequence, but is more convenient. For an overview see page  TL Applications Prototype  \n    MCO_RET\tmco_translog_truncate(\tmco_db_h db )\n  Arguments Description This function truncates the log file ...",t:"mco_translog_truncate"},"979":{i:0.000138984720996937,u:"../Content/Programming/C/High_Availability.htm",a:"High Availability API Please use the links below to view Reference Guide pages for the eXtremeDB High Availability API functions: ",t:"High Availability API"},"980":{i:0.000310803018581423,u:"../Content/Programming/C/HA_Functions/async_send_data_to_replicas.htm",a:"This function is called by the master if asynchronous replication mode is enabled to send transaction data from its buffer to replicas. For an overview see page  HA Applications Prototype  \n    mco_channel_h\tmco_HA_async_send_data_to_replicas (\tmco_db_h db )\n     \n  Arguments Description This ...",t:"mco_HA_async_send_data_to_replicas"},"981":{i:0.00307571182320511,u:"../Content/Programming/C/HA_Functions/attach_master.htm",a:"This function is called by the replica application  to request a connection to the master. For an overview see page  HA Applications Prototype  \n    MCO_RET mco_HA_attach_master(\tmco_db_h* db, \n                      const char* connection_string, \n                      const mco_HA_replica_params_t* ...",t:"mco_HA_attach_master"},"982":{i:0.00172032529199202,u:"../Content/Programming/C/HA_Functions/attach_replica.htm",a:"This function is called by the master application (primary master process for shared memory application) to wait for a connection request from a replica. For an overview see page  HA Applications Prototype  \n    mco_HA_attach_replica(\tmco_db_h db, \n                 char* masterport, \n                ...",t:"mco_HA_attach_replica"},"983":{i:0.000669243637414891,u:"../Content/Programming/C/HA_Functions/cancel.htm",a:"This function instantly interrupts the replication processing. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_cancel (\tconst char* cancel_addr,\n                    timer_unit timeout)\n  Arguments Description This function is called by the replica to instantly interrupt ...",t:"mco_HA_cancel"},"984":{i:0.000140528849300836,u:"../Content/Programming/C/HA_Functions/commit_window.htm",a:"This function is called by the master to force replicas to confirm a transaction package. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_commit_window(\tmco_db_h db ) \n  Arguments Description This function is called by the master to force replicas to confirm a transaction ...",t:"mco_HA_commit_window"},"985":{i:0.000360220362592354,u:"../Content/Programming/C/HA_Functions/create_cancel_socket.htm",a:"This function explicitly creates a cancel socket that can be used in the application. For an overview see page  HA Applications Prototype  \n    MCO_RET mco_HA_create_cancel_socket (\tmco_db_h db,\n                      const char* cancelpoint_addr, \n                      /*OUT*/ SOCKET * ...",t:"mco_HA_create_cancel_socket"},"986":{i:0.000295759454680852,u:"../Content/Programming/C/HA_Functions/destroy_cancel_socket.htm",a:"This function closes an explicitly created cancel socket. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_destroy_cancel_socket (\tmco_db_h db,\n                    SOCKET * cancel_socket)\n  Arguments Description This function closes a socket previously created by  ...",t:"mco_HA_destroy_cancel_socket"},"987":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/detach_all_replicas.htm",a:"This function detaches (disconnects) all connected replicas. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_detach_all_replicas (\tmco_db_h db )\n  Arguments Description This function detaches (disconnects) all connected replicas.  On the replica side, mco_HA_attach_master() ...",t:"mco_HA_detach_all_replicas"},"988":{i:0.000286916941253411,u:"../Content/Programming/C/HA_Functions/detach_replica.htm",a:"This function detaches (disconnects) the replica identified by the channel pointer. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_detach_replica (\tmco_db_h db,\n                      mco_channel_h chan)\n  Arguments Description This function detaches (disconnects) the ...",t:"mco_HA_detach_replica"},"989":{i:0.000140528849300836,u:"../Content/Programming/C/HA_Functions/enable_filter.htm",a:"This function turns on/off partial replication. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_enable_filter (\tMco_db_h db,\n                    Mco_bool enable)\n      Arguments Description This function is called by either the master or replica to turn on/off partial ...",t:"mco_HA_enable_filter"},"990":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/get_channel_info.htm",a:"This function returns information about the I/O channel. For an overview see page  HA Applications Prototype  \n    mco_channel_info_t\tmco_HA_get_channel_info (\tmco_channel_h chan ); \n  Arguments Description This function is called by a replica to get information about the I/O channel. Return Codes ...",t:"mco_HA_get_channel_info"},"991":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/get_current_auto_oid.htm",a:"This function returns the current auto_oid value. For an overview see page  HA Applications Prototype  \n    MCO_RET mco_get_current_auto_oid (\tmco_trans_h t,\n                        mco_uquad* retvalue)\n  Arguments Description This function is called by the master to get the current auto_oid value. ...",t:"mco_HA_get_current_auto_oid"},"992":{i:0.000186822297295757,u:"../Content/Programming/C/HA_Functions/get_io_channel.htm",a:"This function returns a pointer to the communication channel of the replica referenced by the master database handle and the index of the replica. For an overview see page  HA Applications Prototype  \n    mco_channel_h\tmco_HA_get_io_channel(\tmco_db_h db, int2 index )\n  Arguments Description This ...",t:"mco_HA_get_io_channel"},"993":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/get_ip_addr.htm",a:"This function returns information about the transport layer. For an overview see page  HA Applications Prototype  \n    uint4\tmco_HA_get_ip_addr(\tmco_channel_h chan);\n  Arguments Description This function returns the IP address associated with the specified I/O channel. Return Codes",t:"mco_HA_get_ip_addr"},"994":{i:0.000205251791794504,u:"../Content/Programming/C/HA_Functions/get_number_of_replicas.htm",a:"This function returns the current number of replicas attached to the master. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_get_number_of_replicas(\tmco_db_h db )\n  Arguments Description This function is called by the master to get the count of replicas currently attached.",t:"mco_HA_get_number_of_replicas"},"995":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/get_port.htm",a:"This function returns the port associated with the specified I/O channel. For an overview see page  HA Applications Prototype  \n    uint4\tmco_HA_get_port(\tmco_channel_h chan);\n  Arguments Description This function returns the port associated with the specified I/O channel. Return Codes",t:"mco_HA_get_port"},"996":{i:0.000125851845027094,u:"../Content/Programming/C/HA_Functions/get_mode.htm",a:"This function returns the  MCO_HAMODE_*  value specified for this database. For an overview see page  HA Applications Prototype  \n    uint4\tmco_HA_get_mode(\tmco_db_h db);\n  Arguments Description This function returns the mode specified in the  mco_HA_master_params_tor the  mco_HA_replica_params_t ...",t:"mco_HA_get_mode"},"997":{i:0.000208944532067278,u:"../Content/Programming/C/HA_Functions/get_sequencer.htm",a:"This function returns the number of the \"db version\" (or \"current-ness\" in the sense of HA). For an overview see page  HA Applications Prototype  \n    MCO_RET mco_HA_get_sequencer (\tmco_db_h db,\n                        uint8 * seq)\n  Arguments Description Sometimes it may be necessary to determine ...",t:"mco_HA_get_sequencer"},"998":{i:0.000757943541145043,u:"../Content/Programming/C/HA_Functions/keep_alive.htm",a:"This function is used by the master in order to send the \"KEEP_ALIVE\" signal to replicas. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_keep_alive (\tmco_db_h db, \n                    timer_unit timeout)\n  Arguments Description This function is used by the master in order ...",t:"mco_HA_keep_alive"},"999":{i:0.000279360019597589,u:"../Content/Programming/C/HA_Functions/master_params_init.htm",a:"This function is called by the master (and a replica becoming master) to initialize the master HA runtime parameters to default values. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_master_params_init(\tmco_HA_master_params_t* params )\n  Arguments Description This function is ...",t:"mco_HA_master_params_init"},"1000":{i:0.0010227581827851,u:"../Content/Programming/C/HA_Functions/replica_params_init.htm",a:"This function is called by the replica to initialize the replica HA runtime parameters to default values. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_replica_params_init(\tmco_HA_replica_params_t* params )\n  Arguments Description This function is called by a replica  to ...",t:"mco_HA_replica_params_init"},"1001":{i:0.000499336027761133,u:"../Content/Programming/C/HA_Functions/replica_stop.htm",a:"This function causes a local asynchronous stop request to be sent from the standby application. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_replica_stop (\tmco_db_h db)\n  Arguments Description This function causes a local asynchronous stop request to be sent from the ...",t:"mco_HA_replica_stop"},"1002":{i:0.0018670307602783,u:"../Content/Programming/C/HA_Functions/set_master_params.htm",a:"This function is called by the master (and a replica becoming master) to set the master HA runtime parameters. For an overview see page  HA Applications Prototype  \n    void\tmco_HA_set_master_params(\tmco_db_h db, \n                      mco_HA_master_params_t* params )\n  Arguments Description This ...",t:"mco_HA_set_master_params"},"1003":{i:0.000222242599432094,u:"../Content/Programming/C/HA_Functions/set_trans_window_size.htm",a:"This function is called by the master to set the transaction packet size.   For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_set_trans_window_size(\tmco_trans_h  t, \n                         uint4 window_size)\n  Arguments Description This function is called by the master to ...",t:"mco_HA_set_trans_window_size"},"1004":{i:0.000636076520335565,u:"../Content/Programming/C/HA_Functions/start.htm",a:"This function is called on the master and replica sides before database creation/connection to initialize the HA subsystem. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_start ()\n  Arguments Description This function initializes the HA subsystem. It must be called on the ...",t:"mco_HA_start"},"1005":{i:0.000338911837193903,u:"../Content/Programming/C/HA_Functions/stop.htm",a:"This function shutdowns the HA subsystem. For an overview see page  HA Applications Prototype  \n    MCO_RET\tmco_HA_stop (\tmco_db_h db)\n  Arguments Description This function shuts down the HA subsystem.  On the master side, it detaches all replicas and stops blocking functions  ...",t:"mco_HA_stop"},"1006":{i:0.00046237061774498,u:"../Content/Programming/C/HA_Functions/trans_commit_synch.htm",a:"This function can be called by a separate thread of the primary master process in order to implement synchronization of committed transactions completed by other (secondary) masters attached to a shared memory database. For an overview see page  HA Applications Prototype  \n    ...",t:"mco_HA_trans_commit_synch"},"1007":{i:0.000138984720996937,u:"../Content/Programming/C/Cluster_Functions.htm",a:"Cluster API The  Cluster Applications in C/C++  page describes the general principles of Cluster application design and implementation. Please use the links below to view Reference Guide pages for the eXtremeDB Cluster API functions: ",t:"Cluster API"},"1008":{i:0.000302360839547377,u:"../Content/Programming/C/Cluster_Functions/attach.htm",a:"This function re-connects to the cluster after a previous  cluster_stop() or  cluster_detach(). For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_attach(\t/*IN*/ mco_db_h db, \n                    /*IN*/ mco_cluster_params_t * cl_params)\n  Arguments Description ...",t:"mco_cluster_attach"},"1009":{i:0.000129016239917159,u:"../Content/Programming/C/Cluster_Functions/barrier.htm",a:"This function is called to synchronize cluster nodes. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_barrier(\t/*IN*/ mco_db_h db )\n  Arguments Description This function blocks the caller until all cluster members have called it; the call returns at any node ...",t:"mco_cluster_barrier"},"1010":{i:0.00172456026047425,u:"../Content/Programming/C/Cluster_Functions/db_open.htm",a:"This function creates the cluster database and connects to other cluster nodes. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET mco_cluster_db_open(\t/*IN*/ const char * dbname, \n                     /*IN*/ mco_dictionary_h dict, \n                     /*IN*/ mco_device_t * ...",t:"mco_cluster_db_open"},"1011":{i:0.000330669055751957,u:"../Content/Programming/C/Cluster_Functions/detach.htm",a:"This function allows the application to disconnect the node from the working cluster, without waiting for other nodes to complete their work. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_detach (\t/*IN*/ mco_db_h db)\n  Arguments Description This function ...",t:"mco_cluster_detach"},"1012":{i:0.000279267344545161,u:"../Content/Programming/C/Cluster_Functions/discover.htm",a:"This function allows an application to get information about a working cluster. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET mco_cluster_discover( /*IN*/ const char * conn_string,\n                      /*IN*/ timer_unit timeout, \n                     /*OUT*/ ...",t:"mco_cluster_discover"},"1013":{i:0.00012163265184034,u:"../Content/Programming/C/Cluster_Functions/discover_ex.htm",a:"This function allows an application to get information about a working cluster. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET mco_cluster_discover_ex( /*IN*/ const char * conn_string,\n                     /*IN*/ timer_unit timeout, \n                     /*OUT*/ ...",t:"mco_cluster_discover_ex"},"1014":{i:0.000279267344545161,u:"../Content/Programming/C/Cluster_Functions/gather.htm",a:"This function gathers updates of “distributed” objects on other network nodes. For an overview see page  Cluster Applications in C Prototype      \n    MCO_RET\tmco_cluster_gather (\t/*IN*/ mco_db_h db, \n                     uint2 * class_codes, \n                     uint2 n_class_codes, \n              ...",t:"mco_cluster_gather"},"1015":{i:0.000359289679661301,u:"../Content/Programming/C/Cluster_Functions/get_active_nodes.htm",a:"This function returns information about the active nodes in a cluster. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_get_active_nodes ( /*IN*/ mco_db_h db, \n                          /*OUT*/ mco_cluster_node_info_t* nodes_info ,\n                           ...",t:"mco_cluster_get_active_nodes"},"1016":{i:0.000152109734919376,u:"../Content/Programming/C/Cluster_Functions/get_window_params.htm",a:"This function gets the current transaction window parameters. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_get_window_params (\t/*IN*/ mco_db_h db,\n                           /*OUT*/ mco_cluster_window_t* window_params ) \n  Arguments Description This ...",t:"mco_cluster_get_window_params"},"1017":{i:0.000381066797104597,u:"../Content/Programming/C/Cluster_Functions/info.htm",a:"This function returns statistics that are maintained for network and cluster levels. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_info (\t/*IN*/ mco_db_h db,\n                   /*OUT*/ mco_cluster_info_t* cl_info )\n  Arguments Description This function ...",t:"mco_cluster_info"},"1018":{i:0.000164340497512747,u:"../Content/Programming/C/Cluster_Functions/init.htm",a:"This function is called after  mco_runtime_start() but before  mco_cluster_db_open()  to initialize the Cluster runtime. For an overview see page  Cluster Applications in C Prototype  \n    void mco_cluster_init()\n  Arguments Description This function initializes internal database runtime core ...",t:"mco_cluster_init"},"1019":{i:0.000167355231743925,u:"../Content/Programming/C/Cluster_Functions/listen.htm",a:"This is the main function implementing cluster functionality. It is a blocking function, so it should be called in a separate thread. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_listen (\t/*IN*/ mco_db_h db )\n  Arguments Description This function receives ...",t:"mco_cluster_listen"},"1020":{i:0.000152109734919376,u:"../Content/Programming/C/Cluster_Functions/params_init.htm",a:"This function must be called prior to mco_cluster_db_open() to initialize Cluster parameters. For an overview see page  Cluster Applications in C Prototype  \n    void mco_cluster_params_init(\t/*OUT*/ mco_cluster_params_t* params )\n  Arguments Description This function sets default cluster parameters ...",t:"mco_cluster_params_init"},"1021":{i:0.000279267344545161,u:"../Content/Programming/C/Cluster_Functions/scatter.htm",a:"This function sends updated “distributed” objects to the specific distributed classes on other network nodes. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_scatter(\t/*IN*/ mco_db_h db, \n                     uint2 * class_codes, \n                     uint2 ...",t:"mco_cluster_scatter"},"1022":{i:0.000152109734919376,u:"../Content/Programming/C/Cluster_Functions/set_window_params.htm",a:"This function sets the current transaction window parameters. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_set_window_params (\t/*IN*/ mco_db_h db,\n                           /*IN*/ mco_cluster_window_t* window_params )\n                            Arguments ...",t:"mco_cluster_set_window_params"},"1023":{i:0.000180417951123955,u:"../Content/Programming/C/Cluster_Functions/stop.htm",a:"This function is called on all nodes to stop the cluster. For an overview see page  Cluster Applications in C Prototype  \n    MCO_RET\tmco_cluster_stop (\t/*IN*/ mco_db_h db )\n                        Arguments Description This function stops the cluster subsystem. This operation is distributed; all ...",t:"mco_cluster_stop"},"1024":{i:0.00012163265184034,u:"../Content/Programming/C/ADR_Functions.htm",a:"The  Active Replication Fabric Applications in C  page describes the general principles of eXtremeDB Active Replication Fabric application design and implementation. Please use the links below to view Reference Guide pages for the eXtremeDB Active Replication Fabric API functions: ",t:"Active Replication Fabric API"},"1025":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/init.htm",a:"Initialize the ARF (IoT) runtime.  For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_init();\n  Arguments Description This function  initializes the ARF (IoT) runtime. It must be called in each process prior to creating and connecting to the database. (Note that this ...",t:"mco_iot_init"},"1026":{i:0.000372143957542125,u:"../Content/Programming/C/ADR_Functions/comm_params_init.htm",a:"Set the default values for the communicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_params_init( mco_iot_comm_params_t * params );\n  Arguments Description This function  sets the default values for the communicator. It must be called prior to  ...",t:"mco_iot_comm_params_init"},"1027":{i:0.000570902155445758,u:"../Content/Programming/C/ADR_Functions/comm_create.htm",a:"Create a communicator object. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_create(/*IN*/mco_iot_comm_params_t *params, /*OUT*/ mco_iot_comm_h *comm);\n  Arguments Description This function  creates a communicator object and returns the handle in comm. Return ...",t:"mco_iot_comm_create"},"1028":{i:0.00015999773478807,u:"../Content/Programming/C/ADR_Functions/comm_register_callback.htm",a:"Register a callback function. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_register_callback(mco_iot_comm_h comm, \n                            iot_comm_callback_t *callback, \n                            void *context);\n  Arguments Description This function  ...",t:"mco_iot_comm_register_callback"},"1029":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/comm_unregister_callback.htm",a:"Delete the callback function from the specified context. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_unregister_callback(mco_iot_comm_h comm, \n                            void *context);\n  Arguments Description This function  deletes the callback structure  ...",t:"mco_iot_comm_unregister_callback"},"1030":{i:0.000177659863585864,u:"../Content/Programming/C/ADR_Functions/comm_listen.htm",a:"Create a socket and start listening on the specified IP address. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_listen(mco_iot_comm_h comm, \n                    const char *address, \n                    mco_sock_params_t *params);\n  Arguments Description This ...",t:"mco_iot_comm_listen"},"1031":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/comm_stop_listen.htm",a:"Close the listen socket on the specified IP address. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_stop_listen(mco_iot_comm_h comm, \n                         const char *address);\n  Arguments Description This function  closes the listen socket. The address ...",t:"mco_iot_comm_stop_listen"},});