define({"694":{i:0.000613153752353013,u:"../Content/Programming/C/Core_Functions/Static/Disk_Manager/save_cache.htm",a:"Save the cache to persistent media. Prototype  \n    MCO_RET\tmco_disk_save_cache(\t/*IN*/ mco_db_h db, /*IN*/ char const* file_path );\n  Arguments Description This function saves the Disk Manager cache to persistent media. Return Codes Example  \n    Application snippet:\n        \n     \n    const char * ...",t:"mco_disk_save_cache"},"695":{i:0.000613153752353013,u:"../Content/Programming/C/Core_Functions/Static/Disk_Manager/load_cache.htm",a:"Load the previously saved state of the disk manager cache. Prototype  \n    MCO_RET\tmco_disk_load_cache(\t/*IN*/ mco_db_h db, /*IN*/ char const* file_path );\n  Arguments Description This function loads the previously saved state of the Disk Manager cache from persistent media. Return Codes Example  \n  ...",t:"mco_disk_load_cache"},"696":{i:0.000518428445444256,u:"../Content/Programming/C/Core_Functions/Static/Disk_Manager/vacuum.htm",a:"Explicitly remove the unused versions made by the  MVCC  transaction manager. Prototype  \n    MCO_RET\tmco_disk_database_vacuum(\t/*IN*/ mco_db_h db );\n  Arguments Description When the  MVCC  transaction manager is used, in the case of a system crash, a persistent database can contain undeleted old ...",t:"mco_disk_database_vacuum"},"697":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control.htm",a:"Transaction_Control All access to data stored in a database is done within a transaction. These functions are used to manage database transactions. ",t:"Transaction_Control"},"698":{i:0.00686344891481444,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/start.htm",a:"Start a database transaction. Prototype  \n    MCO_RET\tmco_trans_start(\t/*IN*/ mco_db_h db, \n                  /*IN*/ MCO_TRANS_TYPE trans_type,\n                  /*IN*/ MCO_TRANS_PRIORITY priority,\n                  /*OUT*/ mco_trans_h * t );\n  Arguments Description This function initiates a ...",t:"mco_trans_start"},"699":{i:0.000163936411461454,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/start_ex.htm",a:"Connect to a database with an Isolation Level. Prototype  \n    MCO_RET\tmco_trans_start_ex(\t/*IN*/ mco_db_h db, \n                    /*IN*/ MCO_TRANS_TYPE trans_type,\n                    /*IN*/ MCO_TRANS_PRIORITY priority, \n                    /*IN*/ MCO_TRANS_ISOLATION_LEVEL level,\n                  ...",t:"mco_trans_start_ex"},"700":{i:0.00413691091456115,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/upgrade.htm",a:"Upgrade to a READ_WRITE transaction. Prototype  \n    MCO_RET\tmco_trans_upgrade(\t/*INOUT*/ mco_trans_h t );\n  Arguments Description This function upgrades a MCO_READ_ONLY or MCO_UPDATE transaction to MCO_READ_WRITE. Return Codes Example  \n    Application snippet:\n        \n     \n    const char * ...",t:"mco_trans_upgrade"},"701":{i:0.0002835499135718,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/checkpoint.htm",a:"Checkpoint a transaction. Prototype  \n    MCO_RET\tmco_trans_checkpoint(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function inserts updated objects into indexes. It behaves differently depending on the transaction manager in use. With the pessimistic transaction manager,  MURSIW, updated ...",t:"mco_trans_checkpoint"},"702":{i:0.00179258091944785,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/commit.htm",a:"Commit a transaction. Prototype  \n    MCO_RET\tmco_trans_commit(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function completes a transaction, committing any changes to the database. Any object handles scoped to the transaction become invalid. However, calling mco_trans_commit() when the ...",t:"mco_trans_commit"},"703":{i:0.000219366001736995,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/commit_phase1.htm",a:"Commit phase 1 of a two-phase transaction. Prototype  \n    MCO_RET\tmco_trans_commit_phase1(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function “pre-commits” a transaction, writing the data into the database, updating indexes and checking index restrictions (uniqueness). Control is ...",t:"mco_trans_commit_phase1"},"704":{i:0.00032621442276585,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/commit_phase2.htm",a:"Commit phase 2 of a two-phase transaction. Prototype  \n    MCO_RET\tmco_trans_commit_phase2(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function finalizes a transaction, discarding the rollback buffer and invalidating the transaction handle. Any object handles scoped to the transaction ...",t:"mco_trans_commit_phase2"},"705":{i:0.000247377811257077,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/iterate.htm",a:"Iterate over all modifications made by a transaction. Prototype  \n    MCO_RET\tmco_trans_iterate(\t/*IN*/ mco_trans_h t, \n                    /*IN*/ mco_trans_iterator_callback_t callback, \n                    /*IN*/ void* user_ctx);\n  Arguments Description This function provides the ability to ...",t:"mco_trans_iterate"},"706":{i:0.000127258242756012,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/trans_no.htm",a:"Retrieve the “counter” number which uniquely identifies a transaction. Prototype  \n    MCO_RET\tmco_trans_no(\t/*IN*/ mco_trans_h t, /*OUT*/ mco_trans_counter * no );\n  Arguments Description This function is used by  mco_translog_iterate() callback functions (part of the eXtremeDB Transaction Logging  ...",t:"mco_trans_no"},"707":{i:0.000127258242756012,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/disk_confirm_transaction.htm",a:"Recover and commit a database transaction left in an “incomplete” state. Prototype  \n    MCO_RET\tmco_disk_confirm_transaction(\t/*IN*/ char const* log_file_path,\n                          /*IN*/ MCO_LOG_TYPE log_type);\n  Arguments Description This function recovers and commits a database transaction ...",t:"mco_disk_confirm_transaction"},"708":{i:0.000127258242756012,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/disk_reject_transaction.htm",a:"Commit a transaction. Prototype  \n    MCO_RET\tmco_disk_reject_transaction(\t/*IN*/ char const* log_file_path,\n                         /*IN*/ MCO_LOG_TYPE log_type);\n  Arguments Description This function rejects (rolls back) a database transaction left in an “incomplete” state. It is used to process ...",t:"mco_disk_reject_transaction"},"709":{i:0.000333693729559068,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/rollback.htm",a:"Abort a transaction. Prototype  \n    MCO_RET\tmco_trans_rollback(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function aborts a transaction. Any changes to the database are discarded. Any object handles scoped to the transaction become invalid. Return Codes Example  \n    Application ...",t:"mco_trans_rollback"},"710":{i:0.000163936411461454,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/trans_type.htm",a:"Return the type of a transaction referenced by the handle. Prototype  \n    MCO_RET\tmco_trans_type(\t/*IN*/ mco_trans_h t, /*OUT*/ MCO_TRANS_TYPE * type );\n  Arguments Description This function returns the type of a transaction referenced by the handle. Upon successful return, type will be one of ...",t:"mco_trans_type"},"711":{i:0.000163936411461454,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/get_supported_isolation_levels.htm",a:"Get the isolation levels supported by the current  Transaction Manager . Prototype  \n    int mco_trans_get_supported_isolation_levels( void );\n  Arguments Description This function returns a mask indicating the  isolation levels  supported by the current  Transaction Manager . Return Codes Example ...",t:"mco_trans_get_supported_isolation_levels"},"712":{i:0.000163936411461454,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/isolation_level.htm",a:" Return  the current  isolation level  for the connection. Prototype  \n    MCO_RET mco_trans_isolation_level(mco_trans_h t, MCO_TRANS_ISOLATION_LEVEL* isolation_level);\n  Arguments Description This function returns  the current  isolation level  for the connection. Return Codes Example  \n    ...",t:"mco_trans_isolation_level"},"713":{i:0.000191805799115235,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/set_default_isolation_level.htm",a:"Set the default isolation level for the current connection. Prototype  \n    MCO_TRANS_ISOLATION_LEVEL mco_trans_set_default_isolation_level( /*IN*/ mco_db_h db,\n                                          /*IN*/ MCO_TRANS_ISOLATION_LEVEL level );\n  Arguments Description This function sets the default  ...",t:"mco_trans_set_default_isolation_level"},"714":{i:0.000127258242756012,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/set_unused_versions_limit.htm",a:"Set the maximum number of “unused versions” retained by the  MVCC Transaction Manager . Prototype  \n    int mco_trans_set_unused_versions_limit( /*IN*/ mco_db_h db,\n                            /*IN*/ int max_unused_versions );\n  Arguments Description This function sets the maximum number of “unused ...",t:"mco_trans_set_unused_versions_limit"},"715":{i:0.000127258242756012,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/set_cleanup_period.htm",a:"Control how often the  MVCC Transaction Manager  removes unused versions. Prototype  \n    int mco_trans_set_cleanup_period( /*IN*/ mco_db_h db,\n                        /*IN*/ int cleanup_period, \n                        /*IN*/ mco_bool per_connection_cleanup);\n  Arguments Description This function ...",t:"mco_trans_set_cleanup_period"},"716":{i:0.000163936411461454,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/optimistic_threshold.htm",a:"Control the  MVCC Transaction Manager  behavior with respect to the number of conflicts. Prototype  \n    void mco_trans_optimistic_threshold( /*IN*/ mco_db_h db,\n                         /*IN*/ int max_conflicts_percent,\n                         /*IN*/ int disable_period );\n  Arguments Description ...",t:"mco_trans_optimistic_threshold"},"717":{i:0.00143036011443366,u:"../Content/Programming/C/Core_Functions/Static/Transaction_Control/set_gc_policy.htm",a:"Set the garbage collection policy for the current connection. Prototype  \n    MCO_GC_POLICY mco_trans_set_gc_policy( /*IN*/ mco_db_h db,\n                         /*IN*/ MCO_GC_POLICY new_policy );\n  Arguments Description This function sets the garbage collection policy for the given session ...",t:"mco_trans_set_gc_policy"},"718":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Error_Handling.htm",a:"Error Handling These functions are used to manage error conditions. ",t:"Error Handling"},"719":{i:0.000260878984832196,u:"../Content/Programming/C/Core_Functions/Static/Error_Handling/set_handler.htm",a:"Register a fatal error handler. Prototype  \n    void\tmco_error_set_handler(\t/*IN*/ mco_error_handler_f func);\n  Arguments Description This function registers an application function to handle fatal error conditions. It is called from the runtime\u0027s function mco_stop(), which is called whenever an ...",t:"mco_error_set_handler"},"720":{i:0.000161011788250043,u:"../Content/Programming/C/Core_Functions/Static/Error_Handling/set_handler_ex.htm",a:"Register an extended fatal error handler. Prototype  \n    void\tmco_error_set_handler_ex(\t/*IN*/ mco_error_handler_f_ex func);\n  Arguments Description Set the extended fatal error handler that accepts __FILE and __LINE parameters.  Return Codes Example  \n    Application snippet:\n        \n     \n    ...",t:"mco_error_set_handler_ex"},"721":{i:0.000197689956955486,u:"../Content/Programming/C/Core_Functions/Static/Error_Handling/get_last_error.htm",a:"Return the last return code from an eXtremeDB function that caused a transaction to enter an error state. Prototype  \n    MCO_RET\tmco_get_last_error(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function returns the value of the last return code from an eXtremeDB function that caused a ...",t:"mco_get_last_error"},"722":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control.htm",a:"Cursor Control The following functions are used to manage cursors. ",t:"Cursor Control"},"723":{i:0.000395071779497805,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/type.htm",a:"Return the cursor type. Prototype  \n    MCO_RET\tmco_cursor_type(\t/*IN*/ mco_cursor_h c, /*OUT*/ MCO_CURSOR_TYPE * type);\n  Arguments Description This function determines the validity of a cursor handle and returns the  cursor type  if the handle is valid. Return Codes Example  \n    Application ...",t:"mco_cursor_type"},"724":{i:0.000572602387722087,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/first.htm",a:"Position the cursor to the first object in the index. Prototype  \n    MCO_RET\tmco_cursor_first(\t/*IN*/ mco_trans_h t, /*INOUT*/ mco_cursor_h c);\n  Arguments Description This function positions the cursor to the first object in the index. A list cursor will be positioned to the first object in an ...",t:"mco_cursor_first"},"725":{i:0.000572602387722087,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/last.htm",a:"Position the cursor to the last object in the index. Prototype  \n    MCO_RET\tmco_cursor_last(\t/*IN*/ mco_trans_h t, /*INOUT*/ mco_cursor_h c);\n  Arguments Description This function positions the cursor to the last object in the index. A list cursor will be positioned to the last object in an ...",t:"mco_cursor_last"},"726":{i:0.000572602387722087,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/next.htm",a:"Position the cursor to the next object in the index. Prototype  \n    MCO_RET\tmco_cursor_next(\t/*IN*/ mco_trans_h t, /*INOUT*/ mco_cursor_h c);\n  Arguments Description This function positions the cursor to the next object in the index. A list cursor will be positioned to the next object in an ...",t:"mco_cursor_next"},"727":{i:0.000572602387722087,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/prev.htm",a:"Position the cursor to the previous object in the index. Prototype  \n    MCO_RET\tmco_cursor_prev(\t/*IN*/ mco_trans_h t, /*INOUT*/ mco_cursor_h c);\n  Arguments Description This function positions the cursor to the previous object in the index. A list cursor will be positioned to the previous object ...",t:"mco_cursor_prev"},"728":{i:0.000287120573642874,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/get_class_code.htm",a:"Return the class code of the object at the current cursor position. Prototype  \n    MCO_RET\tmco_cursor_get_class_code(\t/*IN*/ mco_cursor_h c, /*OUT*/ uint2 * code);\n  Arguments Description This function returns the class code of the object at the current cursor position. Return Codes Example  \n    ...",t:"mco_cursor_get_class_code"},"729":{i:0.000134759030643574,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/check.htm",a:"Check the internal structure of the cursor. Prototype  \n    MCO_RET\tmco_cursor_check(\t/*IN*/ mco_trans_h t, /*IN*/ mco_cursor_h c);\n  Arguments Description This function checks the internal structure of the cursor. It returns MCO_S_OK if the cursor’s internal structure is valid and the index that ...",t:"mco_cursor_check"},"730":{i:0.000134759030643574,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/store.htm",a:"Store the cursor for possible use by another transaction. Prototype  \n    MCO_RET\tmco_cursor_store(\t/*IN*/ mco_trans_h t, /*IN*/ mco_cursor_h c);\n  Arguments Description This function stores the cursor so that applications using the  MVCC Transaction Manager  can pass its handle from one open ...",t:"mco_cursor_store"},"731":{i:0.000134759030643574,u:"../Content/Programming/C/Core_Functions/Static/Cursor_Control/close.htm",a:"Close the cursor. Prototype  \n    MCO_RET\tmco_cursor_close(\t/*IN*/ mco_trans_h t, /*INOUT*/ mco_cursor_h c);\n  Arguments Description This function allows applications to explicitly close a cursor. High priority transactions (those set with priority MCO_TRANS_HIGH and higher) optimize access to the ...",t:"mco_cursor_close"},"732":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Events.htm",a:"Event statements in the database schema  declare events that the application will be notified of, such as: adding a new object, deleting an object, updating an object or a specified field of an object (with the exception of array and vector fields), and checkpoint events. The  DDL compiler  ...",t:"Events"},"733":{i:0.00019829066982177,u:"../Content/Programming/C/Core_Functions/Static/Events/wait.htm",a:"Wait on a specified asynchronous event. Prototype  \n    MCO_RET\tmco_async_event_wait(\t/*IN*/ mco_db_h db, /*IN*/ in event_id);\n  Arguments Description This function blocks the thread until the event referenced by event_id occurs or the application explicitly releases the event handler. Return Codes ...",t:"mco_async_event_wait"},"734":{i:0.000136399827993978,u:"../Content/Programming/C/Core_Functions/Static/Events/release.htm",a:"Unblock all the threads that are waiting on the specified event. Prototype  \n    MCO_RET\tmco_async_event_release(\t/*IN*/ mco_db_h db, /*IN*/ in event_id);\n  Arguments Description This function unblocks all the threads that are waiting on the event referenced by event_id. Return Codes Example  \n    ...",t:"mco_async_event_release"},"735":{i:0.000191826269438721,u:"../Content/Programming/C/Core_Functions/Static/Events/release_all.htm",a:"Unblock all the threads that are waiting on all events for the specified database. Prototype  \n    MCO_RET\tmco_async_event_release_all(\t/*IN*/ mco_db_h db );\n  Arguments Description This function unblocks all the threads that are waiting on all events for the specified database. Return Codes Example ...",t:"mco_async_event_release_all"},"736":{i:0.000203621486534007,u:"../Content/Programming/C/Core_Functions/Static/XML.htm",a:"XML The following functions are used to manage XML import and export. ",t:"XML"},"737":{i:0.000156248457915663,u:"../Content/Programming/C/Core_Functions/Static/XML/get_default_policy.htm",a:"Get the default  XML policy . Prototype  \n    void mco_xml_get_default_policy(\t/*OUT*/ mco_xml_policy_t * p );\n  Arguments Description This function gets the default  XML policy . Return Codes Example  \n    Application snippet:\n        \n     \n    const char * dbname = \"SimpleDb\";\n     \n    int ...",t:"mco_xml_get_default_policy"},"738":{i:0.000156248457915663,u:"../Content/Programming/C/Core_Functions/Static/XML/get_policy.htm",a:"Get the current  XML policy . Prototype  \n    void mco_xml_get_policy(\t/*IN*/ mco_trans_h t, /*OUT*/ mco_xml_policy_t * p );\n  Arguments Description This function gets the current  XML policy . Return Codes Example  \n    Application snippet:\n        \n     \n    const char * dbname = \"SimpleDb\";\n    ...",t:"mco_xml_get_policy"},"739":{i:0.000171504968180941,u:"../Content/Programming/C/Core_Functions/Static/XML/set_policy.htm",a:"Set the current  XML policy . Prototype  \n    void mco_xml_set_policy(\t/*IN*/ mco_trans_h t, /*OUT*/ mco_xml_policy_t * p );\n  Arguments Description This function sets the current  XML policy . Return Codes Example  \n    Application snippet:\n        \n     \n    const char * dbname = \"SimpleDb\";\n    ...",t:"mco_xml_set_policy"},"740":{i:0.000171504968180941,u:"../Content/Programming/C/Core_Functions/Static/XML/export.htm",a:"Save a database image to an external file. Prototype  \n    MCO_RET\tmco_db_xml_export(\t/*IN*/ mco_trans_h t,\n                   /*IN*/ void * stream_handle,\n                   /*IN*/ mco_stream_write output_stream_writer );\n  Arguments Description This function exports database data to an output ...",t:"mco_db_xml_export"},"741":{i:0.000171504968180941,u:"../Content/Programming/C/Core_Functions/Static/XML/import.htm",a:"Load an entire class from an external file. Prototype  \n    MCO_RET\tmco_db_xml_import(\t/*IN*/ mco_trans_h t,\n                   /*IN*/ void *stream_handle,\n                   /*IN*/ mco_stream_read input_stream_reader );\n  Arguments Description This function imports database data from an input ...",t:"mco_db_xml_import"},"742":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary_Interfaces.htm",a:"Auxiliary Interfaces The following links present additional APIs that provide specialized functionality:",t:"Auxiliary Interfaces"},"743":{i:0.000632993999487264,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/create.htm",a:"Create a backup record of the database. For an overview see page  Incremental Online Backup in C Prototype  \n    void\tmco_backup_create(\t/*IN*/ mco_db_h con, \n                    /*IN*/ char const* file_name, \n                    /*IN*/ char const* label, \n                    /*IN*/ mco_backup_type ...",t:"mco_backup_create"},"744":{i:0.00039589992907156,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/list.htm",a:"List the contents of a backup file. For an overview see page  Incremental Online Backup in C Prototype  \n    void\tmco_backup_list(\t/*IN*/ mco_db_h con, \n                    /*IN*/ char const* file_name, \n                    /*IN*/ mco_size_t* backup_list_size,\n                    /*IN*/ ...",t:"mco_backup_list"},"745":{i:0.000468215209424339,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/restore.htm",a:"Restore backup records starting from the latest snapshot record in the specified file up to the specified label. For an overview see page  Incremental Online Backup in C Prototype  \n    void\tmco_backup_restore(\t/*IN*/ mco_db_h con, \n                    /*IN*/ char const* file_name, \n                 ...",t:"mco_backup_restore"},"746":{i:0.000397479623700993,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/verify.htm",a:"Check the backup consistency without restoring the database. For an overview see page  Incremental Online Backup in C Prototype  \n    void\tmco_backup_verify(\t/*IN*/ mco_db_h con, \n                    /*IN*/ char const* file_name, \n                    /*IN*/ char const* label, \n                    ...",t:"mco_backup_verify"},"747":{i:0.000525844630113451,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/async_backup_start.htm",a:"Start the asynchronous backup process. For an overview see page  Incremental Online Backup in C Prototype  \n    MCO_RET mco_async_backup_start         ( /*IN*/ mco_db_h connection, \n                    /*IN*/ unsigned int backup_cycle_delay_msec,\n                    /*IN*/ char const* file_name, \n   ...",t:"mco_async_backup_start"},"748":{i:0.00030413782253679,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/async_backup_progress_info.htm",a:"Return status of the backing up and restoration process. For an overview see page  Incremental Online Backup in C Prototype  \n    MCO_RET mco_async_backup_progress_info         ( /*IN*/ mco_db_h connection, \n                            /*OUT*/ mco_async_backup_progress_info_t * info)\n  Arguments ...",t:"mco_async_backup_progress_info"},"749":{i:0.000271510864410762,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/async_restore_start.htm",a:"Start the asynchronous restore process. For an overview see page  Incremental Online Backup in C Prototype  \n    MCO_RET mco_async_restore_start         ( /*IN*/ mco_db_h connection, \n                        /*IN*/ char const* file_name, \n                        /*IN*/ char const* label,\n            ...",t:"mco_async_restore_start"},"750":{i:0.000271510864410762,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Backup/async_restore_stop.htm",a:"Stop the asynchronous restore process. For an overview see page  Incremental Online Backup in C Prototype  \n    MCO_RET mco_async_restore_stop         ( /*IN*/ mco_db_h connection, \n                        /*IN*/ int force)\n  Arguments Description This function breaks the restoration procedure and ...",t:"mco_async_restore_stop"},"751":{i:0.000321823674777884,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics.htm",a:"Runtime Statistics Applications can call the following APIs to know how much database memory is left or currently in use, to display detailed information regarding the memory usage of indexes, and to register allocation callback functions to monitor dynamic memory usage.",t:"Runtime Statistics"},"752":{i:0.000237586990105841,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/free_pages.htm",a:"Return the count of available pages. Prototype  \n    MCO_RET mco_db_free_pages(\t/*IN*/ mco_db_h h, /*OUT*/ uint4 * free_pages );\n  Arguments Description This function returns into free_pages the count of available pages in the database referenced by handle db. Return Codes Example  \n    Application ...",t:"mco_db_free_pages"},"753":{i:0.000237586990105841,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/total_pages.htm",a:"Returns the count of pages in the database. Prototype  \n    MCO_RET mco_db_total_pages(\t/*IN*/ mco_db_h h, /*OUT*/ uint4 * total_pages );\n  Arguments Description This function returns into total_pages the count of pages in the database referenced by handle db. Return Codes Example  \n    Application ...",t:"mco_db_total_pages"},"754":{i:0.000178915268364791,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/page_size.htm",a:"Returns the database page size. Prototype  \n    MCO_RET mco_db_page_size(\t/*IN*/ mco_db_h h, /*OUT*/ uint2 * page_size );\n  Arguments Description This function returns into page_size the  page size for the database referenced by handle db. Return Codes Example  \n    Application snippet:\n        \n    ...",t:"mco_db_page_size"},"755":{i:0.000215789908499169,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/class_stat_get.htm",a:"Return the class code of the object at the current cursor position. Prototype  \n    MCO_RET\tmco_class_stat_get(\t/*IN*/ mco_trans_h t, \n                    /*IN*/ uint2 * class_code,\n                    /*OUT*/ mco_class_stat_h stat);\n  Arguments Description This function returns statistics that are ...",t:"mco_class_stat_get"},"756":{i:0.000148987833306516,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/index_stat_num.htm",a:"Return the number of indexes in the database. Prototype  \n    MCO_RET\tmco_index_stat_num(\t/*IN*/ mco_trans_h t, \n                    /*IN*/ uint2 * n_indexes );\n  Arguments Description This function returns the number of indexes in the database. Return Codes Example  \n    Application snippet:\n       ...",t:"mco_index_stat_num"},"757":{i:0.000249182544697237,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/index_stat_get.htm",a:"Return statistics maintained for the specified index. Prototype  \n    MCO_RET\tmco_index_stat_get(\t/*IN*/ mco_trans_h t, \n                    /*IN*/ uint2 index_number,\n                    /*OUT*/ mco_index_stat_h stat);\n  Arguments Description This function returns statistics that are maintained for ...",t:"mco_index_stat_get"},"758":{i:0.000148987833306516,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/index_get_size.htm",a:"Return the size of the specified index . Prototype  \n    MCO_RET\tmco_index_get_size(\t/*IN*/ mco_trans_h t, \n                    /*IN*/ uint2 index_number,\n                    /*OUT*/ mco_counter_t * size );\n  Arguments Description The function returns the size of the index -- the number of key ...",t:"mco_index_get_size"},"759":{i:0.000191201214144078,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/register_alloc_callback.htm",a:"Register a callback function that is called by the runtime when it detects low memory conditions. Prototype  \n    void\tmco_register_alloc_callback(\t/*IN*/ mco_db_h db, \n                       /*IN*/ mco_alloc_callback_t callback,\n                       /*IN*/ mco_alloc_callback_threshold_kind_t ...",t:"mco_register_alloc_callback"},"760":{i:0.000148987833306516,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Statistics/register_disk_alloc_callback.htm",a:"Register a callback function with the persistent support that is called by the runtime when it detects low memory conditions. Prototype  \n    void\tmco_register_disk_alloc_callback(\t/*IN*/ mco_db_h db, \n                          /*IN*/ mco_alloc_callback_t callback,\n                          /*IN*/ ...",t:"mco_register_disk_alloc_callback"},"761":{i:0.000309068851935514,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Calculator.htm",a:"In addition to the  runtime statistics , eXtremeDB  provides the possibility of obtaining runtime information about any database class, including the memory that will be used by that class at runtime, its indexes and the size of dynamic objects.  This information allows applications to optimize ...",t:"Calculator"},"762":{i:0.00115342489304418,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Calculator/init.htm",a:"Initialize the calculator. Prototype  \n    void\tmco_calc_init(\t/*OUT*/ mco_calc_t * calc,\n               /*IN*/ mco_dictionary_h dict  );\n  Arguments Description This function initializes the calculator structure  setting the dict element. Return Codes Example  \n    Application snippet:\n        \n    ...",t:"mco_calc_init"},});