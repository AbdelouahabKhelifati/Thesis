define({"1588":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/haasync.htm",a:"This sample demonstrates eXtremeDB High Availability in asynchronous mode. How to Run In a console window run:  \n    ReplMaster \n      Then in a second console window run:  \n    ReplSlave \n  It is also possible to run replica applications in synchronous mode even if the master is running ...",t:"haasync"},"1589":{i:0.000281396897945462,u:"../Content/Programming/Java/SDK_Samples/HA/habinev.htm",a:"This sample demonstrates the eXtremeDB High Availability binary schema evolution feature. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping ...",t:"habinev"},"1590":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/hacancel.htm",a:"This sample demonstrates the eXtremeDB High Availability cancellation feature. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping through the ...",t:"hacancel"},"1591":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/haforce.htm",a:"This sample demonstrates the eXtremeDB High Availability kill feature. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"haforce"},"1592":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/hahotsync.htm",a:"This sample demonstrates the eXtremeDB High Availability \"hot synchronization\" feature. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping ...",t:"hahotsync"},"1593":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/hamcast.htm",a:"This sample demonstrates eXtremeDB High Availability in multicast mode. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"hamcast"},"1594":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/hasql.htm",a:"This sample starts in replica mode and tries to connect to a master up to 3 times. If it fails to connect or the master dies, then it switches to master mode. In the master mode it initializes the database if necessary and then updates random records for 10 seconds How to Run In a console window ...",t:"hasql"},"1595":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/haswitch.htm",a:"This sample demonstrates how to switch between master and replica eXtremeDB High Availability applications. How to Run In a console window run the following and press \u003center\u003e to switch between master and replica:  \n    Master \n      But it is more instructive to run one instance in your development ...",t:"haswitch"},"1596":{i:0.000163879314172373,u:"../Content/Programming/Java/SDK_Samples/HA/hawindow.htm",a:"This sample demonstrates the eXtremeDB High Availability \" transaction window\"  feature. How to Run In a console window run:  \n    Master \n      Then in a second console window run:  \n    Replica \n  But it is more instructive to run one instance in your development environment debugger, stepping ...",t:"hawindow"},"1597":{i:0.000512331519096693,u:"../Content/Programming/Java/SDK_Samples/Java_SQL.htm",a:"Java Embedded SQL samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"Java Embedded SQL samples"},"1598":{i:0.000194213523571979,u:"../Content/Programming/Java/SDK_Samples/SQL/rsql.htm",a:"This sample demonstrates the eXtremeSQL remote SQL client application. How to Run To start this sample using xSQL as the SQL server application In a console window run:  \n    xsql -size 100m -p 5001 -dbname xsqldb -i \n      Then in a second console window run:  \n    RemoteSQL \n  Then execute the SQL ...",t:"rsql"},"1599":{i:0.000194213523571979,u:"../Content/Programming/Java/SDK_Samples/SQL/sql.htm",a:"sql This sample demonstrates enabling of the SQL engine and accessing data via SQL queries along with direct access to a database. How to Run In a console window run:  \n    Sql\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"sql"},"1600":{i:0.000194213523571979,u:"../Content/Programming/Java/SDK_Samples/SQL/sqlserver.htm",a:"sqlserver Demonstrates an eXtremeSQL  SQL server application. How to Run In a console window run:  \n    sqlserver\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"sqlserver"},"1601":{i:0.000194213523571979,u:"../Content/Programming/Java/SDK_Samples/SQL/sqlseq.htm",a:"sqlseq Demonstrates use of eXtremeDB sequences . How to Run In a console window run:  \n    sqlseq\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"sqlseq"},"1602":{i:0.000200207003419311,u:"../Content/Programming/Java/SDK_Samples/Core/sharding.htm",a:"This sample demonstrates database sharding using Java. How to Run In a console window run  \n    xsql –size 1024m –p 5000\n      Then in a second console window run  \n    xsql –size 1024m –p 5001\n  Then in a third console window run  \n    Sharding\n      But it is more instructive to run one instance ...",t:"Sharding"},"1603":{i:0.000421466911477534,u:"../Content/Programming/Java/SDK_Samples/Java_TL.htm",a:"Java Transaction Logging samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"Java Transaction Logging samples"},"1604":{i:0.000241049291530345,u:"../Content/Programming/Java/SDK_Samples/TL/tlogcheckpoint.htm",a:"This sample demonstrates the method LogWriter.SaveSnapshot allowing to create a database snapshot and \t\ttruncate the transaction log in a single operation. How to Run In a console window run:  \n    TLogCheckpoint\n      But it is more instructive to run one instance in your development environment ...",t:"tlogcheckpoint"},"1605":{i:0.000241049291530345,u:"../Content/Programming/Java/SDK_Samples/TL/tlogdynamicpipe.htm",a:"tlogdynamicpipe This sample demonstrates the use of dynamically adding/removing reader pipes at runtime. How to Run In a console window run:  \n    TLogDynamicPipe\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"tlogdynamicpipe"},"1606":{i:0.000241049291530345,u:"../Content/Programming/Java/SDK_Samples/TL/tlogiterpipe.htm",a:"This sample demonstrates the use of flags LogWriter.LF_ITERABLE and LogWriter.LF_PIPE to transfer the log through a pipe to another application and iterate the log on the reader side. How to Run In a console window run:  \n    TLogDBSource\n      Then in a second console window build and run the ...",t:"tlogiterpipe"},"1607":{i:0.000180582116896125,u:"../Content/Programming/Java/Java_App_Development.htm",a:"The eXtremeDB  Java API consists of a set of Java classes which form a convenient wrapper for the lower-level C runtime libraries. For  general principles of eXtremeDB application  implementation using the Java Native Interface please use the links in the following table:",t:"Application Development with Java"},"1608":{i:0.000258083692997651,u:"../Content/Programming/Java/Java_Schema_Definition.htm",a:" Java Schema Definition Java applications define the database classes to be managed in the eXtremeDB  runtime using native Java class syntax applying special annotations.  For example, the following code snippet would define a database with two classes Department and Employee:  \n    @Persistent()\n   ...",t:" Java Schema Definition"},"1609":{i:0.000186580033991893,u:"../Content/Programming/Java/Java_Query_Result.htm",a:"The SqlResultSet class provides a collection of column names as property getColumnNames and rows as objects of class SqlTuple. These can be iterated using Java for loops as in the following code snippet:  \n    SqlResultSet result = con.executeQuery(\"select pk,value from MyTable where pk\u003e=?\", 2013);\n ...",t:"SQL Query Result Processing in Java"},"1610":{i:0.00356867200857892,u:"../Content/Programming/Java/Java_Classes.htm",a:"As Java is an object oriented language, the eXtremeDB Java Native Interface (JNI) it is implemented as a \"wrapper\" over the core C language eXtremeDB libraries. However, the JNI does not simply translate calls to the underlying C API (with all of the appropriate arguments) but implements an object ...",t:"The Java Classes"},"1611":{i:0.00164483540202783,u:"../Content/Programming/Java/Classes/Database.htm",a:"Database provides the wrapper for interfacing with eXtremeDB databases. For an overview see page  Java Classes Class Definition  \n    public class Database implements java.io.Closeable \n    {\n        /* Public enums */\n        public enum TransactionType {…};\n        public enum TransactionPriority ...",t:"The Java Database Class"},"1612":{i:0.000485353007788465,u:"../Content/Programming/Java/Classes/Constants/Database_Enums.htm",a:"The following enumerated values are defined in the Database class: Class Definition  \n    public class Database implements java.io.Closeable\n    {\n        public enum TransactionType\n        {\n            ReadOnly,\n            Update,\n            ReadWrite,\n            Exclusive\n        };\n        ...",t:"The Java Database Enumerated Constants"},"1613":{i:0.000555235419945127,u:"../Content/Programming/Java/Classes/Constants/Database_Constants.htm",a:"The following constant values are defined in the Database class: Class Definition  \n    public class Database implements java.io.Closeable \n    {\n        ...\n        /* Database Compression */\n        public static final int Compression_ObjHead     = 0x01;\n        public static final int ...",t:"The Java Database Constants"},"1614":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Parameters.htm",a:"Parameters  provides runtime options for the database open method. For an overview see page  Java Database Class Class Definition  \n    public static class Parameters\n    {\n        public int         memPageSize;\n        public int         diskPageSize;\n        public int         maxConnections;\n    ...",t:"The Java Embedded Database Class Parameters"},"1615":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Runtime_Info.htm",a:"RuntimeInfo provides access to the eXtremeDB database runtime settings. For an overview see page  Java Database Class Class Definition  \n    public static class RuntimeInfo \n    {\n        public byte    mco_version_major;\n        public byte    mco_version_minor;\n        public short   ...",t:"The Java Embedded Database Class RuntimeInfo"},"1616":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Device.htm",a:"Device defines an eXtremeDB memory device. For an overview see page  Java Database Class Class Definitions  \n    public abstract static class Device\n    {\n        public enum Kind \n        {\n            Data,\n            DiskCache,\n            TransactionLog,\n            AsyncBuffer,\n            ...",t:"The Java Embedded Database Class Device "},"1617":{i:0.000214091051634503,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Device_Subclasses.htm",a:"The  subclasses below define the specific type of Device instance. For an overview see page  Java Database Class Class Definitions  \n    public static class PrivateMemoryDevice extends Device\n    {\n        public PrivateMemoryDevice(Kind kind, long size) \n        {\n            super(kind);\n          ...",t:"The Java Embedded Database Device Subclasses"},"1618":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Backup_Info.htm",a:"BackupInfo defines the eXtremeDB Incremental Backup  settings. For an overview see page  Java Database Class Class Definition  \n    public static class BackupInfo \n    {\n        public int        protocolVersion;\n        public BackupType type;\n        public int        flags;\n        public int     ...",t:"The Java Embedded Database Class BackupInfo"},"1619":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/SSL_Parameters.htm",a:"SSLParameters defines the  SSL  settings for secure communications. For an overview see page  Java Database Class Class Definition  \n    public static class SSLParameters\n    {\n        public String cipherList;\n        public long maxCertList;\n        public long options;\n        public int ...",t:"The Java Embedded Database Class SSLParameters"},"1620":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/HA_Channel_Info.htm",a:"HAChannelInfo defines an eXtremeDB High Availability communications channel. For an overview see page  Java Database Class Class Definition  \n    public static class HAChannelInfo\n    {\n        public String  protocolType;\n        public long    bytesSent;\n        public long    bytesRcvd;\n        ...",t:"The Java Embedded Database Class HAChannelInfo"},"1621":{i:0.000164428439446864,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Cluster_Params.htm",a:"ClusterParams defines the interface to eXtremeDB Cluster. For an overview see page  Java Database Class Class Definition  \n    public static class ClusterParams\n    {\n        public ClusterNodeParams     nodes[];\n        public int                   nodeId;\n        public int                   ...",t:"The Java Embedded Database Class ClusterParams"},"1622":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Cluster_Parameter_Classes.htm",a:"The classes and interfaces below define the eXtremeDB Cluster interface parameters. For an overview see page  Java Database Class Class Definitions  \n    public static class ClusterNodeParams\n    {\n        public String addr;\n        public int    qrank;\n \n        public ClusterNodeParams(String ...",t:"The Java Embedded Database Cluster Parameter Classes"},"1623":{i:0.000150239121678967,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Database_Classes/Cluster_Info.htm",a:"ClusterInfo provides information about the eXtremeDB Cluster interface. For an overview see page  Java Database Class Class Definition  \n    public static class ClusterInfo\n    {\n        public int  rTransCommit;\n        public int  rTransRollback;\n        public long bytesSent;\n        public long ...",t:"The Java Embedded Database Class ClusterInfo"},"1624":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/Connection.htm",a:"Connection provides the interface for all threads interacting with a Database object. For an overview see page  Java Classes Class Definition  \n    public class Connection implements java.io.Closeable\n    {\n        /* Constructors */\n        public Connection(Database db) \n        {\n            ...",t:"The Java Connection Class"},"1625":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/HA_Classes/MasterConnection.htm",a:"MasterConnection extends the Connection class for eXtremeDB High Availability master applications. The replication master application must use an instance of this class instead of class Connnection. Class Definition  \n    public class MasterConnection extends Connection \n    {\n        /**\n        * ...",t:"The Java MasterConnection Class"},"1626":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/HA_Classes/ReplicaConnection.htm",a:"ReplicaConnection extends the Connection class for eXtremeDB High Availability replica applications. Class Definition  \n    public class ReplicaConnection extends Connection \n    {\n        /**\n        * Switch to master after initial synchronization\n        */\n        public static final int ...",t:"The Java ReplicaConnection Class"},"1627":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/HA_Classes/ClusterConnection.htm",a:"ClusterConnection extends the Connection class for eXtremeDB Cluster applications. Class Definition  \n    public class ClusterConnection extends Connection \n    {\n        public ClusterConnection(Database db) \n        {\n            super(db);\n        }\n \n        public void listen() \n        {\n      ...",t:"The Java ClusterConnection Class"},"1628":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/Cursor.htm",a:"The Java  Cursor  Class  Cursor provides methods for iterating through instances of a class. For an overview see page  Java Classes Class Definition  \n    public class Cursor\u003cT\u003e implements Iterable\u003cT\u003e, Iterator\u003cT\u003e, java.io.Closeable\n    {\n     \n        public enum Operation \n        {\n            ...",t:"The Java Cursor Class "},"1629":{i:0.00389780526216094,u:"../Content/Programming/Java/Classes/Aggregator.htm",a:"The Java  Aggregator  Class  Aggregator  is used to perform aggregation. Grouping and aggregation is done using two interfaces Aggregate and GroupBy. There are some predefined implementations for standard aggregates: max, min, sum, avg, count, etc. And it is possible to define user-defined ...",t:"The Java Aggregator Class "},"1630":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/TopAggregate.htm",a:"TopAggregate implements the aggregation returning the top N values. For an overview see page  Java Aggregator Class Class Definition  \n    public static class TopAggregate implements Aggregate\u003cComparable\u003e\n    {\n        public void initialize(Comparable val) \n        {\n            max[0] = val;\n      ...",t:"The Java Embedded Aggregator Class TopAggregate"},"1631":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/Max_MinAggregate.htm",a:"MaxAggregate implements the maximum aggregation, and MinAggregate implements the minimum aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class MaxAggregate implements Aggregate\u003cComparable\u003e\n    {\n        public void initialize(Comparable val) \n        ...",t:"The Java Embedded Aggregator Classes MaxAggregate and MinAggregate "},"1632":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/Real_Integer_Sum_Aggregate.htm",a:"RealSumAggregate  implements the sum aggregation for real numbers (as double precision values) and IntegerSumAggregate implements the sum aggregation for integers (as longs). For an overview see page  Java Aggregator Class Class Definitions Sum aggregate for real values  \n    public static class ...",t:"The Java Embedded Aggregator Classes RealSumAggregate and IntegerSumAggregate "},"1633":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/AvgAggregate.htm",a:"AvgAggregate implements the average aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class AvgAggregate implements Aggregate\u003cNumber\u003e\n    {\n        public void initialize(Number val) \n        {\n            sum = val.doubleValue();\n            count = ...",t:"The Java Embedded Aggregator Class AvgAggregate"},"1634":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/PrdAggregate.htm",a:"PrdAggregate implements the product aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class PrdAggregate implements Aggregate\u003cNumber\u003e\n    {\n        public void initialize(Number val) \n        {\n            prd = val.doubleValue();\n        }\n \n        ...",t:"The Java Embedded Aggregator Class PrdAggregate"},"1635":{i:0.000510565533350713,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/VarAggregate.htm",a:"VarAggregate implements the variance aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class VarAggregate implements Aggregate\u003cNumber\u003e\n    {\n        public void initialize(Number val) \n        {\n            double v = val.doubleValue();\n            sum ...",t:"The Java Embedded Aggregator Class VarAggregate"},"1636":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/DevAggregate.htm",a:"DevAggregate implements the standard deviation aggregation by extending class  VarAggregate. For an overview see page  Java Aggregator Class Class Definition  \n    public static class DevAggregate extends VarAggregate\n    {\n        public Object result() \n        {\n            return new ...",t:"The Java Embedded Aggregator Class DevAggregate"},"1637":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/CountAggregate.htm",a:"CountAggregate implements the \"Count all\" aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class CountAggregate implements Aggregate\n    {\n        public void initialize(Object val) \n        {\n            count = 1;\n        }\n \n        public void ...",t:"The Java Embedded Aggregator Class CountAggregate"},"1638":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/DistinctCountAggregate.htm",a:"DistinctCountAggregate implements the \"distinct count\" aggregation. For an overview see page  Java Aggregator Class Class Definition  \n    public static class DistinctCountAggregate implements Aggregate\n    {\n        public void initialize(Object val) \n        {\n            accumulate(val);\n        ...",t:"The Java Embedded Aggregator Class DistinctCountAggregate"},"1639":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/RepeatCountAggregate.htm",a:"RepeatCountAggregate implements the \"repeat count\" aggregation; i.e. the number of items repeated N or more times. For an overview see page  Java Aggregator Class Class Definition  \n    public static class RepeatCountAggregate implements Aggregate\n    {\n        static class Counter \n        {\n       ...",t:"The Java Embedded Aggregator Class RepeatCountAggregate"},"1640":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/ApproxDistinctCountAggregate.htm",a:"ApproxDistinctCountAggregate implements the \"approximate distinct count\" aggregation. (Note that this is not a precise result.) For an overview see page  Java Aggregator Class Class Definition  \n    public static class ApproxDistinctCountAggregate implements Aggregate\n    {\n        static final int ...",t:"The Java Embedded Aggregator Class ApproxDistinctCountAggregate"},"1641":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/First_LastAggregate.htm",a:"FirstAggregate implements the first group element aggregate and LastAggregate implements the last group element aggregate. For an overview see page  Java Aggregator Class Class Definitions  \n    public static class FirstAggregate implements Aggregate\n    {\n        public void initialize(Object val) ...",t:"The Java Embedded Aggregator Classes FirstAggregate and LastAggregate "},"1642":{i:0.000358292079201476,u:"../Content/Programming/Java/Classes/Embedded_Classes/Embedded_Aggragate_Classes/CompoundAggregate.htm",a:"CompoundAggregate implements the \"compound aggregate\": i.e. the combination of several aggregates. (Note that this can calculate more than one aggregate on one traversal). For an overview see page  Java Aggregator Class Class Definition  \n    public static class CompoundAggregate implements ...",t:"The Java Embedded Aggregator Class CompoundAggregate"},"1643":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/GroupByResult.htm",a:"The Java  GroupByResult  Class  GroupByResult represents the result of group by aggregation operation For an overview see page  Java Classes Class Definition  \n    public  class GroupByResult implements java.io.Closeable\n    {\n        private SequenceIterator aggIterator;\n        private ...",t:"The Java GroupByResult Class "},"1644":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/Sequence.htm",a:"The Java  Sequence  Interface The Sequence interface is used to store an array field in the database as a  sequence. For an overview see page  Java Classes Class Definition  \n    @Target(ElementType.FIELD)\n    @Retention(RetentionPolicy.RUNTIME)\n    public @interface Sequence \n    {\n        public ...",t:"The Java Sequence Interface "},"1645":{i:0.000359805354517042,u:"../Content/Programming/Java/Classes/SequenceIterator.htm",a:"The Java  SequenceIterator  Class  SequenceIterator is used to iterate  sequence fields. Note that iteration is performed in tile mode; i.e. more than one  sequence items are fetched at each iteration. All these items in the tile can be obtained using method tileItems(). The main iterator method is ...",t:"The Java SequenceIterator Class "},"1646":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Iterator_Methods.htm",a:"The iterator Java SequenceIterator methods are used to extract and iterate  the object\u0027s sequence elements, determine the  sequence element type, size and position within the iterator\u0027s sequence, determine the sequence  tile  size, and, for  RLE  encoded sequences, determine the repeat count or ...",t:"Iterator Java SequenceIterator Methods"},"1647":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Top_Methods.htm",a:"The top Java SequenceIterator methods  take an integer argument n and produce result sequences of the top n maximum or minimum elements or their positions: Example Following is an example code snippet demonstrating one of these functions:      \n        SequenceIterator close = ...",t:"Top Java SequenceIterator Methods"},"1648":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Unary_Operators.htm",a:"The unary SequenceIterator methods returna result sequence of the same type or, in the case of match(), takes a character string argument pattern and returns a Boolean SequenceIterator. Example Following is an example code snippet demonstrating unary operators :      \n    Cursor\u003cQuote\u003e cursor = new ...",t:"Unary Java SequenceIterator Methods"},"1649":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Binary_Methods.htm",a:"The binary Java SequenceIterator methods  produce a result sequence of the same type by applying the specified operation on the object\u0027s sequence and the corresponding elements in the input sequence. The operation can be one of the following:  Example Following is an example code snippet ...",t:"Binary Java SequenceIterator Methods"},"1650":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Comparison_Methods.htm",a:"The comparison Java SequenceIterator methods take an input sequence argument, and produce the boolean result sequence by applying the specified comparison operator on the object\u0027s sequence and the corresponding elements in the input sequence. If the two input sequence arguments are of different ...",t:"Comparison Java SequenceIterator Methods"},"1651":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Logical_Operators.htm",a:"The logical  Java SequenceIterator methods (except the not operator) take a single argument other, and perform the indicated logical operation on the object\u0027s sequence elements as the left operand and the other sequence elements as the right  operand. They return a Boolean result SequenceIterator. ...",t:"Logical Java SequenceIterator Methods"},"1652":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Collapse_Methods.htm",a:"The collapse Java SequenceIterator methods operate on the object\u0027s and the input sequences, left and right, to produce the computed scalar result  of  type double. The method signatures are of the following form (where op is the indicated operation):  \n    public SequenceIterator op(SequenceIterator ...",t:"Collapse Java SequenceIterator Methods"},"1653":{i:0.000136924520576568,u:"../Content/Programming/Java/Classes/Analytics_Methods/Conditional_Methods.htm",a:"The following conditional SequenceIterator methods   apply the object\u0027s boolean sequence to the input sequence(s). These methods are of the following types: Ternary operation iif() which takes two input sequence arguments then and otherwise, and produces a result sequence of the same type by ...",t:"Conditional Java SequenceIterator Methods"},});