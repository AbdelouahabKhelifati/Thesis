define({"1872":{i:0.000134022979936083,u:"../Content/Programming/SQL/Analytics_Functions/Manipulator/SQL_Stretch0.htm",a:"The seq_stretch0() function is an alternative to seq_stretch() for “stretching” a sequence by injecting 0 for “missing elements”, seq_stretch0() copies the elements of the third argument dVal3 for values in ts1 that are also present in ts2, or are present in ts2 but missing in ts1. The result ...",t:"SQL Sequence Stretch0 Function"},"1873":{i:0.000134022979936083,u:"../Content/Programming/SQL/Analytics_Functions/Manipulator/SQL_Asof_Join.htm",a:"The seq_asof_join() function copies elements of a sequence that are “close to” specified values that represent “as of” timestamps. So elements of the third argument dVal3 are copied into the result sequence which correspond with the value in ts2 that are closest to a value in ts1.  So argument ts1 ...",t:"SQL Sequence Asof_Join Function"},"1874":{i:0.000134022979936083,u:"../Content/Programming/SQL/Analytics_Functions/Manipulator/SQL_Cross.htm",a:"The seq_cross() function returns a sequence of values indicating where the input sequence crosses zero. The second argument specifies whether to indicate the position where the sequence crosses zero in the positive or negative direction: a negative value indicates that zero-crossings in the downward ...",t:"SQL Sequence Cross Function"},"1875":{i:0.000134022979936083,u:"../Content/Programming/SQL/Analytics_Functions/Manipulator/SQL_Extrema.htm",a:"The seq_extrema() function returns a sequence containing the position of the extrema (the “local” maxima and minima) for the input sequence. The second argument specifies which extremum: a negative value indicates that the local minimum is desired; a positive value indicates that the local maximum ...",t:"SQL Sequence Extrema Function"},"1876":{i:0.000149775790901452,u:"../Content/Programming/SQL/Analytics_Functions/Iterator_Functions.htm",a:"The iterator functions are used to extract elements from sequences. The first and last functions return scalar values. The search() function is used to extract the specified range of elements from a  materialized sequence.    Example Following is an example code snippet demonstrating  the first and ...",t:"Sequence Iterator SQL Functions"},"1877":{i:0.000200701701547086,u:"../Content/Programming/SQL/Analytics_Functions/Iterator/SQL_First_Last.htm",a:"The  seq_first_int() and seq_last_int() functions return the first or last element values in a sequence of integers; likewise seq_first_real(), and seq_last_real() return the first and last values for a sequence of real  values.  Note that seq_first_int() and seq_last_int()require an integer ...",t:"SQL Sequence First and Last Functions"},"1878":{i:0.000232007198047902,u:"../Content/Programming/SQL/Analytics_Functions/Iterator/SQL_Search.htm",a:"The seq_search() function produces a sequence ordered according to the sequence filtered by the range values specified in the second and third arguments. Following is an example script demonstrating the seq_search() function:  \n    SELECT symbol, seq_search(day, 20130101, 20130331) as \"Q1_13\"\n    ...",t:"SQL Sequence Search Function"},"1879":{i:0.000140843158084335,u:"../Content/Programming/SQL/Analytics_Functions/Iterator/SQL_Search_First_Last.htm",a:"The seq_search_first() and seq_search_last()functions combine the  seq_search() and  seq_first() or  seq_last()  to produce a sequence ordered according to the input sequence, starting with the value specified in the second argument and having the maximum number of values specified in the third ...",t:"SQL Sequence Search_First and Search_Last Functions"},"1880":{i:0.000172148654585151,u:"../Content/Programming/SQL/Analytics_Functions/Iterator/SQL_Map.htm",a:"The seq_map() function maps elements from the input sequence to the result sequence according to the positions specified in the second argument. Note that the second argument must be of  type mco_seq_no_t (uint8). Note that the values 10 and 30 in the result sequence correspond to the positions ...",t:"SQL Sequence Map Function"},"1881":{i:0.000168851897353743,u:"../Content/Programming/SQL/Analytics_Functions/Iterator/SQL_Project.htm",a:"The seq_project() function produces a sequence of the corresponding elements of the sequence specified in the second argument. Following is an example script demonstrating the seq_project() function:  \n    SELECT symbol, seq_search(day, 20130101, 20130331) as Q1_13\n        seq_project(close, Q1_13)\n ...",t:"SQL Sequence Project Function"},"1882":{i:0.000149775790901452,u:"../Content/Programming/SQL/Analytics_Functions/Top_Functions.htm",a:"The following C API functions take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below: Example Following is an example code snippet demonstrating  these functions:          \n    -- _top_max, _top_min, _top_pos_max, _top_pos_min\n         ...",t:"Top SQL Functions"},"1883":{i:0.000299458646685843,u:"../Content/Programming/SQL/Analytics_Functions/Top/SQL_TopMax_TopMin_TopPosMax_TopPosMin.htm",a:"The seq_top_max() function returns the greatest N values (3 in this example) from the input sequence. The seq_top_min() function returns the smallest N values. The seq_top_pos_max() function returns the positions of the greatest N values in the input sequence. The seq_top_pos_min() function returns ...",t:"SQL Sequence TopMax/TopMin TopPosMax/TopPosMin Functions"},"1884":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg_Functions.htm",a:"All Grand Aggregate functions produce a  scalar result of the specified operation on the input sequence. Example Following is an example code snippet demonstrating some of the grand aggregate functions:          \n    -- count, max, min\n            \n    INSERT INTO SimpleSequence(testNumber,iVal1)\n   ...",t:"Grand Aggregate SQL Functions"},"1885":{i:0.000150951860677979,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg/SQL_Count_Max_Min.htm",a:"The function seq_count() returns an integer count of the elements in the sequence; seq_max(), and seq_min() return the values of the maximum and minimum elements in the sequence.  Following is an example script demonstrating the seq_count(), seq_max() and seq_min() functions:  \n \n    INSERT INTO ...",t:"SQL Sequence Grand Aggregate Count, Max and Min Functions"},"1886":{i:0.000150951860677979,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg/SQL_Sum_Prd_Avg.htm",a:"The functions seq_sum(), seq_prd() and seq_avg() compute the sum, product and average of the values in the sequence and return a double value. Following is an example script demonstrating the seq_sum(), seq_prd() and seq_avg() functions:  \n \n    INSERT INTO SimpleSequence(testNumber,fVal1)\n    ...",t:"SQL Sequence Grand Aggregate Sum, Prd and Avg Functions"},"1887":{i:0.000150951860677979,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg/SQL_Var_Dev.htm",a:"The  seq_var() and seq_dev() functions compute the variance and standard deviation for the input sequence, and return a double value. The variance is always a positive number; the smaller the value the closer the values of the sequence elements are to the mean. The standard deviation returned by ...",t:"SQL Sequence Grand Aggregate Var and Dev Functions"},"1888":{i:0.000150951860677979,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg/SQL_Approxdc.htm",a:"The  seq_approxdc() function returns an integer count of the distinct values in the sequence. Following is an example script demonstrating the seq_approxdc() function:  \n \n    INSERT INTO SimpleSequence(testNumber,fVal1)\n    VALUES(4,\u0027{1.1,1.1,2.2,3.3}\u0027);\n     \n    SELECT fVal1, seq_approxdc(fVal1) ...",t:"SQL Sequence Grand Aggregate Approxdc Function"},"1889":{i:0.000150951860677979,u:"../Content/Programming/SQL/Analytics_Functions/Grand_Agg/SQL_Empty.htm",a:"The  seq_empty() function returns a Boolean value indicating whether the specified sequence has values or not. Following is an example script demonstrating the seq_empty() function:  \n \n    INSERT INTO SimpleSequence(testNumber,fVal1)\n    VALUES(5,\u0027{1.1,1.1,2.2,3.3}\u0027);\n     \n    SELECT ...",t:"SQL Sequence Grand Aggregate Empty Function"},"1890":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg_Functions.htm",a:"All Group Aggregate functions take an input and group_by sequence argument and produce a result sequence containing the calculated aggregate for each group. The object\u0027s sequence is split into groups based on the values in the group_by sequence which is expected to be ordered. Example As explained ...",t:"Group Aggregate SQL Functions"},"1891":{i:0.000146614785410274,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg/SQL_Max_Min.htm",a:"The seq_group_agg_max() and seq_group_agg_min() functions extract the maximum and minimum values for the groups determined by the group_by argument. Following is an example script demonstrating the seq_group_agg_max() and seq_group_agg_min() functions:  \n    SELECT symbol,\n        seq_search(day, ...",t:"SQL Sequence Group Aggregate Max and Min Functions"},"1892":{i:0.000146614785410274,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg/SQL_First_Last.htm",a:"The seq_group_agg_first() and seq_group_agg_last() functions extract the values of the first and last elements for the groups determined by the group_by argument. Following is an example script demonstrating the seq_group_agg_first() and seq_group_agg_last() functions:  \n    SELECT symbol,\n        ...",t:"SQL Sequence Group Aggregate First and Last Functions"},"1893":{i:0.000146614785410274,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg/SQL_Sum_Avg.htm",a:"The seq_group_agg_sum() and seq_group_agg_avg() functions compute the sum and average for the groups determined by the group_by argument. Following is an example script demonstrating the seq_group_agg_sum() and seq_group_agg_avg() functions:  \n    SELECT symbol,\n        seq_search(day, 20130101, ...",t:"SQL Sequence Group Aggregate Sum and Avg Functions"},"1894":{i:0.000146614785410274,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg/SQL_Var_Dev.htm",a:"The seq_group_agg_var() and seq_group_agg_dev() functions compute the variance and standard deviation for the groups determined by the group_by argument. Following is an example script demonstrating the seq_group_agg_var() and seq_group_agg_dev() functions:  \n    SELECT symbol,\n        ...",t:"SQL Sequence Group Aggregate Var and Dev Functions"},"1895":{i:0.000146614785410274,u:"../Content/Programming/SQL/Analytics_Functions/Group_Agg/SQL_Count_Approxdc.htm",a:"The seq_group_agg_count() and seq_group_agg_approxdc() functions compute the count of elements and the approximate number of distinct values for the groups determined by the group_by argument. Following is an example script demonstrating the seq_group_agg_count() and seq_group_agg_approxdc() ...",t:"SQL Sequence Group Aggregate Count and Approxdc Functions"},"1896":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Grid_Agg_Functions.htm",a:"All Grid Aggregate functions take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  Example As explained in  Analytics Functions Library Examples  page, the data in the following example is taken from historical values from 2013 for ...",t:"Grid Aggregate SQL Functions"},"1897":{i:0.000157457473579537,u:"../Content/Programming/SQL/Analytics_Functions/Grid_Agg/SQL_Max_Min.htm",a:"SQL Sequence Grid Aggregate Max and Min Functions The seq_grid_agg_max() and seq_grid_agg_min() functions return sequences with two 7-element blocks whose elements correspond with the values in the Sample Volume Blocks. Following is an example script demonstrating the seq_grid_agg_max() and ...",t:"SQL Sequence  Grid Aggregate Max and Min Functions"},"1898":{i:0.000157457473579537,u:"../Content/Programming/SQL/Analytics_Functions/Grid_Agg/SQL_Sum_Avg.htm",a:"The seq_grid_agg_sum() and seq_grid_agg_avg() functions return sequences with two 7-element blocks whose elements correspond with the values in the Sample Volume Blocks. Following is an example script demonstrating the seq_grid_agg_sum() and seq_grid_agg_avg() functions:  \n    SELECT symbol, ...",t:"SQL Sequence Grid Aggregate Sum and Avg Functions"},"1899":{i:0.000157457473579537,u:"../Content/Programming/SQL/Analytics_Functions/Grid_Agg/SQL_Var_Dev.htm",a:"The seq_grid_agg_var() and seq_grid_agg_dev() functions compute the variance and standard deviation for the sample volume blocks. Following is an example script demonstrating the seq_grid_agg_var() and seq_grid_agg_dev() functions:  \n    SELECT symbol, seq_search(day, 20130101, 20130331) as Q1_13,\n  ...",t:"SQL Sequence Grid Aggregate Var and Dev Functions"},"1900":{i:0.000341822616047399,u:"../Content/Programming/SQL/Analytics_Functions/Window_Agg_Functions.htm",a:"Like Grid Aggregate functions, all Window Aggregate functions take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  The difference in how Window Aggregate functions determine their sliding window interval is described in the  Window ...",t:"Window Aggregate SQL Functions"},"1901":{i:0.000183039548864019,u:"../Content/Programming/SQL/Analytics_Functions/Window_Agg/SQL_Max_Min_Sum_Avg_Var_Dev.htm",a:"The seq_window_agg_max(), seq_window_agg_min(), seq_window_agg_sum(), seq_window_agg_avg(), seq_window_agg_var() and seq_window_agg_dev() functions return sequences with 12 elements which comprise the sliding blocks of 7 elements whose elements correspond with the values in the sample volume blocks. ...",t:"SQL Sequence Window Aggregate Max, Min, Sum, Avg, Var and Dev Functions"},"1902":{i:0.000183039548864019,u:"../Content/Programming/SQL/Analytics_Functions/Window_Agg/SQL_Agg_Ema.htm",a:"The seq_window_agg_ema() function  produced by seq_window_agg_ema() is calculated using the following iterative algorithm, where n is the “number of days” for the moving average (starting with 1): p = 2 / (interval+1) EMA[0] = input[0] * p EMA[n] = EMA[n-1] * (1–p) Note that the first 6 values for ...",t:"SQL Sequence Window Aggregate Exponential Moving Average (EMA) Function"},"1903":{i:0.000183039548864019,u:"../Content/Programming/SQL/Analytics_Functions/Window_Agg/SQL_ATR.htm",a:"The seq_window_agg_atr() function is calculated using the True Range and the iterative algorithm defined below (see  http://en.wikipedia.org/wiki/Moving_average ) The true range is the largest of the: •\tMost recent period\u0027s high minus the most recent period\u0027s low •\tAbsolute value of the most recent ...",t:"SQL Sequence Window Aggregate Average True Range (ATR) Function"},"1904":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Hash_Agg_Functions.htm",a:"All Hash Aggregate functions take input and group_by sequence arguments. (Please see the  Hash_Agg_Grouping  page for a more detailed explanation.) Example As explained in  Analytics Functions Library Examples  page, the data in the following example is taken from historical values from 2013 for ...",t:"Hash Aggregate SQL Functions"},"1905":{i:0.0001683001617488,u:"../Content/Programming/SQL/Analytics_Functions/Hash_Agg/SQL_Max_Min_Sum_Avg.htm",a:"The SQL seq_hash_agg_max(), seq_hash_agg_min(),  seq_hash_agg_sum(),  seq_hash_agg_avg() functions return sequences with the max, min, sum and average for each group. Following is an example script demonstrating these  functions:  \n    SELECT symbol, volume, close,\n        seq_hash_agg_max(close, ...",t:"SQL Sequence Aggregate Hash Aggregate Max, Min, Sum and Avg Functions"},"1906":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Cumulative_Agg_Functions.htm",a:"All Cumulative Aggregate functions produce a result sequence each element of which is the result of the specified operation on all of the preceding elements. Example As explained in  Analytics Functions Library Examples  page, the data in the following example is taken from historical values from ...",t:"Cumulative Aggregate SQL Functions"},"1907":{i:0.000189985538087326,u:"../Content/Programming/SQL/Analytics_Functions/Cumulative_Agg/SQL_Max_Min_Sum_Prd_Avg_Var_Dev.htm",a:"The  seq_cum_agg_sum(),seq_cum_agg_min(), seq_cum_agg_prd(), seq_cum_agg_avg(), seq_cum_agg_var(), seq_cum_agg_dev() functions return a sequence with the cumulative maximum (maximum. minimum, etc ... of all preceding elements) in each element. Following is an example script demonstrating these ...",t:"SQL Sequence Cumulative Aggregate Max, Min, Sum, Prd, Avg, Var and Dev Functions"},"1908":{i:0.000153072548132861,u:"../Content/Programming/SQL/Analytics_Functions/Miscellaneous_Functions.htm",a:"The following function take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below: Example As explained in  Analytics Functions Library Examples  page, the data in the following example is taken from historical values from 2013 for IBM. ...",t:"Miscellaneous Analytics SQL Functions"},"1909":{i:0.000188762970080354,u:"../Content/Programming/SQL/Analytics_Functions/Miscellaneous/SQL_Sort.htm",a:"The seq_sort() function produces a sequence ordered according to the second argument which is a character string value of either ‘asc’ or ‘desc’. In this example desc_volume (sorted in descending order) is then used to project the close prices (by implicitly calling seq_order_by() using the “@” ...",t:"SQL Sequence Sort Function"},"1910":{i:0.000188762970080354,u:"../Content/Programming/SQL/Analytics_Functions/Miscellaneous/SQL_Order_By.htm",a:"The seq_order_by() function produces a sequence ordered according to the sequence specified in the second argument. In this example seq_order_by() is called explicitly to  produce the sequence of close values in ascending order by volume. Following is an example script demonstrating the ...",t:"SQL Sequence Order By Function"},"1911":{i:0.000207075733646895,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Functions/String_Functions.htm",a:"eXtremeSQL String Functions Please use the links in the table below to view the eXtremeSQL string functions:",t:"eXtremeSQL String Functions"},"1912":{i:0.000207075733646895,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Functions/Null_Functions.htm",a:"eXtremeSQL  Null Functions eXtremeSQL provides the following Null functions:",t:"eXtremeSQL Null Functions"},"1913":{i:0.000266192926287157,u:"../Content/Programming/SQL/Functions/Miscellaneous/coalesce.htm",a:"Return the first non-null value in a list of arguments. For an overview see page  eXtremeSQL Functions Prototype      \n    coalesce( arg1, arg2, ... argN);\n      Arguments Description This function returns the first non-null value in a list of arguments. The list is composed of elements each of ...",t:"coalesce"},"1914":{i:0.000207422876983678,u:"../Content/Programming/SQL/Functions/Miscellaneous/ifnull.htm",a:"Return the first argument if null, otherwise return the second argument. For an overview see page  eXtremeSQL Functions Prototype      \n    ifnull( x, y );\n      Arguments Description This function is an alternative for  coalesce(). It returns x if not null; otherwise it returns y. The arguments can ...",t:"ifnull"},"1915":{i:0.000207422876983678,u:"../Content/Programming/SQL/Functions/Miscellaneous/nullifzero.htm",a:"Return null if the first argument is zero, otherwise return the first argument. For an overview see page  eXtremeSQL Functions Prototype      \n    nullifzero( x );\n      Arguments Description This function returns null if x=0; x if not. The argument can be a constant value or a table column of any ...",t:"nullifzero"},"1916":{i:0.000138863995502481,u:"../Content/Programming/SQL/Functions/HA.htm",a:"eXtremeSQL HA Functions The following functions are provided to manage eXtremeDB High Availability sessions with xSQL:",t:"eXtremeSQL HA Functions"},"1917":{i:0.000160977570702019,u:"../Content/Programming/SQL/Functions/HA/xsql_ha_set_quorum.htm",a:"Change the HA quorum. For an overview see page  HA Applications Prototype      \n    void xsql_ha_set_quorum( quorum );\n      Arguments Description This function is called by the master application or instance of xSQL  to set the HA quorum at runtime. Note that a value of quorum greater than 0 is ...",t:"xsql_ha_set_quorum"},"1918":{i:0.000202874680355941,u:"../Content/Programming/SQL/Functions/HA/xsql_ha_set_switch_mode.htm",a:"Change the HA switch mode. For an overview see page  HA Applications Prototype      \n    bool xsql_ha_set_switch_mode( switch_mode );\n      Arguments Description This function takes a single string parameter - \"auto\", \"master\", \"replica\" or \"standalone\" and returns false if the previous value of ...",t:"xsql_ha_set_switch_mode"},"1919":{i:0.000160977570702019,u:"../Content/Programming/SQL/Functions/HA/xsql_ha_get_sequencer.htm",a:"Return the number of the \"most current version of database\". For an overview see page  HA Applications Prototype      \n    int xsql_ha_get_sequencer()\n      Arguments Description This function returns the number of the  \"version of database\" (or \"current-ness\" in the sense of HA). This number can be ...",t:"xsql_ha_get_sequencer"},"1920":{i:0.000138863995502481,u:"../Content/Programming/SQL/Functions/TL.htm",a:"eXtremeSQL Transaction Logging Functions The following functions are provided to manage eXtremeDB High Availability sessions with xSQL:",t:"eXtremeSQL Transaction Logging Functions"},"1921":{i:0.00038284771258327,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Functions/Miscellaneous_Functions.htm",a:"eXtremeSQL  Miscellaneous Functions Please use the links in the table below to view the eXtremeSQL miscellaneous functions:",t:"eXtremeSQL  Miscellaneous Functions"},"1922":{i:0.000148751155242628,u:"../Content/Programming/SQL/Functions/Miscellaneous/generate_series.htm",a:"Return sequential numbers from the start to the stop values. For an overview see page  eXtremeSQL Functions Prototype      \n    generate_series(start, stop);\n      Arguments Description This function returns sequential numbers from the start to the stop value. It can be used to create a table with a ...",t:"generate_series"},"1923":{i:0.000223080663709437,u:"../Content/Programming/SQL/Functions/Miscellaneous/format.htm",a:"Format query output from a  select  statement. For an overview see page  Miscellaneous SQL Functions Prototype      \n    format( fmt, val);\n      Arguments Description This function formats the value val according to the format specified by the format string fmt. If val is of type datetime, then fmt ...",t:"format"},"1924":{i:0.000879217791457512,u:"../Content/Programming/SQL/Functions/file_backup.htm",a:"Perform a file backup for a persistent database. For an overview see page  File_Backup Prototype      \n    file_backup( dbFile, logFile, nThreads);\n      Arguments Description This function allows applications to copy the database and log file for a persistent database. The database can then be  ...",t:"file_backup"},"1925":{i:0.000148751155242628,u:"../Content/Programming/SQL/Functions/FS_Cache_Warmup.htm",a:"fs_cache_warmup The fs_cache_warmup() function may be used to load database files into the file system cache. See C API  mco_disk_fs_cache_warmup() for further details.",t:"fs_cache_warmup"},"1926":{i:0.000148751155242628,u:"../Content/Programming/SQL/Functions/Skip_NaN.htm",a:"The seq_skip_nan() sequence function may be used to omit NaN (Not-a-Number) values in SQL sequence operations. The following steps illustrate use of this function: 1.\tCreate a sample table and populate it with data, e.g.:  \n    CREATE TABLE QuoteFlat(symbol string, bid float, ask float);\n    INSERT ...",t:"seq_skip_nan"},"1927":{i:0.000277220059914,u:"../Content/Programming/SQL/Functions/Miscellaneous/start_profile.htm",a:"Start  connection lock profiling . For an overview see page  eXtremeSQL Functions Prototype      \n    start_profile(rate_usec);\n      Arguments Description This function starts  connection lock profiling . Every rate_usec microseconds the profiler thread (which is started by the start_profile() ...",t:"start_profile"},"1928":{i:0.000442334580071368,u:"../Content/Programming/SQL/Functions/Miscellaneous/stop_profile.htm",a:"Stop  connection lock profiling  and output the connections\u0027 states. For an overview see page  eXtremeSQL Functions Prototype      \n    stop_profile(rate_usec);\n      Arguments Description This function stops  connection lock profiling  and displays the values of the counters collected by the ...",t:"stop_profile"},"1929":{i:0.000177566035708401,u:"../Content/Users_Guides/SQL/SQL_C_API.htm",a:"Originally eXtremeSQL was implemented as a compact set of C++ classes that provide SQL access to eXtremeDB databases. The eXtremeSQL C API consists or low-level C functions which are actually a \"thin wrapper\" over these C++ classes. The usage of these C functions is demonstrated in the  SQL C SDK ...",t:"eXtremeSQL C API"},"1930":{i:0.00012163265184034,u:"../Content/Users_Guides/SQL/C_API/SQL_C_Runtime_Libraries.htm",a:"eXtreme SQL C Runtime Libraries The  /target/bin  directory under your eXtremeSQL installation root directory contains a number of binary libraries that can be statically linked to your C applications.  Each library is provided in two forms: Debug - used during development to aid in finding ...",t:"eXtremeSQL C Runtime Libraries"},"1931":{i:0.000196936069783977,u:"../Content/Users_Guides/SQL/C_API/SQL_C_App_Development.htm",a:"As explained in the  eXtremeSQL C API page, an embedded SQL  application will define its database schema using the eXtremeDB DDL  then compile the schema using  mcocomp as for all C and C++ applications. The applications will then use the  static C API functions  to start the eXtremeSQL  runtime, ...",t:"Embedded SQL Application Development in C"},"1932":{i:0.000132792400416967,u:"../Content/Users_Guides/SQL/C_API/Runtime_Initialization.htm",a:"eXtreme SQL Runtime Initialization in C The SQL interface to an eXtremeDB database in eXtremeSQL embedded C applications, typically called the SQL engine, is of type database_t and is created by calling mcoapi_create_engine(). But first, as with all eXtremeDB applications using the C API, the ...",t:"eXtremeSQL Runtime Initialization in C"},"1933":{i:0.000219653321716794,u:"../Content/Users_Guides/SQL/C_API/Engine_Initialization.htm",a:"Once the database is opened and connected, SQL access to the database is performed via a SQL database “engine” structure defined as type database_t. This structure is used, for all calls to the mcosql_* functions. The database engine can be created in two ways depending on how the application wants ...",t:"eXtremeSQL SQL Engine Initialization in C"},"1934":{i:0.000231699322365639,u:"../Content/Users_Guides/SQL/C_API/Queries.htm",a:"Once the SQL database engine structure is initialized with one of the two methods explained in the  SQL Engine Initialization page, this structure is used, for all calls to the mcosql_* functions. The principal function for  performing SQL queries is mcosql_execute_query() which returns a result set ...",t:"Executing eXtremeSQL Queries in C"},"1935":{i:0.000132792400416967,u:"../Content/Users_Guides/SQL/C_API/Statements.htm",a:" As seen in the  Executing Queries  page, queries are performed by calling mcosql_execute_query() to execute the SQL select statement. However, SQL statements insert, update, delete and create are performed by calling the function mcosql_execute_statement() as in the following examples:      \n    /* ...",t:"Executing eXtremeSQL Statements in C "},"1936":{i:0.000132792400416967,u:"../Content/Users_Guides/SQL/C_API/Prepared_Statements.htm",a:"As explained in the  Embedded SQL Application Development in C  page, it is sometimes useful to create a SQL statement that will be executed multiple times. This saves processor time by eliminating the statement compilation step each time the statement is executed. In eXtremeSQL this is done by ...",t:"Executing eXtremeSQL Prepared Statements in C"},"1937":{i:0.000353008155641825,u:"../Content/Users_Guides/SQL/C_API/Argument_Substitution.htm",a:"The SQL statement strings passed to functions mcosql_execute_query() and mcosql_execute_statement() allow application variable values to be substituted into the string according to rules similar to the standard printf() format string substitution with some slight differences. Where a per cent \"%\" ...",t:"eXtremeSQL Statement Argument Substitution in C"},"1938":{i:0.000132792400416967,u:"../Content/Users_Guides/SQL/C_API/Metadata.htm",a:"It is often desirable to open a persistent database that has been created by another application (xSQL or an embedded eXtremeSQL  application using the C, C++, Java, C# or Python APIs). In order to be able to do so,  the two applications must use the exact same metadata (runtime options, page sizes, ...",t:"Saving eXtremeSQL Database Metadata in C"},"1939":{i:0.000132792400416967,u:"../Content/Users_Guides/SQL/C_API/Mixing_Languages.htm",a:"Mixing the eXtremeSQL C API with C++ As it is possible to use the C language API to implement functions within a C++ application, it may be necessary to use a transaction handle for a transaction started by McoSqlEngine. For this purpose the class McoTransaction is provided:      \n    class ...",t:"Mixing the C language API with C++"},});