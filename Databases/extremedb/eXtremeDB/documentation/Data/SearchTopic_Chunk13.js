define({"894":{i:0.000140537615538164,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Miscellaneous/core_is_loaded.htm",a:"mco_core_is_loaded This function returns true if the core eXtremeDB dynamic libraries are loaded. Prototype  \n    mco_bool mco_core_is_loaded(void);\n                 \n  Arguments Description This function returns true if the core eXtremeDB dynamic libraries are loaded. Return Codes",t:"mco_core_is_loaded"},"895":{i:0.000694023083532582,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Samples_Common.htm",a:"The samples/native/common directory contains several common*.c and common*.h files that define and implement helper functions used in the C API SDK samples. These functions allow the sample applications to focus on only the specific eXtremeDB functionality that the sample is intended to demonstrate ...",t:"Samples Helper Functions in C"},"896":{i:0.00023008278666325,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Samples_Common/open_database.htm",a:"Open an eXtremeDB database. For an overview see page  Samples Helper Functions in C Prototype  \n    MCO_RET sample_open_database( /*IN*/ const char * db_name,\n                    /*IN*/ mco_dictionary_h dict, \n                    /*IN*/ mco_size_t db_sz, \n                    /*IN*/ mco_size_t ...",t:"sample_open_database"},"897":{i:0.000252370094107158,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Samples_Common/load_database.htm",a:"Load an eXtremeDB database. For an overview see page  Samples Helper Functions in C Prototype  \n    MCO_RET sample_load_database( /*IN*/ void* stream_handle,\n                    /*IN*/ mco_stream_read input_stream_reader,\n                    /*IN*/ const char * db_name,\n                    /*IN*/ ...",t:"sample_load_database"},"898":{i:0.000187179668720946,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Samples_Common/start_connected_task.htm",a:"Initialize the task descriptor and spawn a task (thread). For an overview see page  Samples Helper Functions in C Prototype  \n    unsigned int sample_start_connected_task( /*IN*/ sample_task_t * descr,\n                            /*OUT*/ sample_task_proc_t task, )\n                            /*IN*/ ...",t:"sample_start_connected_task"},"899":{i:0.000187179668720946,u:"../Content/Programming/C/Core_Functions/Static/Auxiliary/Samples_Common/cluster_parse_opts.htm",a:"Parse the application\u0027s argv[] argument list and set cluster parameters accordingly. For an overview see page  Samples Helper Functions in C Prototype  \n    MCO_RET sample_open_database( /*IN*/ int argc,\n                    /*IN*/ char * argv[], \n                    /*OUT*/ mco_cluster_params_t ...",t:"sample_cluster_parse_opts"},"900":{i:0.000203621486534007,u:"../Content/Programming/C/Core_Functions/Static/Uniform_Database_Access_UDA.htm",a:"Uniform Database Access (UDA) The  UDA API  is explained with code examples in the User\u0027s Guide section. Following is the API Reference Guide:",t:"Uniform Database Access (UDA)"},"901":{i:0.000137059637764541,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_size.htm",a:"Return the size of the meta-dictionary. Prototype  \n    void mco_metadict_size(\t/*IN*/ unsigned short n_entries,\n                 /*OUT*/ unsigned int * size );\n  Arguments Description The function returns the size of the meta-dictionary in bytes (including the header). Return Codes Example  \n    ...",t:"mco_metadict_size"},"902":{i:0.00021502910739714,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_init.htm",a:"Initialize the meta-dictionary. Prototype  \n    MCO_RET mco_metadict_init(\t/*IN*/ mco_metadict_header_t * metadict, \n                   /*IN*/ unsigned int size,\n                   /*IN*/ unsigned int flags );\n  Arguments Description This function initializes the meta-dictionary. It must be called ...",t:"mco_metadict_init"},"903":{i:0.000377873580372249,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_register.htm",a:"Register a database dictionary in the meta-dictionary. Prototype  \n    MCO_RET mco_metadict_register(\t/*IN*/ mco_metadict_header_t * metadict, \n                   /*IN*/ const char * name,\n                   /*IN*/ const void * dict,\n                   /*IN*/ const void * user_data);\n  Arguments ...",t:"mco_metadict_register"},"904":{i:0.000134222276610826,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_register_conn.htm",a:"Register a database dictionary in the meta-dictionary. Prototype  \n    MCO_RET mco_metadict_register_conn(\t/*IN*/ mco_metadict_header_t * metadict, \n                   /*IN*/ const mco_db_h db,\n                   /*IN*/ const void * user_data);\n  Arguments Description The API registers the database ...",t:"mco_metadict_register_conn"},"905":{i:0.00244631504636966,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_count.htm",a:"Return the number of registered databases. Prototype  \n    MCO_RET mco_metadict_count(\t/*IN*/ mco_metadict_header_t * metadict, \n                    /*OUT*/ unsigned short * count );\n  Arguments Description This function returns the number of registered databases ( metadict-\u003en_allocated ). (Note ...",t:"mco_metadict_count"},"906":{i:0.00106460823934936,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_entry.htm",a:"Return a pointer to a dictionary. Prototype  \n    MCO_RET mco_metadict_entry(\t/*IN*/ mco_metadict_header_t * metadict, \n                    /*IN*/ unsigned short dict_no,\n                    /*OUT*/ mco_metadict_entry_t ** entry );\n  Arguments Description This function returns a pointer to the ...",t:"mco_metadict_entry"},"907":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_entry_name.htm",a:"Return a pointer to a dictionary. Prototype  \n    MCO_RET mco_metadict_entry_name(\t/*IN*/ mco_metadict_header_t * metadict, \n                       /*IN*/ const char * name,\n                       /*OUT*/ mco_metadict_entry_t ** entry );\n  Arguments Description This function returns a pointer to the ...",t:"mco_metadict_entry_name"},"908":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_entry_conn.htm",a:"Return a pointer to a dictionary. Prototype  \n    MCO_RET mco_metadict_entry_conn(\t/*IN*/ mco_metadict_header_t * metadict, \n                       /*IN*/ const mco_db_h db,\n                       /*OUT*/ mco_metadict_entry_t ** entry );\n  Arguments Description This function returns a pointer to the ...",t:"mco_metadict_entry_conn"},"909":{i:0.000827352135642611,u:"../Content/Programming/C/Core_Functions/Static/UDA/metadict_unregister.htm",a:"Register a database dictionary in the meta-dictionary. Prototype  \n    MCO_RET mco_metadict_unregister(\t/*IN*/ mco_metadict_header_t * metadict, \n                       /*IN*/ const char * name );\n  Arguments Description The API unregisters a database dictionary from the meta-dictionary. This ...",t:"mco_metadict_unregister"},"910":{i:0.00118530080154313,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_struct_count.htm",a:"Return the number of structures/classes for a dictionary. Prototype  \n    MCO_RET mco_dict_struct_count(\t/*IN*/ mco_metadict_header_t * metadict, \n                      /*IN*/ unsigned short dict_no,\n                      /*OUT*/ unsigned short * count );\n  Arguments Description This function ...",t:"mco_dict_struct_count"},"911":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_struct.htm",a:"Return a structure/class descriptor. Prototype  \n    MCO_RET mco_dict_struct(\t/*IN*/ mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ unsigned short struct_no, \n                  /*OUT*/ mco_dict_struct_info_t * struct_info );\n  Arguments ...",t:"mco_dict_struct"},"912":{i:0.000149753935760005,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_struct_name.htm",a:"Return the descriptor for the structure/class referred to by name. Prototype  \n    MCO_RET mco_dict_struct_name(\t/*IN*/ mco_metadict_header_t * metadict, \n                     /*IN*/ unsigned short dict_no,\n                     /*IN*/ const char * name, \n                     /*OUT*/ ...",t:"mco_dict_struct_name"},"913":{i:0.000162238887305514,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_field.htm",a:"imco_dict_field Return a field descriptor. Prototype  \n    MCO_RET mco_dict_field(\t/*IN*/ mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ unsigned short struct_no,\n                  /*IN*/ unsigned short field_no, \n                  ...",t:"mco_dict_field"},"914":{i:0.000162238887305514,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_field_name.htm",a:"Return a field descriptor by name. Prototype  \n    MCO_RET mco_dict_field_name(\t/*IN*/ mco_metadict_header_t * metadict, \n                    /*IN*/ unsigned short dict_no,\n                    /*IN*/ unsigned short struct_no,\n                    /*IN*/ const char * name, \n                    /*OUT*/ ...",t:"mco_dict_field_name"},"915":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_field_init_data.htm",a:"Return a pointer to the field’s default data value. Prototype  \n    MCO_RET mco_dict_field_init_data(\t/*IN*/ mco_metadict_header_t * metadict, \n                        /*IN*/ unsigned short dict_no,\n                        /*IN*/ unsigned short struct_no,\n                        /*IN*/ unsigned ...",t:"mco_dict_field_init_data"},"916":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_index.htm",a:"Return an index descriptor. Prototype  \n    MCO_RET mco_dict_index(\t/*IN*/ mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ unsigned short struct_no,\n                  /*IN*/ unsigned short index_no, \n                  /*OUT*/ ...",t:"mco_dict_index"},"917":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_index_name.htm",a:"Return an index descriptor by name. Prototype  \n    MCO_RET mco_dict_index_name(\t/*IN*/ mco_metadict_header_t * metadict, \n                     /*IN*/ unsigned short dict_no,\n                    /*IN*/ unsigned short struct_no,\n                    /*IN*/ const char * name, \n                    ...",t:"mco_dict_index_name"},"918":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_ifield.htm",a:"Return an index field descriptor. Prototype  \n    MCO_RET mco_dict_ifield(\t/*IN*/ mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ unsigned short struct_no,\n                  /*IN*/ unsigned short index_no, \n                  /*IN*/ ...",t:"mco_dict_ifield"},"919":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_ifield_name.htm",a:"Return an index field descriptor by name. Prototype  \n    MCO_RET mco_dict_ifield_name(\t/*IN*/ mco_metadict_header_t * metadict, \n                     /*IN*/ unsigned short dict_no,\n                     /*IN*/ unsigned short struct_no,\n                     /*IN*/ unsigned short index_no, \n           ...",t:"mco_dict_ifield_name"},"920":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_nested_ifield.htm",a:"Return a nested field descriptor. Prototype  \n    MCO_RET mco_dict_nested_ifield(\t/*IN*/ mco_metadict_header_t * metadict, \n                      /*IN*/ unsigned short dict_no,\n                      /*IN*/ unsigned short struct_no,\n                      /*IN*/ unsigned short index_no, \n              ...",t:"mco_dict_nested_ifield"},"921":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_event.htm",a:"Return an event descriptor. Prototype  \n    MCO_RET mco_dict_event(\t/*IN*/const mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ unsigned short struct_no, \n                  /*IN*/ unsigned short event_no,\n                  /*OUT*/ ...",t:"mco_dict_event"},"922":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_collation.htm",a:"Return a collation descriptor. Prototype  \n    MCO_RET mco_dict_collation(\t/*IN*/const mco_metadict_header_t * metadict, \n                    /*IN*/ unsigned short dict_no,\n                    /*IN*/ unsigned short collation_no, \n                    /*OUT*/ mco_dict_collation_info_t * coll_info );\n  ...",t:"mco_dict_collation"},"923":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_collation_count.htm",a:"Returns the number of collation descriptors. Prototype  \n    MCO_RET mco_dict_collation_count(\t/*IN*/const mco_metadict_header_t * metadict, \n                        /*IN*/ unsigned short dict_no,\n                        /*IN*/ unsigned short * count );\n  Arguments Description This function returns ...",t:"mco_dict_collation_count"},"924":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/dict_collation_name.htm",a:"Returns a collation descriptor by name. Prototype  \n    MCO_RET mco_dict_collation_name(\t/*IN*/const mco_metadict_header_t * metadict, \n                       /*IN*/ unsigned short dict_no,\n                       /*IN*/ const char * name,\n                       /*OUT*/ mco_dict_collation_info_t * ...",t:"mco_dict_collation_name"},"925":{i:0.000498264060443236,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_db_open.htm",a:"Open the database for UDA. Prototype  \n    MCO_RET mco_uda_db_open(\t/*IN*/const mco_metadict_header_t * metadict, \n                  /*IN*/ unsigned short dict_no,\n                  /*IN*/ mco_device_t * devs, \n                  /*IN*/ mco_size_t n_devs,\n                  /*IN*/ mco_db_params_t * ...",t:"mco_uda_db_open"},"926":{i:0.000167375648982929,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_db_close.htm",a:"Close the database for UDA. Prototype  \n    MCO_RET mco_uda_db_close(\t/*IN*/const mco_metadict_header_t * metadict, \n                   /*IN*/ unsigned short dict_no );\n  Arguments Description This function closes the database referenced by the specified index dict_no. The data is discarded. All ...",t:"mco_uda_db_close"},"927":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_get_udfmap_size.htm",a:"Return the amount of memory necessary to keep information about all user-defined functions at runtime. Prototype  \n    MCO_RET mco_uda_get_udfmap_size (\t/*IN*/ const mco_metadict_header_t * metadict, \n                        /*IN*/ unsigned short dict_no, \n                       /*OUT*/ unsigned int ...",t:"mco_uda_get_udfmap_size"},"928":{i:0.000715628395960625,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_register_udf.htm",a:"Register user-defined functions. Prototype  \n    MCO_RET mco_uda_register_udf(\t/*IN*/ const mco_metadict_header_t * metadict, \n                     /*IN*/ unsigned short dict_no,\n                     /*IN*/ unsigned short struct_no, \n                     /*IN*/ unsigned short index_no,\n              ...",t:"mco_uda_register_udf"},"929":{i:0.000148728473099108,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_new.htm",a:"Allocate a new object. Prototype  \n    MCO_RET mco_uda_new(\t/*IN*/ mco_trans_h t, \n                /*IN*/ unsigned short struct_no,\n                /*IN*/ const void * oid, \n                /*IN*/ const mco_uda_value_t * initializers,\n                /*IN*/ unsigned short initializers_no,\n           ...",t:"mco_uda_new"},"930":{i:0.000174012395865058,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_delete.htm",a:"Remove an object. Prototype  \n    MCO_RET mco_uda_delete(\t/*IN*/ mco_uda_object_handle_t * obj );\n  Arguments Description Removes an object from the database. Return Codes Example  \n    Application snippet:\n        \n     \n    int main(int argc, char* argv[])\n    {\n        MCO_RET rc;\n        ...",t:"mco_uda_delete"},"931":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_delete_all.htm",a:"Delete all objects of the specified class. Prototype  \n    MCO_RET mco_uda_delete_all(\t/*IN*/ mco_trans_h t, unsigned short struct_no );\n  Arguments Description This function deletes all objects of the specified class. Return Codes Example  \n    Application snippet:\n        \n     \n    int main(int ...",t:"mco_uda_delete_all"},"932":{i:0.000162343560530492,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_checkpoint.htm",a:"Insert a new object into indexes. Prototype  \n    MCO_RET mco_uda_checkpoint(\t/*IN*/ mco_uda_object_handle_t * obj );\n  Arguments Description This function inserts a new object into indexes. It can be called prior to a the transaction commit to allow lookups of this object within the current ...",t:"mco_uda_checkpoint"},"933":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_get_class_code.htm",a:"Get the “native” class code. Prototype  \n    MCO_RET mco_uda_get_class_code(\t/*IN*/ mco_uda_object_handle_t * obj,\n                      /*OUT*/ unsigned short * class_code);\n  Arguments Description This function gets the “native” class code of a UDA object. Return Codes Example      \n    ...",t:"mco_uda_get_class_code"},"934":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_updated_bitmap_get_fld.htm",a:"Returns the field number and position of the updated field. Prototype  \n    MCO_RET mco_uda_bitmap_get_fld(\t/*IN*/ mco_uda_object_handle_t * obj,\n                      /*OUT*/ uint2 * index,\n                      /*OUT*/ unsigned short * field_no);\n  Arguments Description This function searches the ...",t:"mco_uda_bitmap_get_fld"},"935":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_to_mco.htm",a:"Make a “native” object handle from a UDA object handle. Prototype  \n    MCO_RET mco_uda_to_mco(\t/*IN*/ mco_uda_object_handle_t * udaobj,\n                 /*OUT*/ MCO_Hf * ret );\n  Arguments Description This function makes a “native” object handle from a UDA object handle. This can be useful when it ...",t:"mco_uda_to_mco"},"936":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_from_mco.htm",a:"Make a UDA object handle from a “native” database object.  Prototype  \n    MCO_RET mco_uda_from_mco(\t/*IN*/ MCO_Hf *mcoobj,\n                   /*OUT*/ mco_uda_object_handle_t *ret );\n  Arguments Description This function makes a UDA object handle from a “native” database object handle. This can be ...",t:"mco_uda_from_mco"},"937":{i:0.000222039604965325,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_lookup.htm",a:"Perform a database lookup. Prototype  \n    MCO_RET mco_uda_lookup(\t/*IN*/ mco_trans_h t,\n                  /*IN*/ unsigned short struct_no,\n                  /*IN*/ unsigned short index_no,\n                  /*IN*/ MCO_OPCODE op, \n                  /*IN*/ const mco_uda_value_t * keys,\n               ...",t:"mco_uda_lookup"},"938":{i:0.000328281750962602,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_get.htm",a:"Return the field value. Prototype  \n    MCO_RET mco_uda_get(\t/*IN*/ const mco_uda_object_handle_p obj,\n                /*IN*/ unsigned short field_no, \n                /*IN*/ unsigned short index, \n                /*OUT*/ mco_uda_value_t * val );\n  Arguments Description Returns the field value. (See ...",t:"mco_uda_get"},"939":{i:0.000299955095229007,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_put.htm",a:"Assign the field value.  Prototype  \n    MCO_RET mco_uda_put(\t/*IN*/ const mco_uda_object_handle_p obj, \n                /*IN*/ unsigned short field_no, \n                /*IN*/ unsigned short index,\n                /*IN*/ const mco_uda_value_t * val);\n  Arguments Description Assigns the field value ...",t:"mco_uda_put"},"940":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_blob_append.htm",a:"Append to a BLOB field. Prototype  \n    MCO_RET mco_uda_blob_append(\t/*IN*/ const mco_uda_object_handle_p obj, \n                    /*IN*/ unsigned short field_no, \n                    /*IN*/ const void * val, \n                    /*IN*/ uint4 size );\n  Arguments Description Append to a BLOB field. ...",t:"mco_uda_blob_append"},"941":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_field_alloc.htm",a:"Allocate vector elements. Prototype  \n    MCO_RET mco_uda_field_alloc(\t/*IN*/ const mco_uda_object_handle_p obj, \n                    /*IN*/ unsigned short field_no, \n                    /*IN*/ unsigned short length ); \n  Arguments Description Allocate a vector field. Return Codes Example      \n    ...",t:"mco_uda_field_alloc"},"942":{i:0.000258100988973723,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_field_erase.htm",a:"Remove an optional structure field or vector element. Prototype  \n    MCO_RET mco_uda_field_erase(\t/*IN*/ const mco_uda_object_handle_p obj, \n                    /*IN*/ unsigned short field_no, \n                    /*IN*/ unsigned short index ); \n  Arguments Description Remove an optional structure ...",t:"mco_uda_field_erase"},"943":{i:0.000181123324461244,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_field_free.htm",a:"Remove an optional structure field or vector element. Note that this function is deprecated and replaced with mco_uda_field_erase(). Prototype  \n    MCO_RET mco_uda_field_free(\t/*IN*/ const mco_uda_object_handle_p obj, \n                    /*IN*/ unsigned short field_no, \n                    /*IN*/ ...",t:"mco_uda_field_free DEPRECATED"},"944":{i:0.000145629979215885,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_pattern_search.htm",a:"Performs a database pattern search. Prototype  \n    MCO_RET mco_uda_pattern_search(\t/*IN*/ mco_trans_h t, \n                      /*IN*/ unsigned short struct_no, \n                      /*IN*/ unsigned short index_no,\n                       /*IN*/ const mco_uda_value_t * keys, \n                      ...",t:"mco_uda_pattern_search"},"945":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_pattern_next.htm",a:"Move cursor position to the next match in the pattern search. Prototype  \n    MCO_RET mco_uda_pattern_next(\t/*IN*/ mco_trans_h t, \n                     /*INOUT*/ mco_cursor_t * cursor, \n                     /*INOUT*/ void * allocated_pattern ); \n  Arguments Description Move cursor position to the ...",t:"mco_uda_pattern_next"},"946":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_pattern_size.htm",a:"Return the amount of memory required for this search pattern. Prototype  \n    MCO_RET mco_uda_pattern_size(\t/*IN*/ const mco_metadict_header_t * metadict, \n                     /*IN*/ unsigned short dict_no,\n                     /*IN*/ unsigned short struct_no,  \n                     /*IN*/ unsigned ...",t:"mco_uda_pattern_size"},"947":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_cursor.htm",a:"Initialize a cursor . Prototype  \n    MCO_RET mco_uda_cursor(\t/*IN*/ mco_trans_h t,\n                 /*IN*/ unsigned short struct_no,  \n                 /*IN*/ unsigned short index_no,\n                 /*OUT*/ mco_cursor_t * cursor );\n  Arguments Description Initializes a cursor based on the index ...",t:"mco_uda_cursor"},"948":{i:0.000243301783761818,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_from_cursor.htm",a:"Return a handle to the object in the cursor. Prototype  \n    MCO_RET mco_uda_from_cursor(\t/*IN*/ mco_trans_h t,\n                    /*IN*/ const mco_cursor_t * cursor, \n                    /*OUT*/ mco_uda_object_handle_t * obj );\n  Arguments Description Return a handle to the object in the cursor. ...",t:"mco_uda_from_cursor"},"949":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_cursor_info.htm",a:"Initialize a cursor . Prototype  \n    MCO_RET mco_uda_cursor_info(\t/*IN*/ mco_trans_h t,\n                    /*IN*/ const mco_metadict_header_t * metadict, \n                    /*IN*/ mco_cursor_t * cursor, \n                    /*OUT*/ unsigned short dict_no,\n                    /*OUT*/ unsigned ...",t:"mco_uda_cursor_info"},"950":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_length.htm",a:"mco_uda_length Return the size (length) of a vector or array. Prototype  \n    MCO_RET mco_uda_length(\t/*IN*/ mco_uda_object_handle_t * obj,\n                  /*IN*/ unsigned short field_no, \n                  /*OUT*/ unsigned short * dimension);\n  Arguments Description Return the length (number of ...",t:"mco_uda_from_cursor"},"951":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_oid_find.htm",a:"Search for the object with the specified oid. Prototype  \n    MCO_RET mco_uda_oid_find(\t/*IN*/ mco_trans_h t,\n                   /*IN*/ mco_uda_value_t * id,  \n                   /*OUT*/ */ mco_uda_object_handle_t * obj );\n  Arguments Description Searches the database for the object with the ...",t:"mco_uda_oid_find"},"952":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_locate.htm",a:"Position the cursor in the index. Prototype  \n    MCO_RET mco_uda_locate(\t/*IN*/ mco_trans_h t,\n                 /*IN*/ unsigned short struct_no,  \n                 /*IN*/ unsigned short index_no,\n                 /*OUT*/ mco_cursor_t * cursor );\n  Arguments Description Positions the cursor in the ...",t:"mco_uda_locate"},"953":{i:0.000137059637764541,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_compare.htm",a:"Compare the value(s) referenced by the current position of the cursor with specified value(s). Prototype  \n    MCO_RET mco_uda_compare(\t/*IN*/ mco_trans_h t,\n                  /*IN*/ const mco_cursor_t * cursor,  \n                  /*IN*/ const mco_uda_value_t * keys,\n                  /*IN*/ ...",t:"mco_uda_compare"},"954":{i:0.000366913759513233,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_register_event_handler.htm",a:"Register an event handler. Prototype  \n    MCO_RET mco_uda_register_event_handler(\t/*IN*/ mco_trans_h t, \n                           /*IN*/ unsigned short struct_no, \n                           /*IN*/ unsigned short event_no,\n                           /*IN*/ mco_uda_event_handler  handler,\n         ...",t:"mco_uda_register_event_handler"},"955":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_unregister_event_handler.htm",a:"Unregister an event handler. Prototype  \n    MCO_RET mco_uda_unregister_event_handler(\t/*IN*/ mco_trans_h t, \n                            /*IN*/ unsigned short struct_no, \n                            /*IN*/ unsigned short event_no,\n                            /*IN*/ mco_uda_event_handler  handler ...",t:"mco_uda_unregister_event_handler"},"956":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_async_event_wait.htm",a:"Block the thread until the event is fired . Prototype  \n    MCO_RET mco_uda_async_event_wait(\t/*IN*/ mco_db_h db,\n                       /*IN*/ unsigned short struct_no, \n                       /*IN*/ unsigned short event_no );\n  Arguments Description This function blocks the thread until the ...",t:"mco_uda_async_event_wait"},"957":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_async_event_release.htm",a:"Release the specified event handler. Prototype  \n    MCO_RET mco_uda_async_event_release(\t/*IN*/ mco_db_h db,\n                         /*IN*/ unsigned short struct_no, \n                         /*IN*/ unsigned short event_no );\n  Arguments Description This function releases the specified event ...",t:"mco_uda_async_event_release"},"958":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_async_event_release_all.htm",a:"Release all event handlers. Prototype  \n    MCO_RET mco_uda_async_event_release_all(\t/*IN*/ mco_db_h db );\n  Arguments Description This function releases all event handlers for the specified database. Return Codes Example      \n    Application snippet:\n        \n     \n    int main(int argc, char* ...",t:"mco_uda_async_event_release_all"},"959":{i:0.00212867537877645,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_register_collation.htm",a:"Register a collation. Prototype  \n    MCO_RET mco_uda_register_collation(\t/*IN*/ const mco_metadict_header_t * metadict, \n                        /*IN*/ unsigned short dict_no,\n                        /*IN*/ unsigned short collation_no, \n                        /*IN-OUT*/ mco_collation_funcs_h ...",t:"mco_uda_register_collation"},"960":{i:0.000124470012994055,u:"../Content/Programming/C/Core_Functions/Static/UDA/uda_get_collmap_size.htm",a:"Return the size of the collation map structure. Prototype  \n    MCO_RET mco_uda_get_collmap_size(\t/*IN*/ const mco_metadict_header_t * metadict, \n                       /*IN*/ unsigned short dict_no,\n                       /*IN*/ unsigned int * size );\n  Arguments Description This function returns ...",t:"mco_uda_get_collmap_size"},});