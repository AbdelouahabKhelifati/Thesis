define({"551":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/UDA_Error_Codes.htm",a:"eXtreme DB UDA Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing  UDA   operations:",t:"eXtremeDB UDA Error Codes"},"552":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/PMon_Misc_Error_Codes.htm",a:"eXtremeDB Performance Monitor and Miscellaneous Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing Performance Monitor and/or various Index operations:",t:"eXtremeDB Performance Monitor and Miscellaneous Error Codes"},"553":{i:0.000147991583283322,u:"../Content/Programming/C/Return Codes/IOT_Codes.htm",a:"eXtremeDB IoT Specific Return  Codes The following table lists status codes that can be returned by the eXtremeDB IoT APIs as defined  in file mco.h:",t:"eXtremeDB IoT Specific Return  Codes"},"554":{i:0.00415512180113431,u:"../Content/Programming/C/Return Codes/MCOREST_Codes.htm",a:"eXtremeDB Web Services Specific Return  Codes The following table lists status codes that can be returned, in addition to MCO_S_OK, MCO_E_NOMEM or MCO_E_UNSUPPORTED, by the eXtremeDB Web Services APIs as defined  in file mco.h:",t:"eXtremeDB Web Services Specific Return  Codes"},"555":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Sequence_Error_Codes.htm",a:"eXtremeDB Sequence Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing  Sequence  data type operations:",t:"eXtremeDB Sequence Error Codes"},"556":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Network_Error_Codes.htm",a:"eXtremeDB Network Error Codes The following error codes  indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing Network operations:",t:"eXtremeDB Network Error Codes"},"557":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Transaction_Logging_Error_Codes.htm",a:"eXtremeDB Transaction Logging Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB Transaction Logging  runtime while processing  Transaction Logging  (TL) operations:",t:"eXtremeDB Transaction Logging Error Codes"},"558":{i:0.00107927594145406,u:"../Content/Programming/C/Return Codes/HA_Error_Codes.htm",a:"eXtremeDB HA Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB High Availability  runtime while processing  HA  operations:",t:"eXtremeDB HA Error Codes"},"559":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Cluster_Error_Codes.htm",a:"eXtremeDB Cluster Error Codes The following error codes  indicate non-fatal error conditions that might be returned by the eXtremeDB Cluster  runtime while processing Cluster operations:",t:"eXtremeDB Cluster Error Codes"},"560":{i:0.00118183998504734,u:"../Content/Programming/C/Return Codes/Fatal_Error_Codes.htm",a:"The following table lists fatal error code bases that indicate bugs in the application code that render the eXtremeDB  runtime unable to safely continue execution. In Java, C# and Python applications fatal errors will raise exceptions.  In C and C++ applications, the ERR type return codes are passed ...",t:"eXtremeDB Fatal Error Codes"},"561":{i:0.000363102222193906,u:"../Content/Programming/C/Return Codes/Feed_Handler_Codes.htm",a:"eXtremeDB Feed Handler Specific Return  Codes The following table lists status codes that can be returned by the eXtremeDB Feed Handler APIs:",t:"eXtremeDB Feed Handler Specific Return  Codes"},"562":{i:0.00034758657589556,u:"../Content/Programming/C/Runtime_Libraries.htm",a:"The  /target/bin  directory under your eXtremeDB installation root directory contains a number of binary libraries that can be statically linked to your C/C++ applications.  Each library is provided in two forms: Debug - used during development to aid in finding application level errors; contains ...",t:"C Runtime Libraries"},"563":{i:0.000206628186173522,u:"../Content/Programming/C/Lib_Configurations/Unix-Linux_examples.htm",a:"Some of the eXtremeDB libraries contain references to functions in other libraries which create inter-dependencies. For example, the core library libmcolib.a  refers to the transaction manager library (libmcomursiw.a or libmcomvcc.a) and the transaction manager library refers back to libmcolib.a. ...",t:"Unix-Linux libraries example configurations"},"564":{i:0.000206628186173522,u:"../Content/Programming/C/Lib_Configurations/Win_examples.htm",a:"Following are some examples of the libraries to be included in the link list (in Visual Studio these are specified in the \"Properties -\u003e Linker -\u003e Input\" dialog) for Windows applications with specific functionality (note that a description of the individual libraries can be viewed in the  package ...",t:"Windows libraries example configurations"},"565":{i:0.000206628186173522,u:"../Content/Programming/C/Lib_Configurations/VxWorks_examples.htm",a:"  Some of the eXtremeDB libraries contain references to functions in other libraries which create inter-dependencies. The VxWorks linker requires that these inter-dependencies be resolved by specifying the libraries in a specific order. For ease of reference, the following list indicates which ...",t:"VxWorks libraries example configurations"},"566":{i:0.00207371063083745,u:"../Content/Programming/C/DDL/Base_Data_Types.htm",a:"Base Data Types The following table describes the data types recognized by the DDL compiler  mcocomp:",t:"Base Data Types"},"567":{i:0.000669754310550015,u:"../Content/Programming/C/DDL/Preprocessor.htm",a:"The eXtremeDB DDL compiler  mcocomp allows limited use of the C preprocessor. Preprocessor directives are typically used to make source programs easy to change. Directives in the source file tell the compiler to perform specific actions, such as replacing tokens in the text. The eXtremeDB DDL ...",t:"The DDL Preprocessor"},"568":{i:0.0011369938692823,u:"../Content/Programming/C/DDL/Declare.htm",a:"The declare statement is used to specify three different entities: the database name, a user-defined “Object Identifier” or oid, and an automatic object identifier or auto_oid:  \n    declare database dbname;\n     \n    declare oid  structname [expected-number-of-entries];\n     \n    declare ...",t:"The DDL Declare Statement"},"569":{i:0.00150639988494268,u:"../Content/Programming/C/DDL/Struct.htm",a:"The DDL meaning of a struct declaration is exactly the same as a C structure. A structure declaration names a type and specifies an arrangement of elements (called “fields”) of the structure that can have different types. Structures and simple types are used as building blocks to construct database ...",t:"The DDL Struct Declaration"},"570":{i:0.000669754310550015,u:"../Content/Programming/C/DDL/Enum.htm",a:"The DDL meaning of an enum declaration is exactly the same as a C language enum: i.e it specifies an enumerated type. Its syntax is also the same:  \n    enum [declarator] {enum-list} ;\n      where declarator is the name used to refer to the enumerated type elsewhere in the schema. For example:  \n    ...",t:"The DDL Enum Declaration"},"571":{i:0.0014800951410536,u:"../Content/Programming/C/DDL/Class.htm",a:"A class declaration defines a group of related class-elements (or fields) that are stored together. A class declaration consists of class element statements, zero or more access statements, and zero or more event statements with syntax as follows:  \n    [compact] [persistent | transient] class ...",t:"The DDL Class Declaration"},"572":{i:0.000984277942835911,u:"../Content/Programming/C/DDL/Element.htm",a:"Element statements are used to define the elements or fields of a class and have syntax as follows according to the type of field being declared:      \n    [nullable]\ttype-identifier | struct-name | enum element-name[length] [ = value [, element-name [length] [= value]] …];\n      or  \n    vector ...",t:"DDL Element Statements"},"573":{i:0.000984277942835911,u:"../Content/Programming/C/DDL/Access.htm",a:"Access statements define the access methods that will be generated for the class. Access methods will be generated for oids, autoids, indexes, and lists. An index definition can include any combination of fields, structure elements or vector elements from a given class. eXtremeDB supports a rich set ...",t:"DDL Access Statements"},"574":{i:0.00130317261854211,u:"../Content/Programming/C/DDL/Event.htm",a:"Event statements are used to define the database events for a class.  For example:  \n    class MyClass\n    {\n        unsigned\u003c4\u003e u4;\n     \n        event \u003cnew\u003e newEvent;\n        event \u003cupdate\u003e updateEvent;\n        event \u003cdelete\u003e deleteEvent;\n        event \u003ccheckpoint\u003e checkpointEvent;\n    }\n  ...",t:"DDL Event Statements"},"575":{i:0.000893887975598398,u:"../Content/Programming/C/DDL/Reserved_Words.htm",a:"The  mcocomp  DDL compiler recognizes reserved words that have operational meaning and consequently cannot be used in the schema definition as class or field names. (Please see the  SQL Reserved Words  page for a list of reserved words for the SQL compiler.)  The following are reserved words ...",t:"DDL Reserved Words"},"576":{i:0.000669754310550015,u:"../Content/Programming/C/DDL/Example.htm",a:"The following sample  DDL  specification illustrates many of the  data types  and declarations available:  \n    #define int1\tsigned\u003c1\u003e\n    #define int2\tsigned\u003c2\u003e\n    #define int4\tsigned\u003c4\u003e\n    #define uint4\tunsigned\u003c4\u003e\n    #define uint2\tunsigned\u003c2\u003e\n    #define uint1\tunsigned\u003c1\u003e\n \n    struct ...",t:"A DDL Example"},"577":{i:0.00012163265184034,u:"../Content/Programming/C/ControlStructures.htm",a:"The eXtremeDB  runtime accesses the database through the binary form of the database schema called the Database Dictionary. This defines the data layout through which the C API functions then interact with the data storage. Some of the C API functions require the use of control structures and in ...",t:"Control Structures used in the C API"},"578":{i:0.00438572959478015,u:"../Content/Programming/C/Structures/Memory_Devices.htm",a:"C and C++ applications specify storage devices at runtime via the array of mco_device_t structures: the  argument (named devs in most SDK samples) passed to  mco_db_open_dev().  Typically, an array of device structures is stack-allocated and initialized prior to calling  mco_db_open_dev().  Each ...",t:"Memory Devices"},"579":{i:0.0105879227687063,u:"../Content/Programming/C/Structures/Database_Parameters.htm",a:"The runtime settings for the database being opened by  mco_db_open_dev() are defined in the mco_db_params_t parameter params which is a structure whose elements are defined in the following table. (Please use the following links for descriptions of common settings for  in-memory  or for  persistent  ...",t:"Database Parameters"},"580":{i:0.00165753361145725,u:"../Content/Programming/C/Structures/Database_Open_Modes.htm",a:"Database Open Modes The mode_mask element of the  mco_db_params_t structure can be set with the following values:",t:"Database Open Modes"},"581":{i:0.00123622659400645,u:"../Content/Programming/C/Structures/Log_Parameters.htm",a:"As explained in the section “Persistent Media I/O”, eXtremeDB maintains a database log file together with the data file(s) for persistent databases to allow for recovery in the case of a system crash. The manner in which database updates are written to the log file is determined by the value of the ...",t:"Log Parameters"},"582":{i:0.000395949852709073,u:"../Content/Programming/C/Structures/Runtime_Info.htm",a:"The characteristics of the runtime currently active can be obtained by calling the  mco_get_runtime_info() API. These characteristics are returned in the mco_runtime_info_t structure which has the following elements. Many of these are boolean (uint1) values (where 1 = MCO_YES and 0 = MCO_NO) ...",t:"Runtime Information"},"583":{i:0.00291504675832841,u:"../Content/Programming/C/Structures/Runtime_Options.htm",a:"Runtime Options The function  mco_runtime_setoption() allows applications to control certain characteristics of the eXtremeDB runtime. The following possible values for runtime options are defined in the header file mco.h:",t:"Runtime Options"},"584":{i:0.000526751208532212,u:"../Content/Programming/C/Structures/Disk_Manager.htm",a:"The disk manager controls operations between the eXtremeDB cache and the persistent storage media. Following is the definition of the mco_disk_info_t structure which describes the state of the current Disk Manager.  Disk info The structure is defined in mco.h as follows:  \n    typedef struct ...",t:"Disk Manager"},"585":{i:0.00021690883608113,u:"../Content/Programming/C/Structures/Database_Statistics.htm",a:"The \t mco_class_stat_get()  and  mco_index_stat_get()  APIs return memory usage statistics in the structures defined below. Also the  Database Calculator  can be used to determine how much memory will be used by that class at runtime, its indexes and the size of dynamic objects. Following is the ...",t:"Database Statistics"},"586":{i:0.00026441030813196,u:"../Content/Programming/C/Structures/Index_Stat.htm",a:"Following is the definition of the mco_index_stat_t structure which provides memory usage statistics for an index:  \n    typedef struct mco_index_stat_t_ \n    {\n        uint2         class_code;             /* class code to which the index belongs */\n        uint4         type;                   /* ...",t:"Index Statistics"},"587":{i:0.00115817640365781,u:"../Content/Programming/C/Structures/Database_Calculator.htm",a:"Following is the definition of the  mco_cc_info_t structure used to obtain information about this class generated by the calculator:  (See function  mco_calc_get_class_info() and the  Database Calculator Callback Handlers  for examples of use of this structure).   The Database Calculator is ...",t:"Database Calculator"},"588":{i:0.00372696824471548,u:"../Content/Programming/C/Structures/Transaction.htm",a:"Transaction Types All database access occurs within transactions which are defined by the enumerated values described in the following sections.  The following eXtremeDB Transaction Types are defined by enum MCO_TRANS_TYPE in mco.h:      \n    typedef enum MCO_TRANS_TYPE_E_\n    {\n        ...",t:"Transaction Control"},"589":{i:0.000744211854185628,u:"../Content/Programming/C/Structures/Cursor.htm",a:"Cursors are used to navigate sets of records returned by index searches with functions  mco_cursor_first() ,  mco_cursor_last() ,  mco_cursor_prev() and  mco_cursor_next(). A cursor structure is also used for calls to generated index_cursor functions and  mco_uda_cursor() Following is the definition ...",t:"Cursor"},"590":{i:0.00012519775742561,u:"../Content/Programming/C/Structures/Event_Types.htm",a:"The following eXtremeDB Event types are defined by enum MCO_EVENT_TYPE in mco.h:  \n    typedef enum MCO_EVENT_TYPE_E_\n    {\n        MCO_EVENT_NEW,         /* A new instance created */\n        MCO_EVENT_UPDATE,      /* an existing instance was updated, applied to single field */\n        ...",t:"Event Types"},"591":{i:0.00136707588065118,u:"../Content/Programming/C/Structures/SequenceIterator.htm",a:" The library of  Analytics Functions  that operate on database fields of type  sequence  use the mco_seq_iterator_t structure defined in header file mcoseq.h as follows:      \n    typedef struct mco_seq_iterator_t_\n    {\n        mco_seq_iterator_next_t next; /* method for obtaning next portion of ...",t:"Sequence Iterator"},"592":{i:0.00012519775742561,u:"../Content/Programming/C/Structures/UDA.htm",a:"Uniform Data Access Interface The  UDA  API  makes it possible for C/C++ applications to bypass the native, generated API and use a pre-defined generic navigational API to access database objects and indexes. Please use the following links to view the control structures and callback functions used ...",t:"Uniforma Data Access Interface"},"593":{i:0.00481042617897147,u:"../Content/Programming/C/Structures/Metadict.htm",a:"UDA Meta-dictionary Following is the definition of the mco_metadict_header_t structure that is used for UDA access as defined in mcouda.h:   The UDA dictionary entries are defined by the mco_metadict_entry_t struct that is also defined in mcouda.h: ",t:"UDA Meta-dictionary"},"594":{i:0.00154046480990708,u:"../Content/Programming/C/Structures/Dict_Struct.htm",a:"UDA Dictionary Struct Following is the definition of the mco_dict_struct_info_t structure that is used for UDA access as defined in mcouda.h:   The  possible values for the bitmask flag are also defined in mcouda.h:",t:"UDA Dictionary Struct"},"595":{i:0.00028327801897863,u:"../Content/Programming/C/Structures/Dict_Field.htm",a:"UDA Dictionary Field Following is the definition of the mco_dict_field_info_t structure that is used for UDA access as defined in mcouda.h:   The  possible values for the bitmask flag are also defined in mcouda.h:",t:"UDA Dictionary Field"},"596":{i:0.00018692742948041,u:"../Content/Programming/C/Structures/Dict_Index.htm",a:"UDA Dictionary Index Following is the definition of the mco_dict_index_info_t structure that is used for UDA access as defined in mcouda.h:   The  possible values for the bitmask flag are also defined in mcouda.h:",t:"UDA Dictionary Index"},"597":{i:0.000130500852888862,u:"../Content/Programming/C/Structures/Dict_Index_Field.htm",a:"UDA Dictionary Index Field Following is the definition of the mco_dict_index_ifield_info_t structure that is used for UDA access is defined in mcouda.h:   The  possible values for the bitmask flag are also defined in mcouda.h:",t:"UDA Dictionary Index Field"},"598":{i:0.000130500852888862,u:"../Content/Programming/C/Structures/Dict_Nested_Index_Field.htm",a:"UDA Dictionary Nested Index Field Following is the definition of the mco_dict_nested_ifield_info_t structure that is used for UDA access is defined in mcouda.h:   The  possible values for the bitmask flag are also defined in mcouda.h:",t:"UDA Dictionary Nested Index Field"},"599":{i:0.000374970926170828,u:"../Content/Programming/C/Structures/UDA_Object.htm",a:"Following is the definition of the mco_uda_object_handle_t structure, used for calls to functions such as  mco_uda_put(), mco_uda_get() and  mco_uda_from_cursor(), as defined in mcouda.h:  \n \n    typedef struct tag_mco_uda_object_handle_t_ {\n        MCO_Hf obj;\n        unsigned short struct_no;\n    ...",t:"UDA Object"},"600":{i:0.000243736932891178,u:"../Content/Programming/C/Structures/UDA_Event_Handler.htm",a:"Database events can be managed by registering an event handler. The function  mco_uda_register_event_handler() requires an argument of type mco_uda_event_handler as define below in mcouda.h:  \n    typedef MCO_RET (*mco_uda_event_handler)( mco_trans_h t, mco_uda_object_handle_p obj, const ...",t:"UDA Event Handler"},"601":{i:0.000130500852888862,u:"../Content/Programming/C/Structures/UDA_Userdef_Functions.htm",a:"A structure of type mco_uda_userdef_funcs_t is required in the call to  mco_uda_register_udf() . It is defined as follows in mcouda.h:      \n    typedef struct mco_uda_userdef_funcs_t_ {\n        mco_uda_compare_userdef_f         fcomp;\n        mco_uda_compare_extkey_userdef_f  fcomp_ext;\n        ...",t:"UDA User-defined Functions"},"602":{i:0.000630504594626252,u:"../Content/Programming/C/Structures/UDA_Value.htm",a:"A structure of type mco_uda_value_t is required in the UDA data access calls like  mco_uda_put()  and  mco_uda_get() . It is defined as follows in mcouda.h:      \n    typedef struct tag_mco_uda_value_t_ {\n        mco_dict_type_t type;\n        union {\n            unsigned char           u1;   /* ...",t:"UDA Value"},"603":{i:0.000412561608668835,u:"../Content/Programming/C/Structures/XML_Policy.htm",a:"XML_Policy The XML policy structure is defined in file include/mcoxml.h as follows:      \n    typedef struct mco_xml_policy_t_\n    {\n        MCO_NUM_BASE      int_base;\n        MCO_NUM_BASE      quad_base;\n        MCO_TEXT_CODING   text_coding;\n        MCO_TEXT_CODING   blob_coding;\n        ...",t:"XML Policy"},"604":{i:0.00012519775742561,u:"../Content/Programming/C/Structures/Callback_Functions.htm",a:"Callback Functions Callback functions are user-defined functions the are registered with the eXtremeDB  runtime which will then call the registered function when the appropriate condition occurs. Please use the links below to view descriptions of the various callback functions:",t:"Callback Functions"},"605":{i:0.000129233967024787,u:"../Content/Programming/C/Structures/Error_Handler.htm",a:"When the runtime encounters an unrecoverable error it calls the internal function mco_stop(). If an error handler has been registered by calling mco_error_set_handler(), mco_stop() will in turn call the application error handler function which must have the following signature:  \n    typedef ...",t:"Error Handler"},"606":{i:0.000129233967024787,u:"../Content/Programming/C/Structures/Error_Handler_Ex.htm",a:"Error Handler Extended  When the runtime encounters an unrecoverable error it calls the internal function mco_stop(). If an error handler has been registered by calling mco_error_set_handler_ex(), mco_stop() will in turn call the application extended error handler function which must have the ...",t:"Error Handler Ex"},"607":{i:0.00151552019780116,u:"../Content/Programming/C/Structures/Stream_Writer.htm",a:"Functions that write to operating system streams, such as  mco_db_save() , must specify a stream writer function which has the following prototype:  \n    typedef mco_size_sig_t(*mco_stream_write) (/*IN*/ void *stream_handle, /*IN*/ const void * from, /*IN*/ unsigned nbytes);\n      Note that ...",t:"Stream Writer"},"608":{i:0.00107619925174236,u:"../Content/Programming/C/Structures/Stream_Reader.htm",a:"Functions that read from operating system streams, such as mco_db_load(), must specify a stream reader function which has the following prototype:  \n    typedef mco_size_sig_t(*mco_stream_read)(void* stream_handle, /*OUT*/void* to, mco_size_t max_nbytes);\n      Note that stream_handle can reference ...",t:"Stream Reader"},"609":{i:0.000219609138279194,u:"../Content/Programming/C/Structures/Transaction_Iterator_Callback.htm",a:"When  mco_trans_iterate() is called it must pass a callback function defined as follows:  \n    typedef MCO_RET (*mco_trans_iterator_callback_t)(mco_trans_h t, MCO_Hf* obj, int cid, int obj_state, void* user_ctx);\n      The parameters are as follows: An example of an iterator callback implementation ...",t:"Transaction Iterator Callback"},"610":{i:0.000398247848146551,u:"../Content/Programming/C/Structures/Db_Calc_Handlers.htm",a:"The Database Calculator functions  mco_calc_cinfo_browse() and mco_calc_iinfo_browse() require callback functions to process the information relative to a specific class or index. They have the following prototypes:  \n    typedef void (*mco_calc_cinfo_h)(mco_calc_t * calc, mco_cc_t * cls, \n          ...",t:"Database Calculator Callback Handlers"},"611":{i:0.000526045456053962,u:"../Content/Programming/C/Structures/Sniffer_Callback.htm",a:"When  mco_db_sniffer() is called it must pass a callback function defined as follows:  \n    typedef MCO_RET (*mco_sniffer_callback_t) (mco_db_h db, void* context, mco_trans_counter_t trans_no);\n      The parameters are as follows: An example of a sniffer implementation is provided in the SDK sample ...",t:"Sniffer Callback"},"612":{i:0.000252708187437347,u:"../Content/Programming/C/Structures/Alloc_Callback.htm",a:"When mco_register_alloc_callback() or mco_register_disk_alloc_callback() is called it must pass a callback function defined as follows:  \n    typedef MCO_RET (*mco_alloc_callback_t)(mco_db_h db, mco_offs_t used);\n      The parameters are as follows: An example of an allocation callback ...",t:"Allocation Callback"},"613":{i:0.000252708187437347,u:"../Content/Programming/C/Structures/Alloc_Callback_Threshold_Kinds.htm",a:"When mco_register_alloc_callback() or mco_register_disk_alloc_callback() is called it must pass an argument of type mco_alloc_callback_threshold_kind_t. The following threshold kinds are defined in mco.h:  \n    typedef enum mco_alloc_callback_threshold_kind_t \n    { /* Report when ... */\n        ...",t:"Allocation Callback Threshold Kinds"},"614":{i:0.00463271316331349,u:"../Content/Programming/C/Structures/Collation_Callback_Functions.htm",a:"When  mco_register_collations() or  mco_uda_register_collation() is called it must pass a mco_collation_funcs_t structure containing two callback functions defined as follows:  \n    typedef struct mco_collation_funcs_t_ \n    {\n        mco_compare_collation_f comp;\n        mco_hash_collation_f    ...",t:"Collation Callback Functions"},"615":{i:0.00145095675135756,u:"../Content/Programming/C/Structures/TL_Parameters.htm",a:"The eXtremeDB Transaction Logging feature (TL) is configured by specifying the parameters and bit mask values described below. TL Params The following structure is initialized  and passed to function  mco_translog_start() :  \n    typedef struct mco_TL_start_data\n    {\n        uint2               ...",t:"Transaction Logging Parameters"},"616":{i:0.00238699862795214,u:"../Content/Programming/C/Structures/HA_Parameters.htm",a:"The eXtremeDB High Availability feature (HA) is configured by specifying the parameters and bit mask values described below. For an overview see page  HA Applications HA Params Master Parameters The following structure is initialized and passed to function  mco_HA_set_master_params():  \n    typedef ...",t:"HA_Params"},"617":{i:0.00127081344226971,u:"../Content/Programming/C/Structures/Cluster_Parameters.htm",a:"The eXtremeDB Cluster feature (included with eXtremeDB High Availability) is configured by specifying the parameters described below. For an overview see page  Cluster Applications in C Cluster Parameters The following structure is initialized and passed to function  mco_cluster_db_open():    \n \n    ...",t:"Cluster_Params"},"618":{i:0.000352861042881335,u:"../Content/Programming/C/Structures/Cluster_Info.htm",a:"  \n typedef struct mco_cluster_info_t_\n {\n    uint4 rtrans_commit; /* nbr of successful remote transactions */\n    uint4 rtrans_rback;  /* nbr of aborted remote transactions */\n    uint8 bytes_sent; /* total of sent data, in bytes */\n    uint8 bytes_recv; /* total of received data, in bytes */\n    ...",t:"Cluster_Info "},"619":{i:0.000506740017896341,u:"../Content/Programming/C/Structures/Cluster_Node_Info.htm",a:"Cluster_Node_Info  Cluster node parameters      \n    #define MCO_MAX_CLUSTER_ADDRESS_LEN 64\n     \n    typedef struct mco_cluster_node_params_t_ {\n       char  addr[MCO_MAX_CLUSTER_ADDRESS_LEN];\n       uint4 qrank;\n    } mco_cluster_node_params_t;\n      Cluster node info      \n    typedef struct ...",t:"Cluster Node Info "},"620":{i:0.00012163265184034,u:"../Content/Programming/C/Structures/ADR_Parameters.htm",a:"The eXtremeDB Active Replication Fabric feature (ARF) is configured by specifying the parameters and bit mask values described below. For an overview see page  ARF Applications in C Please use the links below to view Reference Guide pages for the eXtremeDB Active Replication Fabric control ...",t:"Active Replication Fabric Control Structures"},"621":{i:0.000873417592102252,u:"../Content/Programming/C/Structures/IoT_Communicator_Parameters.htm",a:"The eXtremeDB Active Replication Fabric communicator is configured by specifying the parameters described below. For an overview see page  ARF Applications in C The following structure is initialized by function  mco_iot_comm_params_init()  and passed to function  mco_iot_comm_create() :    \n \n    ...",t:"IoT_Communicator_Params"},"622":{i:0.000228972267553715,u:"../Content/Programming/C/Structures/IoT_Replicator_Parameters.htm",a:"The eXtremeDB Active Replication Fabric replicator is configured by specifying the parameters described below. For an overview see page  ARF Applications in C The following structure is initialized by function  mco_iot_replicator_params_init() and passed to function  mco_iot_replicator_create() :   ...",t:"IoT_Replicator_Params"},"623":{i:0.000250803174846681,u:"../Content/Programming/C/Structures/IoT_Callbacks.htm",a:"The eXtremeDB Active Replication Fabric callbacks are functions defined with the structures described below. For an overview see page  ARF Applications in C The following structures are used to define callback functions which are registered with mco_iot_comm_register_callback() and dropped with ...",t:"IoT_Callbacks"},"624":{i:0.00222894896710749,u:"../Content/Programming/C/Structures/SSL_Parameters.htm",a:"The SSL parameters in structure mco_ssl_params_t are defined as follows in file mcossl.h:  \n     \n    typedef struct mco_ssl_params_t_ {\n        const char *cipher_list;\n        long max_cert_list;\n        long options;\n        void *tmp_dh;\n        int verify_mode;\n        int verify_depth;\n        ...",t:"Secure Sockets Layer (SSL) Parameters"},"625":{i:0.000821452491523909,u:"../Content/Programming/C/Structures/Socket_Parameters.htm",a:"The socket parameters used by eXtremeDB network communications are defined by the following structure defined in header file mconet.h:      \n    typedef struct mco_sock_params_t_\n    {\n        int             mode;       /* bit set of MCO_SOCK_OPEN_MODE */\n        int             linger;\n        int ...",t:"Socket Parameters"},});