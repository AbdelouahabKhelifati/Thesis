define({"1654":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/GrandAgg_Methods.htm",a:"The Grand Aggregate Java SequenceIterator methods produce a double result SequenceIterator the first element of which is the operation result. Example Following is an example code snippet demonstrating a grand aggregate function:          \n    Cursor\u003cQuote\u003e cursor = new Cursor\u003cQuote\u003e(con, ...",t:"Grand Aggregate Java SequenceIterator Methods"},"1655":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/GroupAgg_Methods.htm",a:"The Group Aggregate Java SequenceIterator methods (except groupAggWavg() and groupAggCount()) take an input groupBy sequence argument and produce a result sequence containing the calculated aggregate for each group. The object\u0027s sequence is split into groups based on the values in the groupBy ...",t:"Group Aggregate Java SequenceIterator Methods"},"1656":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/GridAgg_Methods.htm",a:"The Grid Aggregate Java SequenceIterator methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  Example Following is an example code snippet demonstrating a grid aggregate method:          \n    public static void ...",t:"Grid Aggregate Java SequenceIterator Methods"},"1657":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/WindowAgg_Methods.htm",a:"Like Grid Aggregate methods, the Java SequenceIterator Window Aggregate methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  The difference in how Window Aggregate methods determine their sliding window interval is described ...",t:"Window Aggregate Java SequenceIterator Methods"},"1658":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/HashAgg_Methods.htm",a:"The Hash Aggregate Java SequenceIterator methods take various input arguments and return a GroupByResult result for the grouping values and groups for the group aggregates. The GroupByResult can then be converted to a SequenceIterator by calling its getIterator() method. When finished, the ...",t:"Hash Aggregate Java SequenceIterator Methods"},"1659":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/CumulativeAgg_Methods.htm",a:"All Cumulative Aggregate Java SequenceIterator methods produce a result sequence in which the value of each element is the result of the specified operation on all of the preceding elements. Example Following is an example code snippet demonstrating a cumulative aggregate function:          \n        ...",t:"Cumulative Aggregate Java SequenceIterator Methods"},"1660":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Manipulator_Methods.htm",a:"The manipulator Java SequenceIterator methods take a variety of  sequence arguments and produce result sequences  as described in the table below: Example Following is an example code snippet demonstrating sequence manipulator methods:          \n    public static void windowAggregate(Connection ...",t:"Manipulator Java SequenceIterator Methods"},"1661":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Conversion_Operators.htm",a:"Conversion Java SequenceIterator Methods The conversion Java SequenceIterator method converts the elements of the object\u0027s sequence to the desired type. ",t:"Conversion Java SequenceIterator Methods"},"1662":{i:0.000140221277807976,u:"../Content/Programming/Java/Classes/Analytics_Methods/Miscellaneous_Methods.htm",a:"The miscellaneous Java SequenceIterator methods take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below: Example Following is an example code snippet demonstrating the sort method:          \n    public static void sort(Connection con)\n  ...",t:"Miscellaneous Java SequenceIterator Methods"},"1663":{i:0.000918531950305367,u:"../Content/Programming/Java/Classes/Statistic.htm",a:"The Java  Statistic  Class  The Statistic  class is used to provide runtime database statistics . For an overview see page  Java Classes Class Definition  \n    public  class Statistic\n    {\n        public static class ClassStat {\n            public long ObjectsCount;\n            public int ...",t:"The Java Statistic Class "},"1664":{i:0.000569982035474148,u:"../Content/Programming/Java/Classes/Constants/Statistic_Constants.htm",a:"The following constant values are defined in the Statistic class: Class Definition  \n    public class Statistic\n    {\n        ...\n         \n        /* Define index characteristics */\n        final static int MCO_IDXST_TYPE_MEM         = 0;      /* In-memory index */\n        final static int ...",t:"The Java Statistic Constants"},"1665":{i:0.00012163265184034,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Classes.htm",a:"The Java SQL Classes For an overview see page  Java Class Please use the links below to view  the individual class definitions:",t:"The Java SQL Classes"},"1666":{i:0.000280848906282955,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Aggregator.htm",a:"The Java  SqlAggregator  Class  SqlAggregator provides a remote database connection for execution of SQL queries. For an overview see page  Java Classes Class Definition  \n    public  class SqlAggregator implements SqlConnection, java.io.Closeable\n    {\n        /**\n        * Constructor of the SQL ...",t:"The Java SqlAggregator Class "},"1667":{i:0.000280848906282955,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Cursor.htm",a:"The Java  SqlCursor  Class  SqlCursor is used to iterate through result of SQL query. For an overview see page  Java Classes Class Definition  \n    public  class SqlCursor implements Iterator\u003cSqlTuple\u003e, java.io.Closeable\n    {\n        /**\n        * Check if there is a next tuple.\n        */\n        ...",t:"The Java SqlCursor Class "},"1668":{i:0.000136402374979318,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Connection.htm",a:"The Java  SqlConnection  Interface SqlConnection provides a database connection for execution of SQL queries. For an overview see page  Java Classes Class Definition  \n    public interface SqlConnection\n    {\n        /**\n        * Execute SQL query.\n        * @param query SQL query with \u0027?\u0027 used as ...",t:"The Java SqlConnection Interface "},"1669":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_LocalConnection.htm",a:"The Java  SqlLocalConnection  Class  SqlLocalConnection provides  For an overview see page  Java Classes Class Definition  \n    public  class SqlLocalConnection extends Connection implements SqlConnection\n    {\n        /**\n        * Constructor of the local database connection.\n        * @param db ...",t:"The Java SqlLocalConnection Class "},"1670":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_RemoteConnection.htm",a:"The Java  SqlRemoteConnection  Class  SqlRemoteConnection provides  For an overview see page  Java Classes Class Definition  \n    public  class SqlRemoteConnection implements SqlConnection, java.io.Closeable\n    {\n \n        public static class OpenParameters\n        {\n            public String host ...",t:"The Java SqlRemoteConnection Class "},"1671":{i:0.000280848906282955,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_ResultSet.htm",a:"The Java  SqlResultSet  Class  SqlResultSet provides the result set of SQL query. For an overview see page  Java Classes Class Definition  \n    public  class SqlResultSet implements Iterable\u003cSqlTuple\u003e, java.io.Closeable\n    {\n        /**\n        * Get names of result columns\n        */\n        ...",t:"The Java SqlResultSet Class "},"1672":{i:0.000280848906282955,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Server.htm",a:"The Java  SqlServer Class  SqlServer is used to iterate through result of SQL query. For an overview see page  Java Classes Class Definition  \n    public  class SqlServer\n    {\n \n        public static class OpenParameters\n        {\n            public SqlLocalConnection conn;\n            public int ...",t:"The Java SqlServer Class "},"1673":{i:0.000280848906282955,u:"../Content/Programming/Java/Classes/SQL_Classes/SQL_Tuple.htm",a:"The Java  SqlTuple Class  SqlTuple provides access to the unit (row) of an SQL query result. For an overview see page  Java Classes Class Definition  \n    public  class SqlTuple\n    {\n        /**\n        * Get number of components in tuple\n        * @return number of components\n        */\n        ...",t:"The Java SqlTuple Class "},"1674":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/TL_Classes/LogReader.htm",a:"LogReader provides an eXtremeDB Transaction Logging transaction log reader. Class Definition  \n    public class LogReader\n    {\n        /**\n        *  Transaction log reader constructor.\n        *  @param con Connection to the pipe database or to the database where log is replayed\n        *  @param ...",t:"The Java LogReader Class"},"1675":{i:0.000266079183143977,u:"../Content/Programming/Java/Classes/TL_Classes/LogWriter.htm",a:"LogWriter provides an eXtremeDB Transaction Logging transaction log writer. Class Definition  \n    public class LogWriter\n    {\n        /**\n        *  Start each record with new disk page\n        */\n        public static final int LF_ALIGNED                = 0x01;\n \n        /**\n        *  Append to ...",t:"The Java LogWriter Class"},"1676":{i:0.00022984233035162,u:"../Content/Programming/Python_API.htm",a:"The eXtremeDB Python API consists of a set of classes that encapsulate the low-level C functions which make up the eXtremeDB  runtime. The usage of these classes is demonstrated in the  Python SDK Samples . For developers new to eXtremeDB, we recommend the Quick Start  tutorial  to quickly learn the ...",t:"Python API"},"1677":{i:0.000200233039488294,u:"../Content/Getting_Started/Quick_Start/QS_Python/QS_Python4.htm",a:"To perform operations on database objects containing  sequence fields the Python application uses  SequenceIterator methods and  tuples. Consider the following class Quote:  \n    class Quote \n    {\n        char\u003c8\u003e symbol;\n        sequence\u003ctime asc\u003e timestamp;\n        sequence\u003cfloat\u003e low;\n        ...",t:"Step 4: Using Sequence Fields"},"1678":{i:0.000170474427230281,u:"../Content/Programming/Python/Runtime_Libraries.htm",a:"The eXtremeDB Python Wrapper is a Python extension module. It consists of two parts: 1.\tThe Python interface module exdb.py which is written in Python and provides class definitions and interface methods for the extension module 2.\tThe eXtremeDB Python Wrapper \"core\" module which is written in C and ...",t:"Python Runtime Libraries"},"1679":{i:0.000203431477327891,u:"../Content/Programming/Python/Python_SDK_Samples.htm",a:"The  build procedure for the  Python SDK samples  on all supported platforms are described in the \"Getting Started\" section.  By default, all sample executables are built in the eXtremeDB/target/bin directory so, after building the sample(s), it is convenient to cd to target/bin to run the sample ...",t:"Programming Examples in Python"},"1680":{i:0.000515522653144245,u:"../Content/Programming/Python/SDK_Samples/Python_Core_Samples.htm",a:"Python Core samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"Python Core samples"},"1681":{i:0.00040524471215724,u:"../Content/Programming/Python/SDK_Samples/Core/open.htm",a:"Open This sample demonstrates opening a database. How to Run In a console window run:  \n    open\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Open"},"1682":{i:0.000333399492355172,u:"../Content/Programming/Python/SDK_Samples/Core/operations.htm",a:"Operations This sample demonstrates basic operations on a database. How to Run In a console window run:  \n    operations\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Operations"},"1683":{i:0.000267698644669401,u:"../Content/Programming/Python/SDK_Samples/Core/types.htm",a:"Types This sample demonstrates working with different data types. How to Run In a console window run:  \n    types\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Types"},"1684":{i:0.000515522653144245,u:"../Content/Programming/Python/SDK_Samples/Python_Cluster_Samples.htm",a:"Python Cluster samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"Python Cluster samples"},"1685":{i:0.000559830630327522,u:"../Content/Programming/Python/SDK_Samples/Cluster/Cluster.htm",a:"Cluster This sample demonstrates a basic Cluster implementation. How to Run In a console window run:  \n    Cluster 2 0\n      Then in a second console window run:  \n    Cluster 2 1\n  But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Cluster"},"1686":{i:0.000515522653144245,u:"../Content/Programming/Python/SDK_Samples/Python_Sequence_Samples.htm",a:"Python Sequence Samples  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"Python Sequence Samples"},"1687":{i:0.000259548642736506,u:"../Content/Programming/Python/SDK_Samples/Sequences/seqbasic.htm",a:"Seqbasic This sample demonstrates use of the DB API to access an in-process local database. How to Run In a console window run:  \n    seqbasic\n      But it is more instructive to run one instance in your development environment debugger, stepping through the code.",t:"Seqbasic"},"1688":{i:0.000231182146462135,u:"../Content/Programming/Python/SDK_Samples/Sequences/seqapi.htm",a:"This sample demonstrates sequence operations using the Python API: inserting data to sequences, iterating over objects, and calling sequence functions. How to Run In a console window run:  \n    seqapi\n      But it is more instructive to run one instance in your development environment debugger, ...",t:"Seqapi"},"1689":{i:0.000231182146462135,u:"../Content/Programming/Python/SDK_Samples/Sequences/fintime.htm",a:"This sample demonstrates working with sequences using a financial tick database. It demonstrates a collection of ticks and several often used queries. How to Run In a console window run:  \n    fintime\n      But it is more instructive to run one instance in your development environment debugger, ...",t:"Fintime"},"1690":{i:0.000231182146462135,u:"../Content/Programming/Python/SDK_Samples/Sequences/nparray.htm",a:"This sample demonstrates using the Python API with numpy arrays to allow faster insert of values to sequences. Numpy is a widely used package for scientific computing with python. (Details can be found at  www.numpy.org.types ). How to Run In a console window run:  \n    nparray\n      But it is more ...",t:"Nparray"},"1691":{i:0.000170474427230281,u:"../Content/Programming/Python/Python_App_Development.htm",a:"Application Development with Python The eXtremeDB Python API consists of a set of  Python classes  which form a convenient wrapper for the lower-level C runtime libraries. For  general principles of eXtremeDB application  implementation using Python please use the links in the following table:",t:"Application Development with Python"},"1692":{i:0.000215358823213405,u:"../Content/Programming/Python/Python_Analytics_Methods.htm",a:" The eXtremeDB Python wrapper provides a library of analytics operations with  sequences implemented as methods of the SequenceIterator class.  Please use the links on the  Analytics Python Methods by Category  page to view detailed explanations of these methods. The examples in these pages use the ...",t:"Python Analytics Methods "},"1693":{i:0.000337468874954459,u:"../Content/Programming/Python/Analytics_Methods/Methods_By_Category.htm",a:"Analytics  Python SequenceIterator Methods by Category Please use the links below to view descriptions and examples of these methods by category:",t:"Analytics  Python SequenceIterator Methods by Category"},"1694":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Unary_Methods.htm",a:"The following unary SequenceIterator methods apply the specified operation on the object\u0027s sequence and return a sequence iterator of the same type. Example Following is an example code snippet demonstrating a unary operator method:      \n    cursor = con.cursor(\"Quote\", \"by_sym\")\n    for quote in ...",t:"Unary Python SequenceIterator Methods"},"1695":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Binary_Methods.htm",a:"The following binary methods  take an input sequence argument, and produce a result sequence of the same type by applying the specified operation on the object\u0027s sequence and the corresponding elements in the input sequence. If the two input sequence arguments are of different lengths the operation ...",t:"Binary Python SequenceIterator Methods"},"1696":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Comparison_Methods.htm",a:"The following comparison operators methods take an input sequence argument, and produce the boolean result sequence by applying the specified comparison operator on the object\u0027s sequence and the corresponding elements in the input sequence. If the two input sequence arguments are of different ...",t:"Comparison Python SequenceIterator Methods"},"1697":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Logical_Operators.htm",a:"The following logical operators methods (except not()) take an input sequence argument, and produce the boolean result sequence by applying the specified logical operator on the object\u0027s sequence and the corresponding elements in the input sequence. If the two input sequence arguments are of ...",t:"Logical Python SequenceIterator Methods"},"1698":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Conversion_Operators.htm",a:"Conversion Python SequenceIterator Methods The following conversion operators convert the elements of the object\u0027s sequence to the desired type. ",t:"Conversion Python SequenceIterator Methods"},"1699":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Collapse_Methods.htm",a:"The following collapse methods   take an input sequence argument, and produce a result sequence of   type double where the computed scalar result is the first element. The two input sequences must be of the same type. If the two input sequences are of different lengths the operation will be ...",t:"Collapse Python SequenceIterator Methods"},"1700":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Conditional_Methods.htm",a:"The following conditional methods   apply the object\u0027s boolean sequence to the input sequence(s). These methods are of the following types: Ternary operations iif() and if() which take two input sequence arguments then and else, and produce a result sequence of the same type by applying the boolean ...",t:"Conditional Python SequenceIterator Methods"},"1701":{i:0.000294864134582659,u:"../Content/Programming/Python/Analytics_Methods/Manipulator_Methods.htm",a:"The following sequence manipulator methods take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below: Example Following is an example code snippet demonstrating sequence manipulator methods:      \n    cursor = con.cursor(\"Quote\", ...",t:"Sequence Manipulator Python SequenceIterator Methods"},"1702":{i:0.000279343756374713,u:"../Content/Programming/Python/Analytics_Methods/Iterator_Methods.htm",a:"The iterator methods are used to insert values into, iterate over and extract elements from sequences. Some, like first(), last() and search() are used to extract the first, last or found elements from a  materialized sequence.    Example Following is an example code snippet demonstrating the use of ...",t:"Iterator Python SequenceIterator Methods"},"1703":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Top_Methods.htm",a:"The following Python functions take an integer argument n and produce result sequences of the top n elements as described in the table below: Example Following is an example code snippet demonstrating one of these functions:          \n    cursor = con.cursor(\"Quote\", \"by_sym\")\n    for quote in ...",t:"Top Python SequenceIterator Methods"},"1704":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Grand_Agg_Methods.htm",a:"All Grand Aggregate methods produce a double result sequence in which the first element contains the aggregate value, except for agg_count() which returns a uint8 sequence and the two methods agg_approxdc() and agg_approxdc_hash() which return uint4 sequences. Example Following is an example code ...",t:"Grand Aggregate Python SequenceIterator Methods"},"1705":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Group_Agg_Methods.htm",a:"All Group Aggregate methods take an input group_by sequence argument and produce a result sequence containing the calculated aggregate for each group. The object\u0027s sequence is split into groups based on the values in the group_by sequence which is expected to be ordered. Example Following is an ...",t:"Group Aggregate Python SequenceIterator Methods"},"1706":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Grid_Agg_Methods.htm",a:"All Grid Aggregate methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  Example Following is an example code snippet demonstrating a grid aggregate method:          \n    cursor = con.cursor(\"Quote\", \"by_sym\")\n    for quote in ...",t:"Grid Aggregate Python SequenceIterator Methods"},"1707":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Window_Agg_Methods.htm",a:"Like Grid Aggregate methods, all Window Aggregate methods take an integer interval argument and produce a result sequence containing the calculated aggregate for each interval.  The difference in how Window Aggregate methods determine their sliding window interval is described in the  Window versus ...",t:"Window Aggregate Python SequenceIterator Methods"},"1708":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Hash_Agg_Methods.htm",a:"Hash Aggregate methods take various input arguments and return two iterators: one for the grouping values and one for the group aggregates. Example Following is an example code snippet demonstrating how to use a hash aggregate function to calculate the average Close price for Volume values in ranges ...",t:"Hash Aggregate Python SequenceIterator Methods"},"1709":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Cumulative_Agg_Methods.htm",a:"All Cumulative Aggregate methods produce a result sequence which is of the same type as the object\u0027s sequence or of type double depending on the operation performed. The value of each element is the result of the specified operation on all of the preceding elements. Example Following is an example ...",t:"Cumulative Aggregate Python SequenceIterator Methods"},"1710":{i:0.000141803014051367,u:"../Content/Programming/Python/Analytics_Methods/Miscellaneous_Methods.htm",a:"Miscellaneous Python SequenceIterator Methods The following methods take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below:",t:"Miscellaneous Python SequenceIterator Methods"},"1711":{i:0.000175326203540701,u:"../Content/Programming/Python/Python_Classes.htm",a:"The Python Classes Please use the links below to view  the exdb module and individual class definitions:",t:"The Python Classes"},"1712":{i:0.00013094690556674,u:"../Content/Programming/Python/Classes/exdb.htm",a:"The Python exdb Module The exdb module provides the interface to an eXtremeDB database through the following methods:",t:"The Python exdb Module"},"1713":{i:0.000304052247724199,u:"../Content/Programming/Python/Classes/exdb/connect.htm",a:"Create a connection to one or more databases through an eXtremeSQL engine. Prototype  \n    Connection exdb.connect(dbname, port, nodes, nReplicas, maxConnectAttempts, \n            useConnectionPool=useConnectionPool,\n            txBufSize=txBufSize, localDomain=local, \n            ...",t:"exdb.connect"},"1714":{i:0.00013094690556674,u:"../Content/Programming/Python/Classes/Dictionary.htm",a:"The Dictionary class represents the database dictionary created from the schema definition. Instances of this class are not created directly but rather using the load_dictionary() method. The class has no methods but the following three properties that can be used to access the internal type ...",t:"The Python Dictionary Class"},"1715":{i:0.00013094690556674,u:"../Content/Programming/Python/Classes/Database.htm",a:"The Python Database Class The Database class provides the interface to an eXtremeDB database through the following methods:",t:"The Python Database Class"},"1716":{i:0.000374401335637827,u:"../Content/Programming/Python/Classes/Connection.htm",a:"The Python Connection Class The Connection class provides the following methods to manage the database Connection, Transactions and Cursors:",t:"The Python Connection Class"},"1717":{i:0.000174673058851198,u:"../Content/Programming/Python/Classes/Connection/startTransaction.htm",a:"Start a database transaction on this connection. For an overview see page  Python Connection Class Prototype  \n    Connection.startTransaction(type, priority)\n  Arguments Description This method starts a database transaction on this Connection. Note that nested transactions are not supported, so ...",t:"Connection.startTransaction"},"1718":{i:0.000174673058851198,u:"../Content/Programming/Python/Classes/Connection/cursor.htm",a:"Create a cursor for retrieving data on this connection. For an overview see page  Python Connection Class Prototype  \n    Connection.cursor()\n     \n    or\n        \n     \n    Connection.cursor(cls, idx)\n  Arguments Description This method has 2 different usage variants: 1) Calling cursor() without ...",t:"Connection.cursor"},"1719":{i:0.000145623909840482,u:"../Content/Programming/Python/Classes/MasterConnection.htm",a:"The Python MasterConnection Class The MasterConnection class extends the Connection class for HA applications.",t:"The Python MasterConnection Class"},"1720":{i:0.000167867685298805,u:"../Content/Programming/Python/Classes/RemoteConnection.htm",a:"The Python RemoteConnection Class The RemoteConnection class represents a remote SQL connection. It provides the following methods:",t:"The Python RemoteConnection Class"},"1721":{i:0.000167867685298805,u:"../Content/Programming/Python/Classes/DistributedConnection.htm",a:"The Python DistributedConnection Class The DistributedConnection class represents a distributed SQL connection. It provides the following methods:",t:"The Python DistributedConnection Class"},"1722":{i:0.000301315953828947,u:"../Content/Programming/Python/Classes/AsyncDistributedConnection.htm",a:"The AsyncDistributedConnection class represents a distributed SQL connection. It provides the single methods execute():  \n    AsyncDistributedConnection.execute( queries, args) \n   The arguments queries and args are arrays of values. The queries array contains the SQL statements to be executed while ...",t:"The Python AsyncDistributedConnection Class"},"1723":{i:0.00411088829977903,u:"../Content/Programming/Python/Classes/Cursor.htm",a:"The Python Cursor Class The Cursor class represents a cursor to iterate through instances of a specified class, the result set of a find/search operation, or the result set from SQL queries. It provides the following methods:",t:"The Python Cursor Class"},"1724":{i:0.000717648738608438,u:"../Content/Programming/Python/Classes/Cursor/find.htm",a:"Find a database object by an index key value. For an overview see page  Python Cursor Class Prototype  \n    Cursor.find(cls, idx, value)\n  Arguments Description This method finds an object in the database using the specified index idx and key value. It returns an object instance or None if not ...",t:"Cursor.find"},"1725":{i:0.000717648738608438,u:"../Content/Programming/Python/Classes/Cursor/search.htm",a:"Locate the position of an object in the specified index. For an overview see page  Python Cursor Class Prototype  \n    Cursor.search(cls, idx, op, value)\n  Arguments Description This method locates the position of an object in the specified index idx applying the operation op with key value. It ...",t:"Cursor.search"},"1726":{i:0.000664608331597579,u:"../Content/Programming/Python/Classes/Cursor/execute.htm",a:"Execute a SQL query against the database. For an overview see page  Python Cursor Class Prototype  \n    Cursor.execute(query [,args])\n  Arguments Description This method executes a SQL query against the database. This is a DB API compliant call. Parameters are substituted using question marks, e.g. ...",t:"Cursor.execute"},});