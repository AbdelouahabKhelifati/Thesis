define({"1165":{i:0.000173949395120289,u:"../Content/Programming/C/Core_Functions/Generated/Field/Numeric/get_chars.htm",a:"classname_fieldname_get_chars(numeric or decimal) This function returns a numeric value in character string format. Prototype  \n    MCO_RET\tclassname_fieldname_get_chars(\t/*IN*/ classname *handle, \n                            /*OUT*/ char *buf, \n                            /*IN*/ uint2 buf_size);\n  ...",t:"classname_fieldname_get_chars"},"1166":{i:0.000162786433338327,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure.htm",a:"Generated Structure Field Functions The eXtremeDB structure database fields are of type structname where structname is a structure defined in the schema. Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated Structure Field Functions"},"1167":{i:0.000272057556380672,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure/erase.htm",a:"This function removes an the optional struct from the object layout.  Prototype  \n    MCO_RET\tclassname_fieldname_erase(\t/*IN*/ classname *handle );\n  Arguments Description The erase method removes an optional struct field from the object layout and all indexes the field is included into.  Return ...",t:"classname_fieldname_erase"},"1168":{i:0.000272057556380672,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure/read_handle.htm",a:"This function constructs a MCO_READ_ONLY handle to be used to read the elements of a structure, where the structure itself is an element of classname. Classhandle may have been constructed within the scope of either a MCO_READ_ONLY or MCO_READ_WRITE transaction. Prototype  \n    ...",t:"classname_structname_read_handle"},"1169":{i:0.000272057556380672,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure/write_handle.htm",a:"This function constructs a MCO_READ_WRITE handle that can be used to ‘put’ the elements of a structure, where the structure itself is an element of classname. Classhandle must have been constructed within the scope of a MCO_READ_WRITE transaction. Prototype  \n    ...",t:"classname_structname_write_handle"},"1170":{i:0.00512731384908951,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure/struct_read_handle.htm",a:"This function constructs a MCO_READ_ONLY handle to be used to read the elements of a structure, where the structure itself is an element of structhandle1 (nested structures). Structhandle1 may have been constructed within the scope of either a MCO_READ_ONLY or MCO_READ_WRITE transaction. Prototype ...",t:"classname_structname_read_handle"},"1171":{i:0.00471626933293321,u:"../Content/Programming/C/Core_Functions/Generated/Field/Structure/struct_write_handle.htm",a:"This function constructs a MCO_READ_WRITE handle that can be used to ‘put’ the elements of a structure, where the structure itself is an element of structname1 (nested structures). structhandle1 must have been constructed within the scope of a MCO_READ_WRITE transaction. Prototype  \n    ...",t:"classname_structname_write_handle"},"1172":{i:0.000162786433338327,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob.htm",a:"Generated BLOB Field Functions The eXtremeDB BLOB database fields are of type blob (Binary Large OBject). Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated BLOB Field Functions"},"1173":{i:0.00013892879182145,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/put_blob.htm",a:"This function assigns a value into a blob field. Prototype  \n    MCO_RET\tclassname_fieldname_put(\t/*IN*/ classname *handle, \n                          /*IN*/ const void *value, \n                          /*IN*/ uint4 len );\n  Arguments Description This form of the function applies to blob elements. ...",t:"classname_fieldname_put(blob)"},"1174":{i:0.00013892879182145,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/append_blob.htm",a:"This function appends the supplied value to the end of the blob element. Prototype  \n    MCO_RET\tclassname_fieldname_append(\t/*IN*/ classname *handle, \n                            /*IN*/ const void *value, \n                            /*IN*/ uint4 len );\n  Arguments Description This function applies ...",t:"classname_fieldname_append(blob)"},"1175":{i:0.000163571711131623,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/get_blob.htm",a:"This function retrieves a value from a blob. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                          /*IN*/ uint4 start_offset, \n                          /*OUT*/ char *dest, \n                          /*IN*/ uint4 dest_size, \n                          ...",t:"classname_fieldname_get(blob)"},"1176":{i:0.00128931780828104,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/size_blob.htm",a:"The size function for a blob element returns the number of bytes in the blob. Prototype  \n    MCO_RET\tclassname_fieldname_size(\t/*IN*/ classname *handle, \n                           /*OUT*/ uint4 *size );\n  Arguments Description The size function for a blob element returns the number of bytes in the ...",t:"classname_fieldname_size(blob)"},"1177":{i:0.00013892879182145,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/struct_put_blob.htm",a:"This form of the function applies to elements that are of type blob. Handle returned from classname_structname_write_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_put(\t/*IN*/ structname *handle,  \n                           /*IN*/ const void *value, \n                           /*IN*/ uint4 ...",t:"structname_fieldname_put(blob)"},"1178":{i:0.00013892879182145,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/struct_append.htm",a:"This function appends the supplied value to the end of the blob element. Prototype  \n    MCO_RET\tstructname_fieldname_append(\t/*IN*/ classname *handle, \n                            /*IN*/ const void *value, \n                            /*IN*/ uint4 len );\n  Arguments Description This function ...",t:"structname_fieldname_append(blob)"},"1179":{i:0.00013892879182145,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/struct_get_blob.htm",a:"This form of the function applies to elements that are of type blob. Handle is returned from classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_get(\t/*IN*/ structname *handle, \n                         /*IN*/ uint4 start_offset, \n                         /*OUT*/ char ...",t:"structname_fieldname_get(blob)"},"1180":{i:0.00128931780828104,u:"../Content/Programming/C/Core_Functions/Generated/Field/Blob/struct_size_blob.htm",a:"The size function for a blob element returns the number of bytes in the blob. Handle is returned from classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_size(\t/*IN*/ structname *handle, \n                           /*OUT*/ uint4 *size );\n  Arguments Description The size ...",t:"structname_fieldname_size(blob)"},"1181":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/first.htm",a:"This function returns the first element in the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_first(\t/*IN*/ classname *handle, \n                            /*IN*/ TYPE *value );\n  Arguments Description This function applies to sequence fields. The  function returns the first element in the ...",t:"classname_fieldname_first"},"1182":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/last.htm",a:"This function returns the last element in the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_last(\t/*IN*/ classname *handle, \n                            /*IN*/ TYPE *value );\n  Arguments Description This function applies to sequence fields. The  function returns the last element in the ...",t:"classname_fieldname_last"},"1183":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/append.htm",a:"This function appends the supplied values to the end of the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_append(\t/*IN*/ classname *handle, \n                            /*IN*/ TYPE *values, \n                            /*IN*/ mco_size_t n_items );\n  Arguments Description This function ...",t:"classname_fieldname_append"},"1184":{i:0.000512467907504607,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/append_nullable.htm",a:"This function appends the supplied values, including nulls, to the end of the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_append_nullable(\t/*IN*/ classname *handle, \n                            /*IN*/ TYPE *values, \n                            /*IN*/ mco_size_t n_items,\n                    ...",t:"classname_fieldname_append_nullable"},"1185":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/insert.htm",a:"This function inserts the supplied values into the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_insert(\t/*IN*/ classname *handle, \n                            /*IN*/ mco_seq_no_t pos,\n                            /*IN*/ TYPE *values, \n                            /*IN*/ mco_size_t n_items ...",t:"classname_fieldname_insert"},"1186":{i:0.000512467907504607,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/insert_nullable.htm",a:"This function inserts the supplied values, including nulls, into the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_insert_nullable(\t/*IN*/ classname *handle, \n                            /*IN*/ mco_seq_no_t pos,\n                            /*IN*/ TYPE *values, \n                            ...",t:"classname_fieldname_insert_nullable"},"1187":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/delete.htm",a:"This function deletes elements from the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_delete(\t classname *handle, \n                             mco_seq_no_t from,\n                            mco_seq_no_t till );\n  Arguments Description This function applies to sequence fields. Return Codes ...",t:"classname_fieldname_delete"},"1188":{i:0.000527848100772939,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/search.htm",a:"This function searches for matching sequence elements within a specified range. Prototype  \n    MCO_RET\tclassname_fieldname_search(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h iterator,\n                             TYPE low, \n                            ...",t:"classname_fieldname_search"},"1189":{i:0.000137207120312508,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/join.htm",a:"This function joins a specified sequence to the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_join(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h result,\n                            mco_seq_iterator_h join_with);\n  Arguments Description This function applies to ...",t:"classname_fieldname_join"},"1190":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/count.htm",a:"This function returns the count of elements in the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_count(\t/*IN*/ classname *handle, \n                            mco_seq_no_t count,\n                             );\n  Arguments Description This function applies to sequence fields. This function ...",t:"classname_fieldname_count"},"1191":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/map.htm",a:"This function maps this sequence to the specified sequence. Prototype  \n    MCO_RET\tclassname_fieldname_map(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h dst_iterator,\n                            mco_seq_iterator_h map_iterator );\n  Arguments Description This function ...",t:"classname_fieldname_map"},"1192":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/subseq.htm",a:"This function returns the specified elements of the sequence. Prototype  \n    MCO_RET\tclassname_fieldname_subseq(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h iterator,\n                            mco_seq_no_t from,\n                            mco_seq_no_t till, \n        ...",t:"classname_fieldname_subseq"},"1193":{i:0.000176107351062734,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/iterator.htm",a:"This function returns the  sequence iterator for this field. Prototype  \n    MCO_RET\tclassname_fieldname_iterator(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h iterator\n                             );\n  Arguments Description This function applies to sequence fields. The ...",t:"classname_fieldname_iterator"},"1194":{i:0.000137207120312508,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/from_cursor.htm",a:"This function returns the  sequence iterator for this field from a cursor. Prototype  \n    MCO_RET\tclassname_fieldname_from_cursor( mco_trans_h trans, \n                            mco_seq_iterator_h iterator,\n                            mco_cursor_h cursor\n                             );\n  Arguments ...",t:"classname_fieldname_from_cursor"},"1195":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/project.htm",a:"This function projects this sequence to the specified sequence. Prototype  \n    MCO_RET\tclassname_fieldname_project(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h dst,\n                            mco_seq_iterator_h src \n                             );\n  Arguments ...",t:"classname_fieldname_project"},"1196":{i:0.000140503877543916,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence/store.htm",a:"This function copies the specified sequence to this sequence. Prototype  \n    MCO_RET\tclassname_fieldname_store(\t/*IN*/ classname *handle, \n                            mco_seq_iterator_h src\n                             );\n  Arguments Description This function applies to sequence fields. The ...",t:"classname_fieldname_store"},"1197":{i:0.000353677860353424,u:"../Content/Programming/C/Core_Functions/Generated/Event.htm",a:"Event statements in the database schema  declare events that the application will be notified of, such as: adding a new object, deleting an object, updating an object or a specified field of an object (with the exception of array and vector fields), and checkpoint events. The  DDL compiler  ...",t:"Generated Event Handlers"},"1198":{i:0.000517888898618941,u:"../Content/Programming/C/Core_Functions/Generated/Event/register_handler_add_delete.htm",a:"This function registers a synchronous event handler for an add, delete or checkpoint event. Prototype  \n    MCO_RET\tmco_register_eventname_handler(\t/*IN*/ mco_trans_h trans, \n                             /*IN*/ mco_eventname_handler, \n                             /*IN*/ void *param);\n  Arguments ...",t:"mco_register_eventname_handler()"},"1199":{i:0.000472759897569291,u:"../Content/Programming/C/Core_Functions/Generated/Event/register_handler_update.htm",a:"mco_register_eventname_handler(update events) This function registers a call-back function that the runtime will invoke whenever the update event eventname occurs.  Prototype  \n    MCO_RET\tmco_register_eventname_handler(\t/*IN*/ mco_trans_h trans, \n                            /*IN*/ ...",t:"mco_register_eventname_handler(update)"},"1200":{i:0.000425760151392901,u:"../Content/Programming/C/Core_Functions/Generated/Event/unregister_eventname_handler.htm",a:"This function unregisters a call-back function that you previously registered. Prototype  \n    MCO_RET\tmco_unregister_eventname_handler(\t/*IN*/ mco_trans_h trans, \n                              /*IN*/ mco_eventname_handler);\n  Arguments Description This function unregisters a call-back function that ...",t:"mco_unregister_eventname_handler"},"1201":{i:0.000338910684199785,u:"../Content/Programming/C/Core_Functions/Generated/Index.htm",a:"Generated Index Functions The following functions are generated for each index (classname_indexname) specified in the schema:",t:"Generated Index Functions"},"1202":{i:0.000189105119030427,u:"../Content/Programming/C/Core_Functions/Generated/Index/create.htm",a:"classname_indexname_create This function builds the tree index for an index declared as voluntary. Prototype  \n    MCO_RET\tclassname_indexname_create(\t/*IN*/ mco_trans_h trans );\n  Arguments Description This function builds the tree index for an index declared as voluntary. Return Codes  ",t:"classname_indexname_create"},"1203":{i:0.000189105119030427,u:"../Content/Programming/C/Core_Functions/Generated/Index/drop.htm",a:"classname_indexname_drop This function removes the tree index for an index declared as voluntary. Prototype  \n    MCO_RET\tclassname_indexname_drope(\t/*IN*/ mco_trans_h trans );\n  Arguments Description This function removes the tree index for an index declared as voluntary Return Codes  ",t:"classname_indexname_drop"},"1204":{i:0.000143700227895158,u:"../Content/Programming/C/Core_Functions/Generated/Index/index_cursor.htm",a:"classname_indexname_index_cursor (tree) This function creates a cursor for subsequent use by classname_indexname_search() and the cursor navigation methods. Prototype  \n    MCO_RET\tclassname_indexname_index_cursor(\t/*IN*/ mco_trans_h trans, \n                              /*OUT*/ mco_cursor_h ...",t:"classname_indexname_index_cursor(tree)"},"1205":{i:0.000532967620051311,u:"../Content/Programming/C/Core_Functions/Generated/Index/find.htm",a:"This function  searches the database based on an exact match of index values. Prototype  \n    MCO_RET\tclassname_indexname_find(\t/*IN*/ mco_trans_h trans, \n                         /*IN*/ \u003ctype\u003e [*]param1, \n                         [/*IN*/ uint2 len1,], \n                         [/*IN*/ \u003ctype\u003e ...",t:"classname_indexname_find"},"1206":{i:0.000949614246171875,u:"../Content/Programming/C/Core_Functions/Generated/Index/search.htm",a:"Search methods search the database based on a supplied opcode. Subsequent to the search operation, the cursor is positioned at the first object that matches the given parameters. Prototype  \n    MCO_RET\tclassname_indexname_search(\t/*IN*/ mco_trans_h trans,\n                           /*INOUT*/ ...",t:"classname_indexname_search"},"1207":{i:0.00013415771577451,u:"../Content/Programming/C/Core_Functions/Generated/Index/pattern_size.htm",a:"Prior to using the pattern search interfaces, you need to allocate a buffer that is used for a state machine within eXtremeDB during pattern search navigation. You pass the buffer to classname_indexname_pattern_search() and classname_indexname_pattern_next(). It’s your responsibility to free the ...",t:"classname_indexname_pattern_size"},"1208":{i:0.00016266633349742,u:"../Content/Programming/C/Core_Functions/Generated/Index/pattern_search.htm",a:"This function initiates the pattern search and, if successful, returns the handle in the obj parameter of the first object that matches the pattern. Prototype  \n    MCO_RET\tclassname_indexname_pattern_search(\t/*IN*/ mco_trans_h trans,\n                               /*IN*/ void *buf, \n                ...",t:"classname_indexname_pattern_search"},"1209":{i:0.00020875530053048,u:"../Content/Programming/C/Core_Functions/Generated/Index/pattern_next.htm",a:"This function initiates the pattern search and, if successful, returns the handle in the obj parameter of the first object that matches the pattern. Prototype  \n    MCO_RET\tclassname_indexname_pattern_next(\t/*IN*/ mco_trans_h trans, \n                              /*IN*/ void *buf, \n                  ...",t:"classname_indexname_pattern_next"},"1210":{i:0.000143700227895158,u:"../Content/Programming/C/Core_Functions/Generated/Index/locate.htm",a:"This function uses the element values of the object referenced by handle to position the tree index internal pointers. Prototype  \n    MCO_RET\tclassname_indexname_locate(\t/*IN*/ mco_trans_h trans, \n                          /*INOUT*/ mco_cursor_h cursor, \n                          /*IN*/ classname ...",t:"classname_indexname_locate"},"1211":{i:0.000143700227895158,u:"../Content/Programming/C/Core_Functions/Generated/Index/compare.htm",a:"This function compares the value(s) referenced by the current position of the index cursor with value(s) supplied by the application. Prototype  \n    MCO_RET\tclassname_indexname_compare(\t/*IN*/ mco_trans_h trans, \n                           /*IN*/ mco_cursor_h cursor, \n                           ...",t:"classname_indexname_compare(tree)"},"1212":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/next_match_patricia_scalar.htm",a:"classname_indexname_next_match(patricia)(scalar) This function advances the cursor c to the next record matching the key value specified in ‘mask\u0027. Prototype  \n    MCO_RET\tclassname_indexname_next_match(\t/*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n                     ...",t:"classname_indexname_next_match(patricia/scalar)"},"1213":{i:0.000919712519617682,u:"../Content/Programming/C/Core_Functions/Generated/Index/next_match_patricia_bitarray.htm",a:"classname_indexname_next_match(patricia)(bit array) This function advances the cursor c to the next record matching the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_next_match( /*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n                  ...",t:"classname_indexname_next_match(patricia/bit array)"},"1214":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/next_match_patricia_string_vector.htm",a:"This function advances the cursor c to the next record matching the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_next_match( /*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n                             /*IN*/ char * mask,\n                     ...",t:"classname_indexname_next_match(patricia)(string)(vector)"},"1215":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/prefix_match_patricia_scalar.htm",a:"classname_indexname_prefix_match(patricia)(scalar) This function finds the first object whose index matches the number of bits (specified in argument ‘number_of_bits’) in the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_prefix_match( /*IN*/ mco_trans_h t, \n              ...",t:"classname_indexname_prefix_match(patricia/scalar)"},"1216":{i:0.000919712519617682,u:"../Content/Programming/C/Core_Functions/Generated/Index/prefix_match_patricia_bitarray.htm",a:"classname_indexname_prefix_match(patricia)(bit array) This function finds the first object whose index matches the number of bits (specified in argument ‘number_of_bits’) in the key value specified in ‘mask’ Prototype  \n    MCO_RET\tclassname_indexname_prefix_match( /*IN*/ mco_trans_h t, \n            ...",t:"classname_indexname_prefix_match(patricia/bit array)"},"1217":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/prefix_match_patricia_string_vector.htm",a:"classname_indexname_prefix_match(patricia)(string/vector) This function finds the first object whose index matches the number of bits (specified in argument ‘number_of_bits’) in the key value specified in ‘mask’ Prototype  \n    MCO_RET\tclassname_indexname_prefix_match( /*IN*/ mco_trans_h t, \n        ...",t:"classname_indexname_prefix_match(patricia) (string/vector)"},"1218":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/longest_match_patricia_scalar.htm",a:"This function finds the last object whose index has the ‘deepest’ match (most matching bits) with the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_longest_match( /*IN*/ mco_trans_h t, \n                              /*IN*/ mco_cursor_h c, \n                              ...",t:"classname_indexname_longest_match(patricia)(scalar)"},"1219":{i:0.000919712519617682,u:"../Content/Programming/C/Core_Functions/Generated/Index/longest_match_patricia_bitarray.htm",a:"This function finds the last object whose index has the ‘deepest’ match (most matching bits) with the key value specified in ‘mask’. Prototype  \n      MCO_RET\tclassname_indexname_longest_match( /*IN*/ mco_trans_h t, \n                                 /*IN*/ mco_cursor_h c, \n                           ...",t:"classname_indexname_longest_match(patricia)(bit array)"},"1220":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/longest_match_patricia_string_vector.htm",a:"classname_indexname_longest_match(patricia)(string)(vector) This function finds the last object whose index has the ‘deepest’ match (most matching bits) with the key value specified in ‘mask’ Prototype  \n    MCO_RET\tclassname_indexname_longest_match( /*IN*/ mco_trans_h t, \n                           ...",t:"classname_indexname_longest_match(patricia)(string/vector)"},"1221":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/exact_match_patricia_scalar.htm",a:"This function finds the first object whose index matches the number of bits (specified in argument ‘number_of_bits’) in the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_exact_match( /*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n             ...",t:"classname_indexname_exact_match(patricia)(scalar)"},"1222":{i:0.000919712519617682,u:"../Content/Programming/C/Core_Functions/Generated/Index/exact_match_patricia_bitarray.htm",a:"This function finds the first object whose index matches the number of bits (specified in argument ‘number_of_bits’) in the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_exact_match( /*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n             ...",t:"classname_indexname_exact_match(patricia)(bit array)"},"1223":{i:0.000913016030855495,u:"../Content/Programming/C/Core_Functions/Generated/Index/exact_match_patricia_string_vector.htm",a:"This function finds the first object whose index matches the number of bytes (specified in argument ‘sizeofMask’) in the key value specified in ‘mask’. Prototype  \n    MCO_RET\tclassname_indexname_exact_match( /*IN*/ mco_trans_h t, \n                             /*IN*/ mco_cursor_h c, \n                ...",t:"classname_indexname_exact_match(patricia)(string/vector)"},"1224":{i:0.00013415771577451,u:"../Content/Programming/C/Core_Functions/Generated/Index/get_index_index_on_vector.htm",a:"This function returns the index identifier for the index associated with the cursor passed in ‘c’. Prototype  \n    MCO_RET\tclassname_indexname_get_index(\tmco_cursor_h c, \n                            /*OUT*/ uint2 * index);\n  Arguments Description This function returns the index identifier for the ...",t:"classname_indexname_get_index(index on vector)"},"1225":{i:0.000338910684199785,u:"../Content/Programming/C/Core_Functions/Generated/The_Top_Function.htm",a:"One of the most popular queries against time series data is to locate the top N performing instruments.  “Performing” could mean different conditions or aggregates. To meet this need  for the C and C++ APIs, a *_top() function is generated for all sequence fields. In addition to the usual  generated ...",t:"The Top() Function"},"1226":{i:0.000305772439383332,u:"../Content/Programming/C/SDK_Samples.htm",a:"SDK Samples The build procedure for  C API SDK samples  on all supported platforms are described in the \"Getting Started\" section. Please use the links below to view the description and specific instructions for individual samples grouped in the following sub-directories:",t:"C API Samples"},"1227":{i:0.000282757114558489,u:"../Content/Programming/C/SDK_Samples/Common_Helper_Functions.htm",a:"The SDK directory samples/native/common contains a number of C API header and source files that implement platform specific features and helper functions the are used by most of the SDK samples. These helper functions  perform operations common to most of the samples that have been isolated here to ...",t:"Common Helper Functions"},"1228":{i:0.000342843427666269,u:"../Content/Programming/C/SDK_Samples/Core_Samples.htm",a:"The  build procedures for the  C API SDK samples  on all supported platforms are described in the \"Getting Started\" section. Note that the native\\core directory contains some C++ sample sub-directories which can be viewed  here . By default, all sample executables are built in the target/bin ...",t:"C API Core Samples"},"1229":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/00-DDL.htm",a:"This directory contains a simple schema.mco, a minimal application and project file to compile the schema with  mcocomp .  The application simply displays a single line message, no database operations are performed. The project file indicates a minimal list of runtime libraries required for an ...",t:"00-DDL"},"1230":{i:0.000262342500581963,u:"../Content/Programming/C/SDK_Samples/Core_Samples/01-Rtconfig_Inmem.htm",a:"This sample displays runtime information for an all-in-memory database. The application demonstrates the use of functions mco_runtime_start(), mco_get_runtime_info()and mco_runtime_stop(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once ...",t:"01-Rtconfig_Inmem"},});