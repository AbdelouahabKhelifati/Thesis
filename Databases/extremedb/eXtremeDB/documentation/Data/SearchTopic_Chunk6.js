define({"408":{i:0.000401713942082555,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/Cluster_Params.htm",a:"xSQL Cluster Parameters The xSQL configuration file can be used to define  eXtremeDB Cluster parameters corresponding to the C API  mco_cluster_params_t structure.  For an overview see page  Configuration File Parameters The cluster_params section consists of a set of \"name : value\" pairs enclosed ...",t:"Cluster Parameters"},"409":{i:0.000901383664024823,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/SSL_Params.htm",a:"xSQL SSL Parameters The xSQL configuration file can be used to define global SSL parameters (corresponding to the C API  mco_ssl_params_t structure). Global SSL parameters are specified in the ssl_params section. Component-specific SSL parameters can be specified for eXtremeDB High Availability, ...",t:"SSL Parameters"},"410":{i:0.00018186700571166,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/IoT_Params.htm",a:"xSQL IoT Parameters The xSQL configuration file can be used to define IoT (active replication) parameters corresponding to the C API structures mco_iot_comm_params_t and mco_iot_replicator_params_t.  For an overview see page  Configuration File Parameters The iot_params section consists of a set of ...",t:"IoT Parameters"},"411":{i:0.000248476692313598,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/Perfmon.htm",a:"xSQL Performance Monitor Parameters The xSQL configuration file can be used to  activate the  Performance Monitor  in xSQL and to define its parameters. For an overview see page  Configuration File Parameters The perfmon section consists of a set of \"name : value\" pairs enclosed within braces. For ...",t:"Performance Monitor Parameters"},"412":{i:0.000654611747839833,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/Web_Services.htm",a:"The xSQL configuration file can be used to  run the embedded REST server and expose the Web Services REST API.  For an overview see page  Configuration File Parameters The rest section consists of a set of \"name : value\" pairs enclosed within braces. For example:   \n    rest : {\n        addr : ...",t:"xSQL Web Services REST Parameters"},"413":{i:0.000248476692313598,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/Trace_Params.htm",a:"xSQL Tracing Framework Parameters  The xSQL configuration file can be used to define eXtremeDB Tracing Framework parameters. (See the   C API Tracing Framework  page for further details).  For an overview see page  Configuration File Parameters The trace_params section consists of a set of \"name : ...",t:"Tracing Framework Parameters"},"414":{i:0.000378011369404776,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/XLog_Params.htm",a:"xSQL Statistics Logging Parameters The xSQL configuration file can be used to define  statistics logging parameters. For an overview see page  Configuration File Parameters The xlog_params section consists of a set of \"name : value\" pairs enclosed within braces. For example:   \n    xlog_params : {\n  ...",t:"Statistics Logging Parameters"},"415":{i:0.000248476692313598,u:"../Content/Users_Guides/xSQL/Startup_Options/Config_File_Sections/ExtremeDB_Params.htm",a:"xSQL Miscellaneous Parameters The xSQL configuration file can be used to define parameters that  determine eXtremeDB  runtime operation.  For an overview see page  Configuration File Parameters These parameters consist of \"name : value\" pairs that can appear anywhere in the configuration file ...",t:"Miscellaneous Parameters"},"416":{i:0.000513014963925959,u:"../Content/Users_Guides/xSQL/xSQL_Media_IO.htm",a:"The eXtremeDB  disk manager supports asynchronous I/O and different multi-file formats in xSQL as described in the following sections.   Asynchronous file I/O By default, AIO is disabled. In order to use the asynchronous I/O mode, the xSQL configuration file indicates AIO mode in the db_params ...",t:"Persistent Media I/O in xSQL"},"417":{i:0.000622527122851863,u:"../Content/Users_Guides/xSQL/xSQL_Commands.htm",a:"In addition to executing SQL statements interactively, xSQL accepts a number of specific commands that can be entered at the XSQL\u003e prompt. The  SDK Samples  provide many examples of command usage. The following table lists the xSQL commands with links providing additional explanation and/or ...",t:"xSQL Commands"},"418":{i:0.000222175511326117,u:"../Content/Users_Guides/xSQL/Commands/xSQL_Data_Export_Import.htm",a:"xSQL Data Export and Import Operations In addition the database  backup/restore commands , xSQL provides commands to save and load database snapshots, class data and metadata. These operations can also be performed through built-in SQL functions. For an overview see page  xSQL Commands Database ...",t:"Data Export and Import Operations"},"419":{i:0.00029047215394656,u:"../Content/Users_Guides/xSQL/Commands/xSQL_Cluster_Control.htm",a:"xSQL Cluster Control The following sections demonstrate a  set of cluster control commands are provided by xSQL to get information from, detach and attach cluster nodes.  For an overview see page  xSQL Commands Cluster info The cluster info command shows a list of the current cluster nodes and their ...",t:"Cluster Control"},"420":{i:0.000187776686010624,u:"../Content/Users_Guides/xSQL/Commands/xSQL_Commands_Misc.htm",a:"xSQL Miscellaneous Commands The following sections demonstrate a number of useful xSQL commands.  For an overview see page  xSQL Commands ha getmode When using xSQL as a eXtremeDB High Availability MASTER or REPLICA, the ha getmode displays the current HA role of the xSQL instance. For MASTER it ...",t:"Miscellaneous Commands"},"421":{i:0.00055773049944964,u:"../Content/Programming/xSQL/filebackup.htm",a:"Perform a file backup for a persistent database. For an overview see page  File_Backup Prototype      \n    XSQL\u003efilebackup dbFile, logFile, [nThreads]\n      Arguments Description This command copies the database and log file for a persistent database. The database can then be  \"restored\" by simply ...",t:"xSQL filebackup"},"422":{i:0.000620126345237704,u:"../Content/Users_Guides/xSQL/xSQL_Data_Export_Import.htm",a:"xSQL Data Export and Import Operations Database Online Backup The following xSQL commands are provided to backup and restore in-memory or persistent databases:  \n    XSQL\u003ebackup [TO] file_name [FULL|INCREMENTAL|AUTO] [[AS] label] \n        [WITH CIPHER=key [\u0027,\u0027 COMPRESSION=level ]];\n      The ...",t:"Data Export and Import Operations"},"423":{i:0.000852985715044004,u:"../Content/Users_Guides/xSQL/xSQL_Server_Instrumentation.htm",a:"xSQL Server Instrumentation xSQL is a highly configurable database server. To start xSQL as a server it is simply necessary to specify a port number for remote clients to connect to. For example, the following command (run in directory samples\\xsql\\scripts) starts xSQL as a server for an in-memory ...",t:"Server Instrumentation"},"424":{i:0.00022804021729838,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Storage.htm",a:"xSQL Storage Usage Sometimes it is useful to see the amount of database memory or persistent storage space that is available in the database. xSQL provides the mem and memddl commands for this purpose. For an overview see page  xSQL Server Instrumentation Command mem   The mem [-b|-k|-m|-g|-t|-p] ...",t:"Storage Usage"},"425":{i:0.000571990380671752,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Security.htm",a:"xSQL Security Parameters xSQL has the ability to password-protect a remote SQL connection.  For an overview see page  xSQL Server Instrumentation Password protection is implemented on the server by setting the  sql_auth_required parameter in the configuration file:  \n    sql_auth_required : true,\n   ...",t:"Security Parameters"},"426":{i:0.000509221502461832,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Log_Statistics.htm",a:"xSQL Statistics Logging When running as server, xSQL collects information to allow examination of the state of the server without the need to attach a debugger to the server process. Also basic  connection lock information  is provided to examine the states of the client connections. For an overview ...",t:"Statistics Logging"},"427":{i:0.000202193201805168,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_AIO.htm",a:"xSQL Asynchronous I/O Asynchronous file I/O can be enabled for optimizing write operations to persistent databases. (Please refer to page  Persistent Media I/O  for further explanation of AIO).   For an overview see page  xSQL Server Instrumentation The xSQL configuration file indicates AIO mode in ...",t:"Asynchronous I/O"},"428":{i:0.000202193201805168,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Auto_Restart.htm",a:"xSQL Automatic Restart It is possible to cause xSQL to automatically restart after it has been terminated abruptly. (Note that currently this feature is implemented only on Linux platforms.)  For an overview see page  xSQL Server Instrumentation When xSQL is running in server mode as a daemon (by ...",t:"Automatic Restart"},"429":{i:0.000202193201805168,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Recover.htm",a:"xSQL Recover It is possible to direct xSQL to connect to an existing database in shared memory. For an overview see page  xSQL Server Instrumentation Specifying the  command line option -daemon directs xSQL to connect to an existing database in shared memory (instead of creating new one) and start ...",t:"Recover"},"430":{i:0.00022804021729838,u:"../Content/Users_Guides/xSQL/Server_Instrumentation/xSQL_Xtop.htm",a:"xSQL xtop Utility The client-side utility xtop  can be used to display runtime statistics collected by xSQL on Unix/-Linux systems. (As it uses the Unix-based curses library, there is no Windows version of the utility.) The utility is run from the xtop.sh shell script as follows:  \n    ./xtop.sh ...",t:"xtop Utility"},"431":{i:0.00217524046033597,u:"../Content/Users_Guides/xSQL/xSQL_Network_Communications.htm",a:"As explained in the  Network Communications  page, eXtremeDB release 7.1.1795 and later allow the IPv6 address protocol for specifying node addresses. The following section describes issues that can be important for developers porting applications that used network communications in prior versions ...",t:"Managing Network Communications with xSQL"},"432":{i:0.000604554677091235,u:"../Content/Users_Guides/xSQL/xSQL_Locking_Info.htm",a:"A lock profiling method is implemented as a lightweight alternative to performance counters. eXtremeDB locks are wrapped in MCO_BEGIN_WAIT_EVENT / MCO_END_WAIT_EVENT macros that store the identifier of the lock inside an internal structure. It is done using a single assignment operation without any ...",t:"Connection Lock Profiling"},"433":{i:0.000224328119776276,u:"../Content/Users_Guides/xSQL/xSQL_Sharding.htm",a:"Sharding is a way of distributing database data across multiple servers or splitting a database into multiple instances (“shards”) within a single process. For multiple servers, sharding is accomplished via the McoDistributedSqlEngine. Creating multiple shards within a single process is managed ...",t:"Sharding with xSQL"},"434":{i:0.000425179521269565,u:"../Content/Users_Guides/xSQL/xSQL_Compression_Encryption.htm",a:"In-memory databases can be compressed to conserve memory and persistent database data and log files can be compressed to conserve disk space. Data can also be encrypted for security.  In-memory compression For in-memory database compression the  configuration file  option  db_params:mode_mask  must ...",t:"xSQL Data Compression and Encryption"},"435":{i:0.000318054291149341,u:"../Content/Programming/SQL/SQL_Analytics_Functions.htm",a:"eXtremeSQL  Analytics Functions The eXtremeDB for HPC package provides a library of analytics functions that operate on  sequences. Please use the links on the  SQL Analytics Functions by Category  page to view detailed explanations of these functions. There are also a number of examples in the  SQL ...",t:"eXtremeSQL Analytics Functions"},"436":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Introduction.htm",a:"McObject \u0027s eXtremeSQL is a high-performance implementation of the SQL programming language for interfacing with eXtremeDB databases. With eXtremeSQL McObject  targets the real-time enterprise software market for developers using SQL for application development in fields such as banking and ...",t:"eXtremeDB SQL  Introduction"},"437":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Product_Overview.htm",a:"eXtremeSQL is implemented in the C library libmcosql.  C and C++ developers link these libraries directly into their applications and can use the C language API functions, such as mcosql_execute_query() and mcosql_execute_statement(),or the rich set of C++ classes, such as McoSqlEngine for executing ...",t:"eXtremeDB SQL Product Overview"},"438":{i:0.000212706323598055,u:"../Content/Users_Guides/SQL/SQL_Language_Reference.htm",a:"SQL Language Reference The eXtremeSQL SQL language compliance is defined in the  Overview and Compliance  page. Please use the links in the following table to view the eXtremeSQL SQL language elements of interest:",t:"SQL Language Reference"},"439":{i:0.000147461424058333,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Overview_and_Compliance.htm",a:"eXtremeSQL is a high-performance implementation of the SQL programming language for interfacing with eXtremeDB databases. Built on the unsurpassed performance of eXtremeDB, and a SQL optimizer tuned for main memory database access, eXtremeSQL delivers blazingly fast processing of dynamic SQL ...",t:"eXtremeSQL Overview and Compliance"},"440":{i:0.000349210268540998,u:"../Content/Programming/SQL/DDL_Statements/Create_Table.htm",a:"An SQL table, which corresponds to an eXtremeDB class, is created using the SQL create table statement specifying the table name and column (field) definitions. For example:  \n    create table t (x integer);\n      Here the table (class) t is created with a single column (field) x of type integer. ...",t:"SQL Create Table"},"441":{i:0.000242506716450248,u:"../Content/Programming/SQL/DDL_Statements/Alter_Table.htm",a:"The alter table statement alters the definition of a table by modifying, adding, or dropping columns and constraints.  The alter table statements can be of two types: Those that don\u0027t change the table layout format but simply use the RENAME operation. Those that change the table format. These ...",t:"SQL Alter Table"},"442":{i:0.000168644049125173,u:"../Content/Programming/SQL/DDL_Statements/Drop_Table.htm",a:"The drop table statement requires the name of the table as specified in the eXtremeSQL Metatable . For example:  \n    drop table t;\n  The drop table statement deletes all data from the table and removes the table from the schema. For example, after dropping table Account, the SQL compiler no longer ...",t:"SQL Drop Table"},"443":{i:0.000222560728342783,u:"../Content/Programming/SQL/DDL_Statements/Create_Index.htm",a:"An SQL index, which corresponds to an underlying eXtremeDB index, can be created to improve lookup performance for specific queries.  (Please see  SQL Optimizer  for details about performance optimization using indexes.) Indexes are created using the SQL create index statement specifying the table  ...",t:"SQL Create Index"},"444":{i:0.000168644049125173,u:"../Content/Programming/SQL/DDL_Statements/Drop_Index.htm",a:"The drop index statement removes the index from the database. It requires the name of the index as specified in the eXtremeSQL Metatable . For example:  \n    drop index MyIndex;\n  Once an index is dropped any select statement accessing a column  that had been included in the index may be ...",t:"SQL Drop Index"},"445":{i:0.000477128477287944,u:"../Content/Programming/SQL/DDL_Statements/Create_Function.htm",a:"The create function statement is used to create a  User Defined Function . The complete syntax is as follows:  \n    CREATE FUNCTION name \"(\" { arg_name data_type  [ \",\" ... ] \")\"\n        RETURNS return_type [VOLATILE]\n \n    AS library_path [\",\" c_function_name ] | \n    IN \"\u0027\"language_name\"\u0027\" AS ...",t:"SQL Create Function"},"446":{i:0.00022302294149545,u:"../Content/Programming/SQL/DDL_Statements/Drop_Function.htm",a:"SQL Drop Function The drop function statement removes a UDF created with the  create function statement. For example:  \n    drop function load_trades;\n ",t:"SQL Drop Function"},"447":{i:0.00143425221546391,u:"../Content/Programming/SQL/DDL_Statements/Create_Synonym.htm",a:"The create synonym statement is used to create a synonym, which is an alternative name (or alias) for a table. Synonyms are supported for tables only. Synonyms provide both data independence and location transparency. Synonyms permit applications to function without modification regardless of which ...",t:"SQL Create Synonym"},"448":{i:0.00148903801039354,u:"../Content/Programming/SQL/DDL_Statements/Drop_Synonym.htm",a:"SQL Drop Synonym The drop synonym statement removes a synonym created with the  create synonym statement. For example:  \n    drop synonym t2;\n ",t:"SQL Drop Synonym"},"449":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_DML.htm",a:"The basic data manipulation SQL statements (SELECT, INSERT, UPDATE, DELETE) are used to query, insert, update and delete data. In addition, eXtremeSQL provides PREPARE and EXECUTE statements as well as BACKUP, RESTORE and VERIFY to manage  online incremental backup . The eXtremeSQL syntax and ...",t:"SQL Data Manipulation Language"},"450":{i:0.000742486871552194,u:"../Content/Programming/SQL/DML_Statements/Select.htm",a:"The SQL SELECT statement is used to display the contents of the specified columns in a table (known as “projection”).  eXtremeSQL supports almost all standard SQL constructions. (Please see the wikipedia page for a detailed description of the  select statement syntax .)  Some important eXtremeSQL ...",t:"SQL Select"},"451":{i:0.000244251765942845,u:"../Content/Programming/SQL/DML_Statements/Insert.htm",a:"     \n    INSERT [OR UPDATE] INTO table [(fields-list)] insert-data\n    fields-list::= field {, field }\n    field::= identifier { . identifier }\n    insert-data::= VALUES expressions-list | select-statement | record-data\n    expressions-list::= ( expression { , expression } )\n      The SQL INSERT ...",t:"SQL Insert"},"452":{i:0.000283632152025248,u:"../Content/Programming/SQL/DML_Statements/Update.htm",a:"     \n    UPDATE table SET assignments\n    [FROM fromlist]\n    [WHERE condition]\n    assignments::= assignment {, assignment}\n    assignment::= field = expression\n      An assignment expression setting the value of a column may use the old values of this and other columns in the table. The fromlist ...",t:"SQL Update"},"453":{i:0.000283632152025248,u:"../Content/Programming/SQL/DML_Statements/Delete.htm",a:" \n    DELETE FROM table [WHERE expression]\n          This SQL DELETE statement deletes zero or more rows of the specified table.  eXtremeSQL deletes are “searched deletes.” Currently, eXtremeSQL does not support “positioned delete” (i.e., the WHERE CURRENT OF cursor_name construction). The \"searched ...",t:"SQL Delete"},"454":{i:0.00101808283587276,u:"../Content/Programming/SQL/DML_Statements/Prepare.htm",a:"     \n    PREPARE \u003cidentifier\u003e AS \u003cselect-query\u003e\n      The prepare statement makes it possible to create a SQL statement that will be executed multiple times. Used together with the  execute statement, this saves processor time by eliminating the statement compilation step each time the statement is ...",t:"SQL Prepare"},"455":{i:0.00101808283587276,u:"../Content/Programming/SQL/DML_Statements/Execute.htm",a:"     \n    EXECUTE \u003cidentifier\u003e \"(\" \u003cparameter-value\u003e { , ... \u003cparameter-value\u003e } \")\"\n      The execute statement executes an SQL query previously defined and pre-compiled by the  prepare statement. This saves processor time by eliminating the statement compilation step each time the statement is ...",t:"SQL Execute"},"456":{i:0.000249400993778588,u:"../Content/Programming/SQL/DML_Statements/backup.htm",a:"Perform an incremental backup for an eXtremeDB database. For an overview see page  Incremental_Backup The statement has the following form:  \n    BACKUP [TO] file_name [FULL | INCREMENTAL | AUTO] [[AS] label]\n      Description This function performs an incremental backup inserting an optional label. ...",t:"SQL Backup"},"457":{i:0.00022280606238142,u:"../Content/Programming/SQL/DML_Statements/restore.htm",a:"Restore an eXtremeDB database from an incremental backup. For an overview see page  Incremental_Backup The statement has the following form:  \n    RESTORE [FROM] file_name [[TO] label]\n      Description This function restores a database from an incremental backup up to an optional label.  Example  \n ...",t:"SQL Restore"},"458":{i:0.00022280606238142,u:"../Content/Programming/SQL/DML_Statements/verify.htm",a:"Test the specified backup for validity. For an overview see page  Incremental_Backup The statement has the following form:  \n    VERIFY FILE file_name LABEL label [WITH CIPHER=key]\n      Description This function tests the specified backup for validity by reading the backup records one at a time and ...",t:"SQL Verify"},"459":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Features.htm",a:"eXtremeSQL Features The eXtremeSQL syntax and detailed information for the following topics are provided in separate pages. Please use the links below to view the individual topics:",t:"eXtremeSQL Features"},"460":{i:0.000222057882420882,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Functions/Window_Functions.htm",a:"A “Window function” is a variation on an aggregation function. Where an aggregation function, like SUM() and AVG(), takes n inputs and returns a single value, a window function returns n values. For example, consider the simple table defined as:  \n    CREATE TABLE test(i int);\n    INSERT INTO test ...",t:"eXtremeSQL Window Functions"},"461":{i:0.000136614800614326,u:"../Content/Users_Guides/SQL/SQL_Features/Covering_Indexes.htm",a:"As described in the  eXtremeDB User Guide , covering indexes can significantly improve lookup performance for some access patterns on transient classes only. eXtremeSQL provides support for the covering index as well. For example, for a table defined as:      \n    create table Tab (string name, ...",t:"eXtremeSQL  Covering Indexes"},"462":{i:0.000136614800614326,u:"../Content/Users_Guides/SQL/SQL_Features/Autocheckpoint.htm",a:"Normally, in order for an application (including an SQL client or server) to \"see\" the modifications made in the current transaction, it is necessary to call a checkpoint  API, for example  mco_trans_checkpoint(). When the autocheckpoint feature is enabled, the SQL engine checkpoints the transaction ...",t:"eXtremeSQL  Autocheckpoint"},"463":{i:0.000136614800614326,u:"../Content/Users_Guides/SQL/SQL_Features/Limit.htm",a:"The LIMIT expression allows one to limit the number of result set rows in a query. For example:  \n    SELECT contact_id, last_name, first_name\n    FROM contacts\n    WHERE website = \u0027TechOnTheNet.com\u0027\n    ORDER BY contact_id DESC\n    LIMIT 5;\n      will select the first 5 records  from the contacts ...",t:"eXtremeSQL  Limit"},"464":{i:0.000136614800614326,u:"../Content/Users_Guides/SQL/SQL_Features/SQL_Sequence_Parallelism.htm",a:"eXtremeSQL  provides support for the parallel processing of  sequences  implemented through a thread pool in the SQL engine that can optimize performance for sequence operations in multi-processor environments. The thread pool allows sequence functions to split sequences into equal parts across ...",t:"eXtremeSQL Sequence Parallelism"},"465":{i:0.000430950952314629,u:"../Content/Users_Guides/SQL/SQL_Features/Functions_Preload.htm",a:"For persistent databases, it can be a significant optimization in some cases to preload  C++ User Defined Functions  into memory from external dynamic load libraries. Specifically, the performance gain can be achieved when there are not too many UDF\u0027s in the database (all of which are used) and it ...",t:"eXtremeSQL  Functions Preload"},"466":{i:0.000209271793547399,u:"../Content/Users_Guides/SQL/SQL_Features/Shuffle_Join.htm",a:"eXtremeSQL  implements the classical map-reducing algorithm \"shuffle join\" when performing a join between  tables. For example, consider two tables that need to be joined with a statement like the following:  \n    select * from A join B on A.id = B.id;\n                \n       Here first the outer ...",t:"eXtremeSQL Shuffle Join"},"467":{i:0.000136614800614326,u:"../Content/Users_Guides/SQL/SQL_Features/ANSI_Standards.htm",a:"eXtremeSQL provides a SQL-89 compatible query language with many extensions: \tArrays \tStructures  References \tSupport of all C++ built-in types \tUser-defined functions Also there are some incompatibilities with the ANSI standard: \tAssigning null values to columns of some types is not supported. ...",t:"eXtremeSQL and ANSI Standards"},"468":{i:0.00012163265184034,u:"../Content/Users_Guides/SQL/SQL_System_Information.htm",a:"The eXtremeSQL  runtime and xSQL provide detailed system information available to SQL sessions. This runtime information consists of : Server status including the IP-Address, port and status of all connected clients Memory consumption and result set size Current wall-time, SQL statement execution ...",t:"eXtremeSQL System Information"},"469":{i:0.000362501624340826,u:"../Content/Users_Guides/SQL/SQL_Metatable.htm",a:"The eXtremeSQL Metatable is a system maintained table that contains information about all database objects (tables, fields, indexes) defined for a given database. It can be accessed through the SQL select statement. For example the following command displays the data for a simple table Account with ...",t:"The eXtremeSQL Metatable"},"470":{i:0.00012163265184034,u:"../Content/Users_Guides/SQL/SQL_Statistic.htm",a:"The eXtremeSQL Statistic table is a system maintained table that contains storage information about the contents of database tables. It can be accessed through the SQL select statement. For example the following command displays the memory occupied by 3 rows in a simple table Account:  \n    ...",t:"The eXtremeSQL Statistic Table"},"471":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details.htm",a:"eXtremeSQL Implementation Details The eXtremeSQL syntax and detailed information for the following topics are provided in separate pages. Please use the links below to view the individual topics:",t:"eXtremeSQL Implementation Details"},"472":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Changing_Schema.htm",a:"As mentioned in the  SQL DDL page, the SQL ALTER TABLE statement can be used to change a table format. But in order to access a table that has been modified in this way from an application using a non-SQL API, the database dictionary (the binary form of the schema) containing the table redefinition ...",t:"Changing the eXtremeSQL Database Schema"},"473":{i:0.000149954643484914,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Autoid_References.htm",a:"eXtreme SQL Autoid References As discussed in the  eXtremeDB User Guide , an autoid can be defined for a table to provide a unique number  that is generated automatically when a new row is inserted. This type of internally incremented number is known in some popular DBMSs as an \"auto-increment\", ...",t:"eXtremeSQL Autoid References"},"474":{i:0.000764177906811731,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Stored_Procedures.htm",a:"eXtremeSQL supports “stored procedures” by allowing developers to create their own Lua User-Defined Functions (UDF). An eXtremeSQL UDF can also be written in Python or C/C++. These methods are described in the sections below. The eXtremeSQL server provides a service (an internal function) that lists ...",t:"eXtremeSQL User Defined Functions"},"475":{i:0.000378472762964755,u:"../Content/Users_Guides/SQL/Lua/Lua_Users_Guide.htm",a:"eXtremeSQL supports the Lua programming language using the LuaJIT translator.  The LuaJIt 2.1.0-beta3 is recommended and can be found at  http://luajit.org/ . LuaJIT is a low-level scripting language that is translated directly to machine code; also a low-level FFI interface is used internally to ...",t:"Using Lua with eXtremeSQL"},"476":{i:0.000291148853056245,u:"../Content/Users_Guides/SQL/Lua/Quick_Start.htm",a:"In order to use User Defined Functions (UDF)  in Lua, some environment variables need first to be set: LUA_PATH: Must be set according to the rules for the LUA_PATH setting specified in the Lua documentation (see  https://www.lua.org/pil/8.1.html ). For example:   \n    ...",t:"Lua Quick Start"},"477":{i:0.000157377489214653,u:"../Content/Users_Guides/SQL/Lua/Data_Types.htm",a:"Lua Data Types Lua has a limited set of data types. The following table shows how eXtremeSQLdata types are represented in Lua:",t:"Lua Data Types"},"478":{i:0.000157377489214653,u:"../Content/Users_Guides/SQL/Lua/User_Defined_Functions.htm",a:"Lua is the best choice for writing User Defined Functions (UDF\u0027s) for eXtremeSQL because they are embedded into the server and execute in the context of the server, making data processing as close as possible to the data. As a UDF is a part of a query, it is performed in the context of a particular ...",t:"Lua User Defined Functions"},});