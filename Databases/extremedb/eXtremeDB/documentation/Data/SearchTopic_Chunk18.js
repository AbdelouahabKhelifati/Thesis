define({"1231":{i:0.000236296240100046,u:"../Content/Programming/C/SDK_Samples/Core_Samples/01-Rtconfig_Mixed.htm",a:"This sample displays runtime information for a disk-based hybrid database (containing persistent and transient classes). The application demonstrates the use of functions mco_runtime_start(), mco_get_runtime_info()and mco_runtime_stop(). How to Run See instructions  here  on how to build this and ...",t:"01-rtconfig_mixed"},"1232":{i:0.000804422944642149,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Conv.htm",a:"This sample opens, displays runtime information, and closes a conventional memory database. The application demonstrates how to initialize a single memory device for the call to mco_db_open_dev(). How to Run See instructions  here  on how to build this and other samples on your development platform. ...",t:"02-Open_Conv"},"1233":{i:0.000838482867227939,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Convhv.htm",a:"This sample opens a conventional memory database and the HTTP Viewer. The application demonstrates how to invoke the eXtremeDB HTTP Viewer via functions mcohv_start() and mcohv_stop(). Note that the Uniform Data Access  (UDA) layer is necessary for the HTTP interface. The sample also demonstrates ...",t:"02-Open_Convhv"},"1234":{i:0.000809405748851559,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Dbextend.htm",a:"This sample opens and extends a conventional memory database. The application demonstrates the use of an array of memory devices and the function mco_db_extend_dev(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be ...",t:"02-Open_Dbextend"},"1235":{i:0.000809717577593072,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Disk_File.htm",a:"This sample opens a database using FILE memory devices. The application demonstrates how to initialize an array of memory devices for a typical disk-based (persistent) database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"02-Open_Disk_File"},"1236":{i:0.00100334382411926,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Disk_Multifile.htm",a:"This sample opens a database using MULTIFILE memory devices. The application demonstrates how to initialize an array of memory devices for a multi-file disk-based (persistent) database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once ...",t:"02-Open_Disk_Multifile"},"1237":{i:0.00100334382411926,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Disk_Raid.htm",a:"This sample opens a database using RAID memory devices. The application demonstrates how to initialize an array of memory devices for a RAID disk-based (persistent) database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"02-Open_Disk_Raid"},"1238":{i:0.000791609414910388,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Hybrid.htm",a:"This sample opens a hybrid  database using 1 or 4 memory devices depending on the runtime settings determined from the database schema and whether the sample is linked with disk-based or in-memory libraries; then it displays runtime information and closes the database. The application demonstrates ...",t:"02-Open_Hybrid"},"1239":{i:0.00089490711866524,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Nvram.htm",a:"This sample opens, inserts records and performs transactions on a database in non-volatile memory. The application demonstrates how to store then recover an in-memory database from a saved image in a simulated non-volatile RAM memory environment. The database open is informed about a “warm start” by ...",t:"02-Open_Nvram"},"1240":{i:0.000791609414910388,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Security_Disk_Cipher.htm",a:"This sample opens, displays runtime information, and closes an encrypted database. The application demonstrates the use of the database parameter cipher_key for the call to mco_db_open_dev(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once ...",t:"02-Open_Security_Disk_Cipher"},"1241":{i:0.000785971591391912,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Security_Disk_CRC.htm",a:"This sample opens, displays runtime information, and closes a database for CRC data transfer validation. The application demonstrates the use of the database parameter mode_mask with bitmask MCO_DB_USE_CRC_CHECK for the call to mco_db_open_dev(). How to Run See instructions  here  on how to build ...",t:"02-Open_Security_Disk_CRC"},"1242":{i:0.000809405748851559,u:"../Content/Programming/C/SDK_Samples/Core_Samples/02-Open_Shared.htm",a:"This sample opens, displays runtime information, and closes a shared memory database. The application demonstrates how to initialize the memory device for a typical shared memory database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once ...",t:"02-Open_Shared"},"1243":{i:0.000873384046356163,u:"../Content/Programming/C/SDK_Samples/Core_Samples/03-Connect_Multi-process.htm",a:"This sample opens and connects to a shared-memory database from multiple processes. To try the sample more than one instance of the application must be run from separate command windows. How to Run See instructions  here  on how to build this and other samples on your development platform. Once ...",t:"03-Connect_Multi-process"},"1244":{i:0.000557613690564707,u:"../Content/Programming/C/SDK_Samples/Core_Samples/03-Connect_Multi-task.htm",a:"This sample opens and connects to a database from multiple tasks. The application demonstrates connecting to a single database from multiple threads (tasks). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from ...",t:"03-Connect_Multi-task"},"1245":{i:0.000557613690564707,u:"../Content/Programming/C/SDK_Samples/Core_Samples/03-Connect_Single-task.htm",a:"This sample opens and connects to a database from a single task. The application simply demonstrates the use of functions mco_db_connect() and mco_db_disconnect(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be ...",t:"03-Connect_Single-task"},"1246":{i:0.00014197970684349,u:"../Content/Programming/C/SDK_Samples/Core_Samples/04-Operations.htm",a:"This sample performs basic insert, read, and update operations. The application demonstrates the use of generated _get() and _put() functions. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the ...",t:"04-Operations"},"1247":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Btree_Fulltext.htm",a:"This sample performs full text lookup operations. The application demonstrates the use of generated _search_all() and _search_any() functions to lookup through a string vector using a btree index. How to Run See instructions  here  on how to build this and other samples on your development platform. ...",t:"05-Indexes_Btree_Fulltext"},"1248":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Btree_Locate.htm",a:"This sample performs lookup operations using tree indexes. The application demonstrates the use of generated _find() and _locate() functions to lookup objects using unique and non-unique tree indexes. How to Run See instructions  here  on how to build this and other samples on your development ...",t:"05-Indexes_Btree_Locate"},"1249":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Btree_Pattern.htm",a:"This sample performs a basic pattern search. The application demonstrates the use of the generated _pattern_search() function and the pattern policy ignore_other_fields using a compound tree index. How to Run See instructions  here  on how to build this and other samples on your development ...",t:"05-Indexes_Btree_Pattern"},"1250":{i:0.000629985851250093,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Btree_Search.htm",a:"This sample performs search operations with tree indexes. The application demonstrates the use of the generated _search() function using a tree index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the ...",t:"05-Indexes_Btree_Search"},"1251":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Collate.htm",a:"This sample uses a user-defined collation with a tree index. The application demonstrates the use of the generated _get_collations() functions using user-defined collation compare function C1_collation_compare(). How to Run See instructions  here  on how to build this and other samples on your ...",t:"05-Indexes_Collate"},"1252":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Cursor_Basic.htm",a:"This sample performs basic cursor operations. The application demonstrates the use of the generated _index_cursor() and _from_cursor() functions and standard cursor navigation functions mco_cursor_first(),mco_cursor_next(),mco_cursor_last() and mco_cursor_prev()  using a tree index. How to Run See ...",t:"05-Indexes_Cursor_Basic"},"1253":{i:0.000592360576053393,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Cursor_Store.htm",a:"This sample stores a cursor across transactions using the  MVCC  Transaction Manager. The application demonstrates the use of function mco_cursor_store()to retain the cursor for future use after the transaction in which it was created is closed. How to Run See instructions  here  on how to build ...",t:"05-Indexes_Cursor_Store"},"1254":{i:0.000601317443480033,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Hash.htm",a:"This sample uses unique and non-unique hash indexes. The application demonstrates the use of generated _find() and _search() functions using unique and non-unique hash indexes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"05-Indexes_Hash"},"1255":{i:0.000601317443480033,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Kdtree.htm",a:"This sample uses a kdtree index. The application demonstrates the use of the generated _search() function for kdtree indexes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n   ...",t:"05-Indexes_Kdtree"},"1256":{i:0.000601317443480033,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Patricia_Binary.htm",a:"This sample uses a patricia index with a bit vector key. The application demonstrates the use of the generated _exact_match(), _prefix_match() and _next_match()  functions for binary (vector\u003cboolean\u003e) patricia indexes. (See file boolobj.c). How to Run See instructions  here  on how to build this and ...",t:"05-Indexes_Patricia_Binary"},"1257":{i:0.000601317443480033,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Patricia_Character.htm",a:"This sample uses a patricia index with a string key. The application demonstrates the use of the generated _exact_match(), _prefix_match() and _next_match()  functions for character (char\u003cn\u003e) patricia indexes. (See file strobj.c). How to Run See instructions  here  on how to build this and other ...",t:"05-Indexes_Patricia_Character"},"1258":{i:0.000601317443480033,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Rtree.htm",a:" This sample demonstrates the use of the generated _search() function for rtree indexes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    05_indexes_rtree\n      But it is ...",t:"05-Indexes_Rtree"},"1259":{i:0.000594968768173123,u:"../Content/Programming/C/SDK_Samples/Core_Samples/05-Indexes_Userdef.htm",a:"This sample demonstrates the use of the generated _get_udfs(), _compare_obj()and _compare_ext()  functions and the standard function mco_db_register_udf() for user-defined indexes. (See file udfdb_udf.c. Note that when you build this project a new version of this file is generated by  mcocomp named ...",t:"05-Indexes_Userdef"},"1260":{i:0.00046097554706511,u:"../Content/Programming/C/SDK_Samples/Core_Samples/06-Errorhandling_Errorhandler.htm",a:"This sample demonstrates the use of the standard user-defined error handler function and the registering function mco_error_set_handler(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin ...",t:"06-Errorhandling_Errorhandler"},"1261":{i:0.000550513568553222,u:"../Content/Programming/C/SDK_Samples/Core_Samples/06-Errorhandling_Fatalerr.htm",a:"This sample demonstrates how to trap a fatal error. The error handler is triggered by performing an illegal operation in a READ_ONLY transaction. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the ...",t:"06-Errorhandling_Fatalerr"},"1262":{i:0.000475658835216394,u:"../Content/Programming/C/SDK_Samples/Core_Samples/06-Errorhandling_Fatalerrex.htm",a:"This sample demonstrates how to trap a fatal error. The extended error handler is triggered by performing an illegal operation in a READ_ONLY transaction. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from ...",t:"06-Errorhandling_Fatalerrex"},"1263":{i:0.000475658835216394,u:"../Content/Programming/C/SDK_Samples/Core_Samples/06-Errorhandling_Nonfatalerr.htm",a:"This sample demonstrates how to detect and manage non-fatal error codes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    06_errorhandling_nonfatalerr\n      But it is more ...",t:"06-Errorhandling_Nonfatalerr"},"1264":{i:0.000475658835216394,u:"../Content/Programming/C/SDK_Samples/Core_Samples/06-Errorhandling_Statuscode.htm",a:"This sample demonstrates how to detect and manage runtime status codes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    06_errorhandling_statuscode\n      But it is more ...",t:"06-Errorhandling_Statuscode"},"1265":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Exclusive.htm",a:"This sample demonstrates transactions using the exclusive  transaction manager.  Two threads are started to run in parallel.  The first thread writes to table A and the second to table B.  As they write the database records, output is written also to a memory buffer which is unspooled afterwards to ...",t:"07-Transactions_Exclusive"},"1266":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Isolation_Levels.htm",a:"This sample demonstrates the behavior of different isolation levels using the  MVCC  Transaction Manager.  Two Account records are created and initialized as follows: Account Id=1, balance=1000 Account Id=2, balance=10000 Then for each isolation level two threads are spawned to update the Account ...",t:"07-Transactions_Isolation_Levels"},"1267":{i:0.000529413976079508,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Iterate.htm",a:"This sample demonstrates the use of function mco_trans_iterate() to iterate through the objects created within a 2-phase transaction before the transaction is actually committed to the database. How to Run See instructions  here  on how to build this and other samples on your development platform. ...",t:"07-Transactions_Iterate"},"1268":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Mursiw.htm",a:"This sample demonstrates transactions using the MURSIW  transaction manager.  Two threads are started to run in parallel.  The first thread writes to table A and the second to table B.  As they write the database records, output is written also to a memory buffer which is unspooled afterwards to ...",t:"07-Transactions_MURSIW"},"1269":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_MVCC.htm",a:"This sample demonstrates transactions using the MVCC  Transaction Manager.  For each of the three isolation levels with MVCC, two threads are started to run in parallel.  The first thread writes to table A and the second to table B.  As they write the database records output is written also to a ...",t:"07-Transactions_MVCC"},"1270":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Nested.htm",a:"This sample demonstrates nested transaction behavior. The application starts a transaction, then, before committing it, calls a function that starts and commits a nested transaction, then the outer transaction is committed. How to Run See instructions  here  on how to build this and other samples on ...",t:"07-Transactions_Nested"},"1271":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Ph2commit.htm",a:"This sample demonstrates a 2 phase commit to two conventional memory databases. The application opens two databases then initializes both with specific key values. Then it attempts to insert records with sequential key values but fails when duplicate key values occur causing the phase-1 commit to ...",t:"07-Transactions_Ph2commit"},"1272":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Ph2disk.htm",a:"This sample demonstrates a 2 phase commit to a disk-based database; run with command line arguments: exit (to abort after phase 1 commit), confirm (to confirm and phase 2 commit any transaction committed by phase 1), reject (to reject and rollback any transactions phase 1 committed). How to Run See ...",t:"07-Transactions_Ph2disk"},"1273":{i:0.000534022328949962,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Policy.htm",a:"This sample sets the transaction commit policy. The application demonstrates the use of function  mco_disk_transaction_policy() and the different behavior with the three commit policies MCO_COMMIT_BUFFERED, MCO_COMMIT_NO_SYNC and MCO_COMMIT_SYNC_FLUSH. How to Run See instructions  here  on how to ...",t:"07-Transactions_Policy"},"1274":{i:0.000487938800245422,u:"../Content/Programming/C/SDK_Samples/Core_Samples/07-Transactions_Transaction.htm",a:"This sample performs basic transaction start and commit. The application simply demonstrates the use of functions mco_trans_start() and mco_trans_commit() with READ_ONLY and READ_WRITE transactions, and the function mco_trans_checkpoint() to cause indexes to be updated during a transaction. How to ...",t:"07-Transactions_Transaction"},"1275":{i:0.000418999048005868,u:"../Content/Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_General.htm",a:"This sample demonstrates performance for database inserts, searches and deletes on a database with a fixed size class and a variable size class. The first class has multiple integer fields and a fixed size character array. The second class has variable length string fields. Both have hash and tree ...",t:"08-Benchmarks_General"},"1276":{i:0.000551247865045567,u:"../Content/Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf.htm",a:"This sample demonstrates performance for database inserts, searches and deletes on a simple database with a single class containing an integer field, a hash index and a tree index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"08-Benchmarks_Perf"},"1277":{i:0.000418999048005868,u:"../Content/Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf_Pmon.htm",a:"This sample demonstrates performance monitor statistics information using the original sample \u0027perf\u0027. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"08-Benchmarks_Perf_Pmon"},"1278":{i:0.000418999048005868,u:"../Content/Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf_Struct.htm",a:"This sample demonstrates performance for database inserts, searches and deletes when using objects that contain simple structs compared to objects containing direct structs. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample ...",t:"08-Benchmarks_Perf_Struct"},"1279":{i:0.000819200160464236,u:"../Content/Programming/C/SDK_Samples/Core_Samples/08-Benchmarks_Perf_UDA.htm",a:"This sample demonstrates performance for database inserts, searches and deletes using the Uniform Data Access API on a simple database with a single class containing an integer field, a hash index and a tree index. How to Run See instructions  here  on how to build this and other samples on your ...",t:"08-Benchmarks_Perf_UDA"},"1280":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/09-Blobs.htm",a:"This sample demonstrates basic operations with blob (Binary Large OBject) fields. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    09_blobs\n      But it is more instructive ...",t:"09-Blobs"},"1281":{i:0.00122033609779827,u:"../Content/Programming/C/SDK_Samples/Core_Samples/10-Events_Asynch.htm",a:"This sample demonstrates asynchronous event  handling.  The schema declares \u003cnew\u003e, \u003cupdate\u003e and \u003cdelete\u003e events that are registered at runtime.  The appropriate event handlers (call back functions) are called when an object is created, deleted or updated.  The event handlers execute in a separate ...",t:"10-Events_Asynch"},"1282":{i:0.00122033609779827,u:"../Content/Programming/C/SDK_Samples/Core_Samples/10-Events_Synch.htm",a:"This sample demonstrates synchronous event  handling.  The schema declares \u003cnew\u003e, \u003cupdate\u003e and \u003cdelete\u003e events that are registered at runtime.  The appropriate event handlers (call back functions) are  called when a new object is created, deleted or updated.  The event handlers print out data ...",t:"10-Events_Synch"},"1283":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/12-Vectors.htm",a:"This sample demonstrates basic operations with vector fields. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    12_vectors\n      But it is more instructive to run it in your ...",t:"12-Vectors"},"1284":{i:0.000344279423934763,u:"../Content/Programming/C/SDK_Samples/Core_Samples/13-XML_Export_Import.htm",a:"This sample demonstrates the use of eXtremeDB XML mco_db_xml_export() and mco_db_xml_import() APIs. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    13_xml_export_import\n    ...",t:"13-XML_Export_Import"},"1285":{i:0.000344279423934763,u:"../Content/Programming/C/SDK_Samples/Core_Samples/13-XML_XML_Ops.htm",a:"This sample demonstrates basic XML operations. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    13_xml_xml_ops\n      But it is more instructive to run it in your development ...",t:"13-XML_XML_Ops"},"1286":{i:0.000344279423934763,u:"../Content/Programming/C/SDK_Samples/Core_Samples/13-XML_XML_Policy.htm",a:"This sample demonstrates the use of the XML mco_xml_set_policy() API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    13_xml_xml_policy\n      But it is more instructive to ...",t:"13-XML_XML_Policy"},"1287":{i:0.000344279423934763,u:"../Content/Programming/C/SDK_Samples/Core_Samples/13-XML_XML_Schema.htm",a:"This sample demonstrates use of the \u003cclassname\u003e_xml_schema() API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    13_xml_xml_schema\n      But it is more instructive to run ...",t:"13-XML_XML_Schema"},"1288":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/14-TTL.htm",a:"This sample demonstrates use of the “Time-To-Live” (TTL) automatic deletion of obsolete objects. Note that the two techniques for setting TTL policy are demonstrated in the schema definition (file schema.mco) and the results after inserting 10 objects are displayed by the application. How to Run See ...",t:"14-TTL"},"1289":{i:0.000520652226466158,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Uda_Mco.htm",a:"This sample demonstrates use of mco_uda_to_mco() to extract the \"native\" database object handle from a UDA object in order to perform native C API operations on the object. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample ...",t:"16-UDA_Uda_Mco"},"1290":{i:0.000520652226466158,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udacoll.htm",a:"This sample demonstrates use of  custom collation with UDA. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udacoll\n      But it is more instructive to run it in ...",t:"16-UDA_Udacoll"},"1291":{i:0.00046763273492695,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaevent.htm",a:"This sample demonstrates use of the UDA synchronous and asynchronous events APIs. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udaevent\n      But it is more ...",t:"16-UDA_Udaevent"},"1292":{i:0.000520652226466158,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udameta.htm",a:"This sample demonstrates use of the UDA Metadata API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udameta\n      But it is more instructive to run it in your ...",t:"16-UDA_Udameta"},"1293":{i:0.000555246240806134,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaopen.htm",a:"This sample demonstrates use of  mco_uda_db_open()  and  mco_uda_db_close() . How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udaopen\n      But it is more ...",t:"16-UDA_Udaopen"},"1294":{i:0.000546534441611631,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaops.htm",a:"This sample demonstrates the UDA API in a variety of database operations. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udaops\n      But it is more instructive to ...",t:"16-UDA_Udaops"},"1295":{i:0.000546534441611631,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udapsearch.htm",a:"This sample demonstrates use of the UDA pattern search API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udapsearch\n      But it is more instructive to run it in ...",t:"16-UDA_Udapsearch"},"1296":{i:0.000520652226466158,u:"../Content/Programming/C/SDK_Samples/Core_Samples/16-UDA_Udaudf.htm",a:"This sample demonstrates user-defined tree \u0026 hash indexes with the UDA API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    16_uda_udaudf\n      But it is more instructive ...",t:"16-UDA_Udaudf"},"1297":{i:0.000341818061868679,u:"../Content/Programming/C/SDK_Samples/Core_Samples/17-Statistics_Dbcalc.htm",a:"This sample builds the  database calculator test application. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    17_statistics_dbcalc\n      But it is more instructive to run ...",t:"17-Statistics_Dbcalc"},});