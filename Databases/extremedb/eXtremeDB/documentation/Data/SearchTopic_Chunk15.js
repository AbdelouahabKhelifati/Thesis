define({"1032":{i:0.000212984121181451,u:"../Content/Programming/C/ADR_Functions/comm_connect_async.htm",a:"Call connect() on the specified address asynchronously. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_connect_async(mco_iot_comm_h comm, \n                    const char *address,\n                    timer_unit timeout, \n                    unsigned int ...",t:"mco_iot_comm_connect_async"},"1033":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/comm_stop_connect.htm",a:"Interrupt the asynchronous connect initiated through the  mco_iot_comm_connect_async(). For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_stop_connect(mco_iot_comm_h comm, \n                    const char *address);\n  Arguments Description This function  interrupts ...",t:"mco_iot_comm_stop_connect"},"1034":{i:0.000216823999227497,u:"../Content/Programming/C/ADR_Functions/comm_find_conn.htm",a:"Return the connection found by agentId. For an overview see page  ARF Applications in C Prototype  \n    iot_connection_h    mco_iot_comm_find_conn(mco_iot_comm_h comm, \n                            mco_iot_agent_id_t agent_id);\n  Arguments Description This function  returns the connection found by ...",t:"mco_iot_comm_find_conn"},"1035":{i:0.000216823999227497,u:"../Content/Programming/C/ADR_Functions/comm_next_conn.htm",a:"Return the next active connection for this communicator. For an overview see page  ARF Applications in C Prototype  \n    iot_connection_h mco_iot_comm_next_conn(mco_iot_comm_h comm, \n                            iot_connection_h prev) ;\n  Arguments Description This function  returns the next ...",t:"mco_iot_comm_next_conn"},"1036":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/comm_stop.htm",a:"Stop the communicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_stop(mco_iot_comm_h comm)\n  Arguments Description The function stops the communicator \"gracefully\"; i.e. it waits for all active and queued callbacks to complete. Also the work flows for all ...",t:"mco_iot_comm_stop"},"1037":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/comm_destroy.htm",a:"mco_iot_comm_destroy Destroy the communicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_comm_stop(mco_iot_comm_h comm)\n  Arguments Description The function destroys the communicator. Return Codes",t:"mco_iot_comm_destroy"},"1038":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/conn_get_address.htm",a:"Return the connection address. For an overview see page  ARF Applications in C Prototype  \n    const char   * mco_iot_conn_get_address(iot_connection_h iotc);\n  Arguments Description This function  returns the connection address through the connection handle  (for connect-sockets). Return Codes ...",t:"mco_iot_conn_get_address"},"1039":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/conn_get_agent_id.htm",a:"Return the connection agent_id. For an overview see page  ARF Applications in C Prototype  \n    mco_iot_agent_id_t  mco_iot_conn_get_agent_id(const iot_connection_h iotc);\n  Arguments Description This function  returns the remote node agent_id. Return Codes Example      \n    // onConnect callback\n   ...",t:"mco_iot_conn_get_agent_id"},"1040":{i:0.00027436802279451,u:"../Content/Programming/C/ADR_Functions/conn_get_stat.htm",a:"Receive connection statistics. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_conn_get_stat(mco_iot_connection_h iotc, \n                    mco_iot_connection_stat_t *stat);\n  Arguments Description This function  receives a mco_iot_connection_stat_t structure (see ...",t:"mco_iot_conn_get_stat"},"1041":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/conn_get_error.htm",a:"Receive the last error description. For an overview see page  ARF Applications in C Prototype  \n    void mco_iot_conn_get_error(iot_connection_h iotc, \n                    mco_iot_stop_reason_t *reason,\n                    MCO_RET *last_error, \n                    int *last_errno, \n                  ...",t:"mco_iot_conn_get_error"},"1042":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/conn_get_comm.htm",a:"Return the communicator the current connection belongs to. For an overview see page  ARF Applications in C Prototype  \n    mco_iot_comm_h  mco_iot_conn_get_comm(const iot_connection_h iotc);\n  Arguments Description This function  returns the communicator the current connection belongs to. Return ...",t:"mco_iot_conn_get_comm"},"1043":{i:0.000216823999227497,u:"../Content/Programming/C/ADR_Functions/conn_release.htm",a:"Release the connection. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_conn_release(iot_connection_h iotc);\n  Arguments Description This function  releases the connection. When the  mco_iot_comm_find_conn() and  mco_iot_comm_next_conn() APIs are used they “lock/pin” ...",t:"mco_iot_conn_release"},"1044":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/conn_disconnect.htm",a:"Drop the connection. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_conn_disconnect(iot_connection_h iotc);\n  Arguments Description This function  drops the connection. Return Codes Example      \n    {\n        // Disconnect device by agentID:\n        ...",t:"mco_iot_conn_disconnect"},"1045":{i:0.00017333025037277,u:"../Content/Programming/C/ADR_Functions/replicator_params_init.htm",a:"Set the default values for the replicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_params_init( mco_iot_replicator_params_t * params );\n  Arguments Description This function  sets the default values for the replicator. It must be called prior to  ...",t:"mco_iot_replicator_params_init"},"1046":{i:0.00021016305004882,u:"../Content/Programming/C/ADR_Functions/replicator_create.htm",a:"Create a replicator object. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_create(mco_db_h db, mco_iot_comm_h comm, \n                        mco_iot_replicator_params_t *params, \n                        /* OUT */ mco_iot_replicator_h *repl);\n  Arguments ...",t:"mco_iot_replicator_create"},"1047":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_connect.htm",a:"Call connect() synchronously. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_connect(mco_iot_replicator_h repl, \n                        const char *address, \n                        timer_unit timeout, \n                        mco_sock_params_t ...",t:"mco_iot_replicator_connect"},"1048":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_get_comm.htm",a:"Return the underlying communicator for the specified replicator. For an overview see page  ARF Applications in C Prototype  \n    mco_iot_comm_h mco_iot_replicator_get_comm(mco_iot_replicator_h repl);\n  Arguments Description This function  returns the underlying communicator for the specified ...",t:"mco_iot_replicator_get_comm"},"1049":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_get_agent_id.htm",a:"Return the agent_id of the specified node. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_get_agent_id(mco_iot_replicator_h repl, \n                            mco_iot_agent_id_t *agent_id);\n  Arguments Description This function  returns the agent_id of the ...",t:"mco_iot_replicator_get_agent_id"},"1050":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_get_level.htm",a:"Return the level of the specified node. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_get_level(mco_iot_replicator_h repl, \n                            uint2 *level);\n  Arguments Description This function  returns the level of the specified replicator: 1 ...",t:"mco_iot_replicator_get_level"},"1051":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_set_level.htm",a:"Changes the level of the router at runtime. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_set_level(mco_iot_replicator_h repl, \n                            uint2 level);\n  Arguments Description This function  changes the level of the router at runtime. ...",t:"mco_iot_replicator_set_level"},"1052":{i:0.00025046675663203,u:"../Content/Programming/C/ADR_Functions/replicator_sync.htm",a:"Start the node\u0027s synchronization. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_sync(mco_iot_replicator_h repl, \n                        mco_iot_agent_id_t agent_id, \n                        int flags);\n  Arguments Description The function starts the ...",t:"mco_iot_replicator_sync"},"1053":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_clear.htm",a:"Delete data that have been transmitted and acknowledged by the peer. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_clear(mco_iot_replicator_h repl, \n                        mco_iot_agent_id_t agent_id);\n  Arguments Description The function deletes data ...",t:"mco_iot_replicator_clear"},"1054":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_clear_class.htm",a:"Delete data only from the specified class that have been transmitted and acknowledged by the peer. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_clear_class(mco_iot_replicator_h repl, \n                            mco_iot_agent_id_t agent_id,\n              ...",t:"mco_iot_replicator_clear_class"},"1055":{i:0.000262899260245004,u:"../Content/Programming/C/ADR_Functions/replicator_enum_agents.htm",a:"Enumerate the active connections for this replicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_enum_agents(mco_iot_replicator_h repl, \n                        iot_agent_enumerator_t enumerator, \n                        void *context);\n  Arguments ...",t:"mco_iot_replicator_enum_agents"},"1056":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_stop.htm",a:"Stop the replicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_stop(mco_iot_replicator_h repl); \n  Arguments Description The function stops the replicator. Return Codes Example The code snippet below initializes the ARF (IoT) runtime, opens and ...",t:"mco_iot_replicator_stop"},"1057":{i:0.000124673477192482,u:"../Content/Programming/C/ADR_Functions/replicator_destroy.htm",a:"Destroy the replicator. For an overview see page  ARF Applications in C Prototype  \n    MCO_RET mco_iot_replicator_destroy(mco_iot_replicator_h repl); \n  Arguments Description The function destroys the replicator. Return Codes Example The code snippet below initializes the ARF (IoT) runtime, opens ...",t:"mco_iot_replicator_destroy"},"1058":{i:0.00220740131277277,u:"../Content/Programming/C/Analytics_Functions.htm",a:" eXtremeDB provides a  library of C analytics functions that operate on  sequences. These functions use the specialized type mco_seq_iterator_t as the \"handle\" to manage sequence fields. They  all have a result sequence iterator as their first argument that receives the result of the function after ...",t:"Analytics Functions "},"1059":{i:0.000884237662261462,u:"../Content/Programming/C/Analytics_Functions/Functions_By_Category.htm",a:"The table below links to pages describing the functions in detail. The examples in these pages use the following schema definition for a database of stock quotes:  \n    #define uint4 unsigned\u003c4\u003e\n    #define MAX_SYMBOL_LEN 21\n     \n    declare database stockdb;\n \n    class Quote \n    {\n        ...",t:"C Analytics Functions by Category"},"1060":{i:0.000208554715814813,u:"../Content/Programming/C/Analytics_Functions/Unary.htm",a:"The following unary C APIs take an input sequence and produce a result sequence of the same type, or, in the case of mco_seq_match(), takes a third character string argument pattern and returns a boolean result sequence. Example Following is an example code snippet demonstrating a unary operator ...",t:"Unary C Sequence Functions"},"1061":{i:0.000208554715814813,u:"../Content/Programming/C/Analytics_Functions/Binary.htm",a:"The following binary C API functions take two input sequences, left and right, and produce the result sequence  of the same type. The two input sequences must be of the same type. If the two input sequences are of different lengths the operation will be performed on only the number of elements in ...",t:"Binary C Sequence Functions"},"1062":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Comparison.htm",a:"The following comparison C functions take two input sequences, left and right, and produce the boolean result sequence result . If the two input sequence arguments are of different lengths the operation will be performed on only the number of elements in the shorter of the two sequences.  The ...",t:"Comparison C Sequence Functions"},"1063":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Logical.htm",a:"The following logical C functions take one boolean sequence argument input, or two boolean input sequences, left and right, and produce the boolean result sequence. If the two input sequence arguments are of different lengths the operation will be performed on only the number of elements in the ...",t:"Logical C Sequence Functions"},"1064":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Conversion.htm",a:"The following conversion C functions take one sequence input of TYPE1 and produce the result sequence of TYPE2 where the allowed types are  listed in the  Analytics Functions  page. The mco_seq_print_char() API takes an additional integer element_size argument and a character string format argument  ...",t:"Conversion C Sequence Functions"},"1065":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Collapse.htm",a:"The following collapse C functions take two input sequences, left and right, and produce the result sequence  of  type double where the computed scalar result is the first element. The two input sequences must be of the same type. If the two input sequences are of different lengths the operation ...",t:"Collapse C Sequence Functions"},"1066":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Conditional.htm",a:"The following conditional C API functions take one input sequence or two (then, else) sequences, and a boolean sequence condition.  sequences of any TYPE listed in the  Analytics Functions  page, and a boolean sequence condition. The result sequence is of the specified TYPE except for the ...",t:"Conditional C Sequence Functions"},"1067":{i:0.000632541586242533,u:"../Content/Programming/C/Analytics_Functions/Manipulator.htm",a:"The following sequence manipulator C functions take a variety of input sequence arguments and produce result sequences as described in the table below: Example Following is an example code snippet demonstrating a sequence manipulator function:          \n    {\n        mco_trans_h trans;\n        ...",t:"Sequence Manipulator C Functions"},"1068":{i:0.000390464791271033,u:"../Content/Programming/C/Analytics_Functions/Manipulator/Join.htm",a:"The mco_seq_join_TYPE() C function takes a metaiterator in input and produces the result sequence  of the same type. (This function is not to be confused with the generated  CLASS_FIELD_join()  API!)  The input metaiterator parameter is an \"iterator of iterators\", i.e. special kind of iterator which ...",t:"The mco_seq_join_TYPE C Function"},"1069":{i:0.000390464791271033,u:"../Content/Programming/C/Analytics_Functions/Manipulator/Skip_NaN.htm",a:"As explained in the  Sequence Manipulator Functions  page, the mco_seq_skip_nan_TYPE() API copies  the input sequence to result skipping NaN (Not-a-Number) elements. And note that NaN is a special kind of types float or double, so the input sequence must be one of these types - the function is ...",t:"The seq_skip_nan_TYPE() C Function"},"1070":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Iterator.htm",a:"The iterator C function mco_seq_next_TYPE() is used to iterate sequences of the specified type. The function signature is:  \n    MCO_RET mco_seq_next_TYPE(mco_seq_iterator_h iterator, mco_TYPE* val);\n              where TYPE is one of the types listed in the  Analytics Functions  page. The function ...",t:"Iterator C Sequence Functions"},"1071":{i:0.000311485916169062,u:"../Content/Programming/C/Core_Functions/Generated/Field/Sequence.htm",a:"Generated Sequence Field Functions The eXtremeDB sequence  fields are of type sequence. Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated Sequence Field Functions"},"1072":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Top.htm",a:"In addition to the static C functions listed below, for each class that contains one or more sequence fields, a classname_primary_key_name_top() functions is generated. The function has the following prototype:  \n    MCO_RET      classname_primary_key_name_top                   ( mco_trans_h t, \n    ...",t:"Top C Sequence Functions"},"1073":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/RLE.htm",a:"The RLE C functions  take a variety of input arguments and produce result sequences or scalar types as described in the table below:   Example Following is an example code snippet demonstrating an RLE function:          \n    {\n        mco_trans_h trans;\n        mco_cursor_t quote_cursor;\n        ...",t:"Run Length Encryption C Sequence Functions"},"1074":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Grand_Agg.htm",a:"All Grand Aggregate C functions take a single input sequence and produce a result sequence. The result of all Grand Aggregate functions is returned in the first element of the result sequence as a double value except for  mco_seq_agg_count()  which returns a uint8 value and the two functions  ...",t:"Grand Aggregate C Sequence Functions"},"1075":{i:0.000149259503352558,u:"../Content/Programming/C/Analytics_Functions/Grand_Agg/Count_Approxdc.htm",a:"The C  mco_seq_agg_count()and mco_seq_agg_approxdc()functions compute the count of all elements in the sequence and a count of distinct elements for the input sequence. The mco_seq_agg_count() API returns a uint8 value and  the mco_seq_agg_approxdc() and mco_seq_agg_approxdc_hash() APIs return a ...",t:"Grand Aggregate C Count and Approxdc Functions"},"1076":{i:0.000149259503352558,u:"../Content/Programming/C/Analytics_Functions/Grand_Agg/Max_Min.htm",a:"The C mco_seq_agg_max_TYPE(), mco_seq_agg_min_TYPE() and mco_seq_agg_min_max_TYPE() functions extract the maximum and minimum values for the input sequence. Example Following is an example code snippet demonstrating these functions:  \n    void grand_aggregate(mco_db_h db)\n    {\n        mco_trans_h ...",t:"Grand Aggregate C Maximum and Minimum Functions"},"1077":{i:0.00048115686873955,u:"../Content/Programming/C/Analytics_Functions/Grand_Agg/Sum_Avg_Prd.htm",a:"The C mco_seq_agg_sum_TYPE(), mco_seq_agg_prd_TYPE() and mco_seq_agg_avg() functions compute the sum, product and average for the input sequence and return the result as a single element in the result sequence. Example Following is an example code snippet demonstrating these functions:  \n    void ...",t:"Grand Aggregate C Sum, Product and Average Functions"},"1078":{i:0.000149259503352558,u:"../Content/Programming/C/Analytics_Functions/Grand_Agg/Var_Dev.htm",a:"The mco_seq_agg_var_TYPE()and mco_seq_agg_dev_TYPE()functions compute the variance and standard deviation for the input sequence and return a double value result as a single element in the result sequence. The variance is always a positive number; the smaller the value the closer the values of the ...",t:"Grand Aggregate C Variation and Deviation Functions"},"1079":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Group_Agg.htm",a:"All Group Aggregate C API functions take two input sequence iterator arguments, input and group_by, except mco_seq_group_agg_wavg_TYPE() which has left and right sequences as well as group_by. The result of all Group Aggregate functions is returned in the result sequence as the calculated aggregate ...",t:"Group Aggregate C Sequence Functions"},"1080":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Grid_Agg.htm",a:"All Grid Aggregate C functions take an input sequence iterator argument and an interval argument of type uint8. The result of all Grid Aggregate functions is returned in the result sequence as the calculated aggregate for each interval. The interval argument determines the maximum number of elements ...",t:"Grid Aggregate C Sequence Functions"},"1081":{i:0.000324514071998711,u:"../Content/Programming/C/Analytics_Functions/Window_Agg.htm",a:"Like Grid Aggregate functions, all Window Aggregate C functions take two input sequence iterator arguments, input and interval. The difference in how Window Aggregate functions determine their sliding window interval is described in the  Window versus Grid Aggregate  page. The result of all Window ...",t:"Window Aggregate C Sequence Functions"},"1082":{i:0.000190592263483509,u:"../Content/Programming/C/Analytics_Functions/Window_Agg/Win_Agg_ATR.htm",a:" The  Average True Range (ATR) C API   mco_seq_window_agg_atr_TYPE() calculates the ATR using the True Range algorithm described in the  Window Aggregate ATR  page. Example Following is an example code snippet demonstrating this function:  \n    {\n        mco_trans_h trans;\n        mco_cursor_t ...",t:"Window Aggregate ATR  C Function "},"1083":{i:0.000190592263483509,u:"../Content/Programming/C/Analytics_Functions/Window_Agg/Win_Agg_EMA.htm",a:"The Exponential Moving Average (EMA) C API   mco_seq_window_agg_ema_TYPE() calculates the EMA using the algorithm described in the  Window Aggregate EMA  page. Example Following is an example code snippet demonstrating this function:  \n    {\n        mco_trans_h trans;\n        mco_cursor_t ...",t:"Window Aggregate EMA C Function"},"1084":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Hash_Agg.htm",a:"All Hash Aggregate C functions take two input sequence iterator arguments, input, group_by and an integer argument n_groups. They return the result_agg or result_count sequence and the result_group_by sequence which are the values used for grouping in order for the application to make the ...",t:"Hash Aggregate C Sequence Functions"},"1085":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Cumulative_Agg.htm",a:"All Cumulative Aggregate C functions take a single input sequence argument and produce a result sequence which is of the same type as the input sequence or of type double depending on the operation performed. The value of each element is the result of the specified operation on all of the preceding ...",t:"Cumulative Aggregate C Sequence Functions"},"1086":{i:0.000162509963294448,u:"../Content/Programming/C/Analytics_Functions/Miscellaneous.htm",a:"The following  functions take a variety of input sequence arguments and produce result sequences or scalar types as described in the table below: Example Following is an example code snippet demonstrating one of these functions:          \n    {\n        mco_trans_h trans;\n        mco_cursor_t ...",t:"Miscellaneous C Sequence Functions"},"1087":{i:0.000138984720996937,u:"../Content/Programming/C/Core_Functions/Static/Performance_Monitor.htm",a:"As explained in the  Performance Monitor  page, eXtremeDB for HPC includes an HTML-based Performance Monitor that utilizes the Javascript tool Highcharts from Highsoft. The  performance monitor C API consists of a small set of functions  that implement the following four operations: initialize, get ...",t:"Performance Monitor"},"1088":{i:0.000163176201497181,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/attach.htm",a:"Attach a database for monitoring. Prototype  \n    MCO_RET\tmco_perfmon_attach(\t/*IN*/ const char *dbName);\n  Arguments Description This function attaches the specified database for monitoring. Return Codes Example  \n    Application snippet:\n        \n     \n    #define PERF_DATABASE_SEGMENT_SIZE ( ...",t:"mco_perfmon_attach"},"1089":{i:0.000148409025343542,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/detach.htm",a:"Detach a database from monitoring. Prototype  \n    MCO_RET\tmco_perfmon_detach(\t/*IN*/ const char *dbName);\n  Arguments Description This function detaches the specified database from monitoring. Return Codes Example  \n    Application snippet:\n        \n     \n    #define PERF_DATABASE_SEGMENT_SIZE ( ...",t:"mco_perfmon_detach"},"1090":{i:0.000243505322006788,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/close.htm",a:"Terminate performance monitoring. Prototype  \n    MCO_RET\tmco_perfmon_close( void );\n  Arguments Description This function terminates database monitoring. Return Codes Example  \n    Application snippet:\n        \n     \n    #define PERF_DATABASE_SEGMENT_SIZE ( 64\u003c\u003c20 )\n    const char* dbName = ...",t:"mco_perfmon_close"},"1091":{i:0.000163176201497181,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/init.htm",a:"Initialize the perfmon database. Prototype  \n    MCO_RET\tmco_perfmon_init(\t/*IN*/ void *memory, /*IN*/ mco_size_t memory_size);\n  Arguments Description This function initializes the  perfmon database . Return Codes Example  \n    Application snippet:\n        \n     \n    #define ...",t:"mco_perfmon_init"},"1092":{i:0.000163176201497181,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/set_options.htm",a:"Set performance monitor options. Prototype  \n    void\tmco_perfmon_set_options( mco_perf_options_t * options );\n  Arguments Description This function sets the current  performance monitor options . Return Codes Example  \n    Application snippet:\n        \n     \n    #define PERF_DATABASE_SEGMENT_SIZE ( ...",t:"mco_perfmon_set_options"},"1093":{i:0.000163176201497181,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/get_db_name.htm",a:"Get the name of the database currently attached to the performance monitor. Prototype  \n    const char *\tmco_perfmon_get_db_name( void );\n  Arguments Description This function returns the database currently attached to the performance monitor. Return Codes Example  \n    Application snippet:\n        ...",t:"mco_perfmon_get_db_name"},"1094":{i:0.000136399827993978,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/get_dictionary.htm",a:"Get  the active perfmon database dictionary. Prototype  \n    mco_dictionary_h mco_perfmon_get_dictionary(void);\n  Arguments Description This function returns a handle to the active perfmon database dictionary (which can be used by UDA). Return Codes Example      \n    {\n        MCO_RET rc;\n        ...",t:"mco_perfmon_get_dictionary"},"1095":{i:0.000163176201497181,u:"../Content/Programming/C/Core_Functions/Static/PerformanceMonitor/get_options.htm",a:"Get performance monitor options. Prototype  \n    const mco_perf_options_t*\tmco_perfmon_get_options( void );\n  Arguments Description This function returns the current  performance monitor options . Return Codes Example  \n    Application snippet:\n        \n     \n    #define PERF_DATABASE_SEGMENT_SIZE ( ...",t:"mco_perfmon_get_options"},"1096":{i:0.00178933154899094,u:"../Content/Programming/C/Generated.htm",a:"The database schema identifies the database, defines each data class, its elements, its relationship to other data classes, and data access methods. When compiled with the  eXtremeDB DDL compiler  produces two files, \u003cDatabaseName\u003e.h, and  \u003cDatabaseName\u003e.c, which contain the structure (typedef) ...",t:"Generated API"},"1097":{i:0.000338910684199785,u:"../Content/Programming/C/Core_Functions/Generated/Database.htm",a:"Generated Database Functions The following functions are generated for the database name (dbname) specified in the schema and do not require an object handle:",t:"Generated Database Functions"},"1098":{i:0.000678112999550907,u:"../Content/Programming/C/Core_Functions/Generated/Database/get_dictionary.htm",a:"This function returns the database dictionary (for calls to  mco_db_open_dev()). Prototype  \n    mco_dictionary_h\tdbname_get_dictionary( );\n  Arguments No Arguments. Description This function returns a handle to the database dictionary. It is used as an argument to functions that expect a ...",t:"dbname_get_dictionary"},"1099":{i:0.000179247945937522,u:"../Content/Programming/C/Core_Functions/Generated/Database/get_calculator.htm",a:"This function returns a handle for a database calculator object. Prototype  \n    mco_calculator_h\tdatabasename_get_calculator(\tvoid );\n  Arguments No arguments. Description This function returns a handle for the calculator object if defined in the database schema; otherwise, returns a null pointer. ...",t:"dbname_get_calculator"},});