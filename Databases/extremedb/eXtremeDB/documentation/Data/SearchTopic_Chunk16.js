define({"1100":{i:0.000374618964938221,u:"../Content/Programming/C/Core_Functions/Generated/Database/delete_object.htm",a:"This function deletes a database object (referenced by its OID). Prototype  \n    MCO_RET\tdbname_delete_object( /*IN*/ mco_trans_h trans,\n                        /*IN*/ const dbname_oid *oid);\n  Arguments Description This function will remove the object referenced by the OID, and all the object’s ...",t:"dbname_delete_object"},"1101":{i:0.000179247945937522,u:"../Content/Programming/C/Core_Functions/Generated/Database/get_class_code.htm",a:"This function returns the class code of an object (referenced by its OID). Prototype  \n    MCO_RET\tdbname_get_class_code( /*IN*/ mco_trans_h trans, \n                       /*IN*/ const dbname_oid *oid, \n                       /*OUT*/ uint2 *class);\n  Arguments Description This function will return ...",t:"dbname_get_class_code"},"1102":{i:0.000338910684199785,u:"../Content/Programming/C/Core_Functions/Generated/Class.htm",a:"Generated Class Functions The following functions are generated for each class name (classname) specified in the schema:",t:"Generated Class Functions"},"1103":{i:0.000197358746079129,u:"../Content/Programming/C/Core_Functions/Generated/Class/new.htm",a:"This function creates a new instance of a database object (without an OID). Prototype  \n    MCO_RET\tclassname_new(\t/*IN*/ mco_trans_h t, \n                  /*OUT*/ classname * handle );\n  Arguments Description This function will reserve space for a new instance of the class and return a reference to ...",t:"classname_new"},"1104":{i:0.000160669362490012,u:"../Content/Programming/C/Core_Functions/Generated/Class/new_oid.htm",a:"This function creates a new instance of a database object with an OID. Prototype  \n    MCO_RET\tclassname_new(\t/*IN*/ mco_trans_h t, \n                  /*IN*/ dbname_oid *oid,\n                  /*OUT*/ classname * handle );\n  Arguments Description This function will reserve space for a new instance ...",t:"classname_new (OID)"},"1105":{i:0.000319883367697994,u:"../Content/Programming/C/Core_Functions/Generated/Class/delete.htm",a:"This function deletes a database object (referenced by its class handle). Prototype  \n    MCO_RET\tclassname_delete(\t/*IN*/ classname * handle );\n  Arguments Description This function will remove the object referenced by handle, and all of the object’s versions, from the database. Hash and tree index ...",t:"classname_delete"},"1106":{i:0.000369657564783119,u:"../Content/Programming/C/Core_Functions/Generated/Class/delete_all.htm",a:"This function deletes all database objects of this class. Prototype  \n    MCO_RET\tclassname_delete_all(\t/*IN*/ mco_trans_h t );\n  Arguments Description This function will remove all objects (and their index entries) of a given class. Return Codes Example The following code snippets demonstrate how ...",t:"classname_delete_all"},"1107":{i:0.000551968331986174,u:"../Content/Programming/C/Core_Functions/Generated/Class/pack.htm",a:"This function defragments the object (removes all unused memory \"holes\" for dynamic fields). Prototype  \n    MCO_RET\tclassname_pack(\t/*IN*/  classname * handle, \n                  /*OUT*/  uint4 * pages_released);\n  Arguments Description The _pack()  method is generated for all classes with dynamic ...",t:"classname_pack"},"1108":{i:0.000241326323809203,u:"../Content/Programming/C/Core_Functions/Generated/Class/set_caching_priority.htm",a:"Change the caching priority for this class. Prototype  \n    MCO_RET\tclassname_set_caching_priority(\t/*IN*/ mco_trans_h t, \n                             /*IN*/ int priority );\n  Arguments Description This function is generated only for persistent classes . A cache priority property value on each ...",t:"classname_set_caching_priority"},"1109":{i:0.000404351478876579,u:"../Content/Programming/C/Core_Functions/Generated/Class/set_allocation_block_size.htm",a:"Set the allocation block size for this class. Prototype  \n    MCO_RET\tclassname_set_allocation_block_size(\t/*IN*/ mco_trans_h t, \n                             /*IN*/ mco_size_t block_size );\n  Arguments Description This function is generated only for persistent classes. Setting the block size ...",t:"classname_set_allocation_block_size"},"1110":{i:0.000137636900200668,u:"../Content/Programming/C/Core_Functions/Generated/Class/updated_bitmap_get_fldname.htm",a:"This function returns the field number and position of any updated field(s). Prototype  \n    MCO_RET\tclassname_updated_bitmap_get_fldname(\t/*IN*/ classname * handle, \n                                  uint2 * index,  char * dest, \n                                  uint2 dest_size, \n                  ...",t:"classname_updated_bitmap_get_fldname"},"1111":{i:0.000208138555884049,u:"../Content/Programming/C/Core_Functions/Generated/Class/checkpoint.htm",a:"This function creates index nodes with the object’s new or updated values.  Prototype  \n    MCO_RET\tclassname_checkpoint(\t/*IN*/ classname * handle  );\n  Arguments Description This function completes one or more put methods by creating index nodes and/or other tasks necessary to incorporate the ...",t:"classname_checkpoint"},"1112":{i:0.000376724071330858,u:"../Content/Programming/C/Core_Functions/Generated/Class/oid_find.htm",a:"This function returns a handle to the object referenced by its OID. Prototype  \n    MCO_RET\tclassname_oid_find(\t/*IN*/ mco_trans_h trans, \n                      /*IN*/ const dbname_oid * oid,\n                      /*OUT*/ classname * handle );\n  Arguments Description This function will return a ...",t:"classname_oid_find"},"1113":{i:0.000321220120400145,u:"../Content/Programming/C/Core_Functions/Generated/Class/oid_get.htm",a:"This function returns the OID of the object referenced by its class handle. Prototype  \n    MCO_RET\tclassname_oid_get(\t/*IN*/ classname *handle, \n                     /*OUT*/ dbname_oid *oid );\n  Arguments Description This function will return the OID of the object referenced by handle. Return Codes",t:"classname_oid_get"},"1114":{i:0.000161092962604853,u:"../Content/Programming/C/Core_Functions/Generated/Class/json_get.htm",a:"This function exports a single object to an output stream in JSON format. Prototype  \n    MCO_RET\tclassname_json_get(\t/*IN*/ classname *handle, \n                     void *stream_handle, \n                     mco_stream_write output_stream_writer );\n  Arguments Description This function exports a ...",t:"classname_json_get"},"1115":{i:0.000261193541699065,u:"../Content/Programming/C/Core_Functions/Generated/Class/autoid_find.htm",a:"classname _autoid_find This function returns a handle to the object referenced by its autoid. Prototype  \n    MCO_RET\tclassname_autoid_find(\t/*IN*/ mco_trans_h trans,\n                        /*IN*/ autoid_t id\n                       /*OUT*/ classname * handle );\n  Arguments Description This function ...",t:"classname_autoid_find"},"1116":{i:0.000193140851131381,u:"../Content/Programming/C/Core_Functions/Generated/Class/autoid_get.htm",a:"classname _autoid_get This function returns the autoid of the object referenced by its class handle. Prototype  \n    MCO_RET\tclassname_autoid_get(\t/*IN*/classname * handle, \n                       /*OUT*/ autoid_t *oid );\n  Arguments Description This function will return the autoid of the object ...",t:"classname_autoid_get"},"1117":{i:0.000137636900200668,u:"../Content/Programming/C/Core_Functions/Generated/Class/list_cursor.htm",a:"This function creates a list cursor for (unordered) cursor navigation. Prototype  \n    MCO_RET\tclassname_list_cursor(\t/*IN*/ mco_trans_h trans, \n                       /*OUT*/ mco_cursor_h cursor );\n  Arguments Description This function creates a list cursor for subsequent use by the cursor ...",t:"classname_list_cursor"},"1118":{i:0.000147179412321316,u:"../Content/Programming/C/Core_Functions/Generated/Class/from_cursor.htm",a:"This function returns a handle to the object at the current cursor position. Prototype  \n    MCO_RET\tclassname_from_cursor(\t/*IN*/ mco_trans_h trans, \n                       /*IN*/ mco_cursor_h cursor\n                       /*OUT*/ classname * handle );\n  Arguments Description This function obtains ...",t:"classname_from_cursor"},"1119":{i:0.000323967630959905,u:"../Content/Programming/C/Core_Functions/Generated/Class/fixed_get.htm",a:"This function reads all of the fixed size (not char, string or BLOB) field values in a single call.  Prototype  \n    MCO_RET\tclassname_fixed_get(\t/*IN*/ classname *handle, \n                      /*OUT*/ classname_fixed * value);\n  Arguments Description This function reads all of the fixed size (not ...",t:"classname_fixed_get"},"1120":{i:0.000323967630959905,u:"../Content/Programming/C/Core_Functions/Generated/Class/fixed_put.htm",a:"This function writes all of the fixed size (not char, string or BLOB) field values in a single call.  Prototype  \n    MCO_RET\tclassname_fixed_put(\t/*IN*/ classname *handle, \n                      /*OUT*/ classname_fixed const * value );\n  Arguments Description This function writes all of the fixed ...",t:"classname_fixed_put"},"1121":{i:0.000338910684199785,u:"../Content/Programming/C/Core_Functions/Generated/Field.htm",a:"The functions in the table below are generated for the fields of database classes (classname_fieldname) and structure elements (structname_fieldname) specified in the schema. The actual functions generated depend on the type of field. They are grouped according to the following categories:",t:"Generated Field Functions"},"1122":{i:0.000190460257308104,u:"../Content/Programming/C/Core_Functions/Generated/Field/Scalar.htm",a:"Generated Scalar Field Functions The eXtremeDB scalar database fields are of the following types: signed, unsigned, float, double, numeric (or decimal), ref,  autoid_t, date, time, datetime and rect. Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated Scalar Field Functions"},"1123":{i:0.00229668814337804,u:"../Content/Programming/C/Core_Functions/Generated/Field/Scalar/put.htm",a:"This function assigns a value into a field. Prototype  \n    MCO_RET\tclassname_fieldname_put(\t/*IN*/ classname *handle, \n                          /*IN*/ \u003ctype\u003e value );\n  Arguments Description This form of the function applies to fixed size integer and floating point elements (not char, string, BLOB ...",t:"classname_fieldname_put"},"1124":{i:0.000706415080652077,u:"../Content/Programming/C/Core_Functions/Generated/Field/Scalar/get.htm",a:"This function retrieves a value from a field into a variable. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                        /*OUT*/ \u003ctype\u003e *value);\n  Arguments Description This form of the function applies to elements with a fixed size (not char, string or ...",t:"classname_fieldname_get"},"1125":{i:0.00147452145778726,u:"../Content/Programming/C/Core_Functions/Generated/Field/Scalar/struct_put.htm",a:"This form of the function applies to fixed size integer and floating point elements (not char, string, BLOB or vectors). The C data type of the value parameter is the data type of fieldname as defined in the database schema, and the prototype output by the schema processor to the generated API ...",t:"structname_fieldname_put"},"1126":{i:0.00072707241156085,u:"../Content/Programming/C/Core_Functions/Generated/Field/Scalar/struct_get.htm",a:"This form of the function applies to elements with a fixed size (not char, string or BLOB). The C data type of the value parameter is the data type of fieldname as defined in the database schema, and the prototype output by the schema processor to the generated API header. Handle is returned from ...",t:"structname_fieldname_get"},"1127":{i:0.000162786433338327,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary.htm",a:"The eXtremeDB string and binary database fields are of the following types: fixed length arrays of type char, nchar, wchar,binary and fields of type string  (variable length char array), nstring (  variable length nchar array), wstring (  variable length wchar array) and varbinary ((  variable ...",t:"Generated String and Binary Field Functions"},"1128":{i:0.000134211662735693,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/put_char_string.htm",a:"classname_fieldname_put (char)(string) This function assigns a value into a char or string field. Prototype  \n    MCO_RET\tclassname_fieldname_put(\t/*IN*/ classname *handle,  \n                          /*IN*/ const char * value, \n                          /*IN*/ uint2 len );\n  Arguments Description ...",t:"classname_fieldname_put(char/string)"},"1129":{i:0.000134211662735693,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/put_binary.htm",a:"classname_fieldname_put (binary) This function assigns a value into a binary field. Prototype  \n    MCO_RET\tclassname_fieldname_put(\t/*IN*/ classname *handle,  \n                          /*IN*/ const char * value, \n                          /*IN*/ uint2 len );\n  Arguments Description This form of ...",t:"classname_fieldname_put(binary)"},"1130":{i:0.000605967832645935,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/get_char.htm",a:"This function retrieves a value into a char array. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                        /*OUT*/ char *dest, \n                        /*IN*/ uint2 dest_size);\n  Arguments Description This form of the function applies to elements that are ...",t:"classname_fieldname_get(char)"},"1131":{i:0.000158854582045866,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/get_string.htm",a:"This function retrieves a value into a string. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                        /*OUT*/ char *dest, \n                        /*IN*/ uint2 dest_size, \n                        /*OUT*/ uint2 *len);\n  Arguments Description This form of ...",t:"classname_fieldname_get(string)"},"1132":{i:0.000134211662735693,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/get_binary.htm",a:"This function retrieves a value into a binary array. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                        /*OUT*/ char *dest, \n                        /*IN*/ uint2 dest_size);\n  Arguments Description This form of the function applies to elements that ...",t:"classname_fieldname_get(binary)"},"1133":{i:0.000134211662735693,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/get_varbinary.htm",a:"This function retrieves a value into a varbinary. Prototype  \n    MCO_RET\tclassname_fieldname_get(\t/*IN*/ classname *handle, \n                        /*OUT*/ char *dest, \n                        /*IN*/ uint2 dest_size, \n                        /*OUT*/ uint2 *len);\n  Arguments Description This form ...",t:"classname_fieldname_get(varbinary)"},"1134":{i:0.00012163265184034,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/size.htm",a:"classname_fieldname_size(vector)(string) The size function for a string element returns the number of bytes in the string. For a vector element, it returns the number of elements in the vector. This method is not generated for fixed size arrays. Prototype  \n    ...",t:"classname_fieldname_size(vector/string)"},"1135":{i:0.000343103993401328,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/struct_put_char_string.htm",a:"structname_fieldname_put(char)(string) This form of the function applies to elements that are of type string or char. Handle returned from classname_structname_write_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_put(\t/*IN*/ structname *handle,  \n                           /*IN*/ const char ...",t:"structname_fieldname_put(char/string)"},"1136":{i:0.000604406413326092,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/struct_get_char.htm",a:"This form of the function applies to elements that are of type char. Handle is returned from classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_get(\t/*IN*/ structname *handle, \n                         /*OUT*/ char *dest, \n                         /*IN*/ uint2 ...",t:"structname_fieldname_get(char)"},"1137":{i:0.000134211662735693,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/struct_get_string.htm",a:"This form of the function applies to elements that are of type string. Handle is returned from  classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_get(\t/*IN*/ structname *handle, \n                         /*OUT*/ char *dest, \n                         /*IN*/ uint2 ...",t:"structname_fieldname_get(string)"},"1138":{i:0.00125733338443085,u:"../Content/Programming/C/Core_Functions/Generated/Field/String_Binary/struct_size.htm",a:"structname_fieldname_size(vector)(string) The size function for a string element returns the number of bytes in the string. For a vector element, it returns the number of elements in the vector. Handle is returned from classname_structname_read_handle(). Prototype  \n    ...",t:"structname_fieldname_size(vector/string)"},"1139":{i:0.000162786433338327,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector.htm",a:"Generated Vector Field Functions The eXtremeDB vector fields are of the following types: Fixed length arrays or scalar types (eg. time t[4];) and fields of type vector (variable length array). Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated Vector Field Functions"},"1140":{i:0.0029246448585866,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/alloc_vector.htm",a:"This function allocates pages in the database to hold vector elements. Prototype  \n    MCO_RET\tclassname_fieldname_alloc(\t/*IN*/ classname *handle, \n                           /*IN*/ uint2 size  );\n  Arguments Description This function causes eXtremeDB to allocate pages in the database to hold the ...",t:"classname_fieldname_alloc(vector)"},"1141":{i:0.0013923050101994,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/put_vector.htm",a:"classname_fieldname_put (vector) This form of the function applies to vector elements with a fixed size (not string). The C data type \u003ctype\u003e of the value parameter is the data type of fieldname as defined in the database schema, and the prototype output by the schema processor to the generated API ...",t:"classname_fieldname_put(vector)"},"1142":{i:0.000128221657547429,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/put_vector_string.htm",a:"classname_fieldname_put (vector)(string) This form of the function applies to vectors of strings. Prototype  \n    MCO_RET\tclassname_fieldname_put(\t/*IN*/ classname *handle, \n                          /*IN*/ uint2 index, \n                          /*IN*/ const char * value, \n                          ...",t:"classname_fieldname_put(vector)(string)"},"1143":{i:0.00322094277492725,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/put_range.htm",a:"This function writes num elements from src to the vector fieldname in the object referenced by handle. Put_range methods are only generated for fixed size objects (which excludes strings). Prototype  \n    MCO_RET\tclassname_fieldname_put_range(\t/*IN*/ classname *handle,  \n                             ...",t:"classname_fieldname_put_range(vector)"},"1144":{i:0.00167977721459012,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/get_range.htm",a:"This function returns a reference to an array of vector elements.  Prototype  \n    MCO_RET\tclassname_fieldname_get_range(\t/*IN*/ classname *handle, \n                            /*IN*/ uint2 index, \n                            /*IN*/ uint2 num, \n                            /*OUT*/ \u003ctype\u003e *result);\n  ...",t:"classname_fieldname_get_range(vector)"},"1145":{i:0.000886906694973897,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/at_vector.htm",a:"classname_fieldname_at(vector) This function returns a reference to an element of a vector at specified position. Prototype  \n    MCO_RET\tclassname_fieldname_at(\t/*IN*/ classname *handle, \n                          /*IN*/ uint2 index, \n                          /*OUT*/ \u003ctype\u003e *result );\n  Arguments ...",t:"classname_fieldname_at_vector"},"1146":{i:0.000585375422502687,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/at_vector_char_string.htm",a:"This function returns the element of a vector at a specified position. Prototype  \n    MCO_RET\tclassname_fieldname_at(\t/*IN*/ classname *handle, \n                          /*IN*/ uint2 index, \n                          /*OUT*/ char *result, \n                          /*IN*/ uint2 bufsize, \n          ...",t:"classname_fieldname_at(vector)(char)(string)"},"1147":{i:0.000631775453343104,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/at_len.htm",a:"This function returns a reference to the element of a vector at a specified position. This method is used for vector elements that are NOT char or string elements. See  classname_fieldname_at (vector) for char and string vector elements. Prototype  \n    MCO_RET\tclassname_fieldname_at_len(\t/*IN*/ ...",t:"classname_fieldname_at_len"},"1148":{i:0.000915476340138137,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/at_len_vector.htm",a:"This function returns the size of a char or string element of a vector. Prototype  \n    MCO_RET\tclassname_fieldname_at_len(\t/*IN*/ classname *handle, \n                            /*IN*/ uint2 index, \n                            /*OUT*/ uint2 *len );\n  Arguments Description This function returns the ...",t:"classname_fieldname_at_len(vector)"},"1149":{i:0.00126392239013794,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/size.htm",a:"The size function for a string element returns the number of bytes in the string. For a vector element, it returns the number of elements in the vector. This method is not generated for fixed size arrays. Prototype  \n    MCO_RET\tclassname_fieldname_size(\t/*IN*/ classname *handle, \n                   ...",t:"classname_fieldname_size(vector)(string)"},"1150":{i:0.00246577959833693,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/erase_vector.htm",a:"This function removes an element of a vector from the layout and all indexes the element is included into.  Prototype  \n    MCO_RET\tclassname_fieldname_erase(\t/*IN*/ classname *handle, \n                           /*IN*/ uint2 index );\n  Arguments Description The erase method removes an element of a ...",t:"classname_fieldname_erase(vector)"},"1151":{i:0.00260179051175961,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_alloc_vector.htm",a:"This function causes eXtremeDB to allocate pages in the database to hold the vector elements, which are subsequently assigned with classname_fieldname_put_range() methods. Prototype  \n    MCO_RET\tstructname_fieldname_alloc(\t/*IN*/ structname *handle, \n                            /*IN*/ uint2 size ...",t:"structname_fieldname_alloc(vector)"},"1152":{i:0.000825165977077355,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_put_vector.htm",a:"This form of the function applies to fixed size elements such as uint2 or uint4. Handle returned from classname_structname_write_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_put(\t/*IN*/ structname *handle,  \n                           /*IN*/ uint2 index, \n                           /*IN*/ ...",t:"structname_fieldname_put(vector)"},"1153":{i:0.000128221657547429,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_put_vector_string.htm",a:"This function writes an application-supplied value to an element of a vector within a structure element of a class. Handle returned from classname_structname_write_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_put(\t/*IN*/ structname *handle,  \n                           /*IN*/ uint2 index, ...",t:"structname_fieldname_put(vector)(string)"},"1154":{i:0.00539580560859275,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_put_range.htm",a:"This function writes num elements from src to the vector fieldname in the object referenced by handle. Put_range methods are only generated for fixed size objects (which excludes strings). Handle is returned by classname_structname_write_handle() Prototype  \n    ...",t:"structname_fieldname_put_range(vector)"},"1155":{i:0.00224461313545051,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_get_range.htm",a:"This function returns a reference to an array of vector elements.  Prototype  \n    MCO_RET\tstructname_fieldname_get_range(\t/*IN*/ structname *handle, \n                             /*IN*/ uint2 index, \n                             /*IN*/ uint2 num, \n                             /*OUT*/ \u003ctype\u003e *result ...",t:"structname_fieldname_get_range(vector)"},"1156":{i:0.000128221657547429,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_size.htm",a:"The size function for a string element returns the number of bytes in the string. For a vector element, it returns the number of elements in the vector. Handle is returned from classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_size(\t/*IN*/ structname *handle, \n         ...",t:"structname_fieldname_size(vector)(string)"},"1157":{i:0.000886906694973897,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_at_vector.htm",a:"This function returns a reference to the element of a vector at a specified position.  Prototype  \n    MCO_RET\tstructname_fieldname_at(\t/*IN*/ structname *handle, \n                          /*IN*/ uint2 index, \n                          /*OUT*/ \u003ctype\u003e *result);\n  Arguments Description This function ...",t:"structname_fieldname_at(vector)"},"1158":{i:0.0010376723312095,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_at_vector_char_string.htm",a:"This function returns the element of a vector at a specified position. Prototype  \n    MCO_RET\tstructname_fieldname_at(\t/*IN*/ structname *handle, \n                          /*IN*/ uint2 index, \n                          /*OUT*/ char *result, \n                          /*IN*/ uint2 bufsize, \n        ...",t:"structname_fieldname_at(vector)(char)(string)"},"1159":{i:0.0010376723312095,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_at_len.htm",a:"This function returns the size of a char or string element of a vector. Like ‘C’ arrays, vectors are counted from zero. Handle is returned by classname_structname_read_handle(). Prototype  \n    MCO_RET\tstructname_fieldname_at_len(\t/*IN*/ structname *handle, \n                             /*IN*/ uint2 ...",t:"structname_fieldname_at_len(vector)"},"1160":{i:0.00245472836776724,u:"../Content/Programming/C/Core_Functions/Generated/Field/Vector/struct_erase_vector.htm",a:"The erase method removes an element of a vector from the layout and all indexes the element is included into.  Prototype  \n    MCO_RET\tstructname_fieldname_erase(\t/*IN*/ structname *handle, \n                            /*IN*/ uint2 index );\n  Arguments Description The erase method removes an element ...",t:"structname_fieldname_erase(vector)"},"1161":{i:0.000162786433338327,u:"../Content/Programming/C/Core_Functions/Generated/Field/Numeric.htm",a:"Generated Numeric Field Functions The eXtremeDB numeric database fields are of type numeric or decimal which have generated functions in addition to those for  scalar types. Please use the links in the following table to view details and examples of these generated APIs:",t:"Generated Numeric Field Functions"},"1162":{i:0.000149306475810117,u:"../Content/Programming/C/Core_Functions/Generated/Field/Numeric/from_chars.htm",a:"This function converts a character string to an 8 byte integer value. Prototype  \n    MCO_RET\tclassname_fieldname_from_chars(\t/*OUT*/ mco_int8 scaled_num, \n                              /*IN*/ char const * buf );\n  Arguments Description This function is generated only for decimal or numeric fields. ...",t:"classname_fieldname_from_chars"},"1163":{i:0.000149306475810117,u:"../Content/Programming/C/Core_Functions/Generated/Field/Numeric/to_chars.htm",a:"This function is generated only for decimal or numeric fields. The 8 byte integer value is converted to a character string. Prototype  \n    MCO_RET\tclassname_fieldname_to_chars(\t/*IN*/ mco_int8 scaled_num, \n                           /*OUT*/ char * buf, \n                           /*IN*/ int ...",t:"classname_fieldname_to_chars"},"1164":{i:0.000149306475810117,u:"../Content/Programming/C/Core_Functions/Generated/Field/Numeric/put_chars.htm",a:"classname_fieldname_put_chars(numeric or decimal) This function assigns a numeric value from a character string argument. Prototype  \n    MCO_RET\tclassname_fieldname_put_chars(\t/*IN*/ classname *handle,  \n                               /*IN*/ const char * buf );\n  Arguments Description This function ...",t:"classname_fieldname_put_chars(numeric/decimal)"},});