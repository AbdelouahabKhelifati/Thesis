define({"1298":{i:0.000341818061868679,u:"../Content/Programming/C/SDK_Samples/Core_Samples/17-Statistics_Dbcalcapi.htm",a:"This sample demonstrates use of the  database calculator API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    17_statistics_dbcalcapi\n      But it is more instructive to ...",t:"17-Statistics_Dbcalcapi"},"1299":{i:0.000318498003948938,u:"../Content/Programming/C/SDK_Samples/Core_Samples/17-Statistics_Dbstat.htm",a:"This sample demonstrates use of the  runtime statistics API functions mco_class_stat_get(), mco_index_stat_num() and mco_index_stat_get(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin ...",t:"17-Statistics_Dbstat"},"1300":{i:0.000544546775478887,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_BSE.htm",a:"This sample demonstrates binary schema evolution of a persistent database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    18_backup_bse\n      But it is more instructive to ...",t:"18-Backup_BSE"},"1301":{i:0.000544546775478887,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Db.htm",a:"  This sample demonstrates saving an image (snapshot) of a database to disk using mco_db_save() and restoring the database using mco_db_load(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the ...",t:"18-Backup_Db"},"1302":{i:0.000544546775478887,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Disk.htm",a:"This sample demonstrates backup of a persistent database using mco_disk_save() and restore using mco_disk_load(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"18-Backup_Disk"},"1303":{i:0.000544546775478887,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Disk_File.htm",a:"This sample demonstrates backup of a persistent database using mco_disk_save() and restore using mco_disk_load_file(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"18-Backup_Disk_File"},"1304":{i:0.000522538707523964,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Inmem.htm",a:"This sample demonstrates saving an in-memory database using mco_inmem_save() and restore using mco_inmem_load(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"18-Backup_Inmem"},"1305":{i:0.000629353815063843,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Migrate.htm",a:"This sample demonstrates migrating an existing persistent database to a more recent eXtremeDB build and/or a different schema. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n  ...",t:"18-Backup_Migrate"},"1306":{i:0.000177358353696965,u:"../Content/Programming/C/SDK_Samples/Core_Samples/18-Backup_Online.htm",a:"This sample demonstrates library level incremental backup using mco_backup_create() and restore using mco_backup_restore(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"18-Backup_Online"},"1307":{i:0.000364913341271805,u:"../Content/Programming/C/SDK_Samples/Core_Samples/19-Recovery_Diskrecovery.htm",a:"This sample demonstrates automatic recovery of a persistent database. How to Run  A database is opened and its current contents displayed. Then 10 records are created in separate transactions.  On the 11th transaction the program exits to simulate a system failure.  The next time the program ...",t:"19-Recovery_Diskrecovery"},"1308":{i:0.000404786595767881,u:"../Content/Programming/C/SDK_Samples/Core_Samples/19-Recovery_Sniffer.htm",a:"This sample demonstrates use of db_sniffer() to detect dead connections.  How to Run Start sniffer without command line arguments to use the default value of n_iterations=10000. Then start a second instance of sniffer with the command line argument \u002710\u0027  (n_iterations=10). The second process will ...",t:"19-Recovery_Sniffer"},"1309":{i:0.000234919986431101,u:"../Content/Programming/C/SDK_Samples/Core_Samples/21-Overflow_Persistent.htm",a:"This sample demonstrates the use of a memory allocation callback with a persistent database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    21_overflow_persistent\n      ...",t:"21-Overflow_Persistent"},"1310":{i:0.00012163265184034,u:"../Content/Programming/C/SDK_Samples/Core_Samples/21-Overflow_Persistent_Cache.htm",a:"This sample demonstrates how to predict and prevent the MCO_E_DISK_PAGE_POOL_EXHAUSTED error. To avoid the MCO_E_DISK_PAGE_POOL_EXHAUSTED error it is necessary to inspect value of the pinned_pages field of structure  mco_disk_cache_info_t. The count of pinned pages should be less than a threshold ...",t:"21-Overflow_Persistent-Cache"},"1311":{i:0.00025910430362702,u:"../Content/Programming/C/SDK_Samples/Core_Samples/21-Overflow_Transient.htm",a:"This sample demonstrates the use of a memory allocation callback with a transient database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    21_overflow_transient\n      But ...",t:"21-Overflow_Transient"},"1312":{i:0.000357293050752884,u:"../Content/Programming/C/SDK_Samples/Core_Samples/22-HTTPView.htm",a:"This sample demonstrates the use of mcohv_start(),mcohv_stop() and mcohv_shutdown() to enable viewing database content and structure via a web browser. The browser page displays the database structure, statistics, and data; and it allows the user to modify data interactively. How to Run See ...",t:"22-HTTPView"},"1313":{i:0.000303426842093207,u:"../Content/Programming/C/SDK_Samples/Core_Samples/23-HTTPViewpmon.htm",a:"This sample demonstrates the use of the performance monitor WEB interface integrated into the HTTP database viewer. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"23-HTTPViewpmon"},"1314":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/24-rest_st.htm",a:"This sample demonstrates the use of the  Web Services  REST AP in a single-threaded application. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    24_rest_st.exe\n      But it ...",t:"24-rest_st"},"1315":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/24-rest_mt.htm",a:"This sample demonstrates the use of the  Web Services  REST API with the HTTP server. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    24_rest_mt.exe\n      But it is more ...",t:"24-rest_mt"},"1316":{i:0.000124800250190298,u:"../Content/Programming/C/SDK_Samples/Core_Samples/25-perfmon.htm",a:"This sample demonstrates the use of the  Performance Monitor  C API to retrieve counters from the perfmon database using  UDA . How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n ...",t:"25-perfmon"},"1317":{i:0.000341624488437854,u:"../Content/Programming/C/SDK_Samples/Cluster_Samples.htm",a:"The eXtremeDB Cluster packages include sample applications that demonstrate basic distributed database functionality. The samples require running multiple instances (at least two) of the application as separate processes on the same machine (node) or on different nodes in a network. Most of the ...",t:"C API Cluster Samples"},"1318":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Attach.htm",a:"This sample demonstrates how to re-attach a node to a cluster using mco_cluster_attach(). The nodes begin and work together, then each node detaches and performs local database updates; then reconnects to the cluster. How to Run In a console window run:  \n    cluster_attach 2 0\n      Then in a ...",t:"Cluster_Attach"},"1319":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Binev.htm",a:"This sample demonstrates using the Binary Schema Evolution feature of eXtremeDB to open different versions of the database cldb on different cluster nodes. Note that schema files schema1.mco, schema2.mco and schema3.mco have slightly different field types and the metadictionary functions ...",t:"Cluster_Binev"},"1320":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/Cluster_DDL.htm",a:"Demonstrates the use of SQL DDL statements like \"CREATE TABLE ...\", \"CREATE INDEX ...\", \"DROP TABLE ...\", etc. in a cluster environment. It starts several threads (the number of threads is determined by command-line arguments). Some threads execute DDL statements; others are running normal DML ...",t:"Cluster_DDL"},"1321":{i:0.00109836036723217,u:"../Content/Programming/C/SDK_Samples/Cluster/Demo.htm",a:"This sample demonstrates basic cluster performance allowing the user to vary the workload by specifying command line arguments as follows: -w \u003cthread_num\u003e - the number of WRITE threads. More threads usually lead to higher overall performance -l \u003cobj_size\u003e - the object size in bytes (min 8 bytes). ...",t:"Cluster_Demo"},"1322":{i:0.000987847258973431,u:"../Content/Programming/C/SDK_Samples/Cluster/Discover.htm",a:"This sample demonstrates the use of function mco_cluster_discover() to determine the list of active nodes. How to Run To run this sample open three console windows and set the eXtremeDB installation root directory as the current working directory. Then within 5 seconds: In one console window run:  \n ...",t:"Cluster_Discover"},"1323":{i:0.000987847258973431,u:"../Content/Programming/C/SDK_Samples/Cluster/Dynamic.htm",a:"This sample demonstrates how to connect a node to a cluster if it was not known in advance. How to Run In a console window run:  \n    cluster_dynamic \u003cmain_addr:main_port\u003e\n      Then in additional console windows run:  \n    cluster_dynamic \u003cmain_addr:main_port\u003e \u003cown_addr:own_port\u003e\n  But it is more ...",t:"Cluster_Dynamic"},"1324":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Events.htm",a:"This sample demonstrates the use of synchronous and asynchronous events in a cluster environment. It creates a cluster database, registers synchronous and asynchronous event handlers, then performs _new(), _update() and _delete() operations. (Note that the delete event handler can return a code ...",t:"Cluster_Events"},"1325":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/MT.htm",a:"This sample demonstrates the use of multiple listener threads. This technique may be advisable for applications having “heavy” transactions (i.e. transactions which operate on many objects requiring updates to many indexes, etc.). How to Run In a console window run:  \n    cluster_mt 2 0\n      Then ...",t:"Cluster_MT"},"1326":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Nodes.htm",a:"This sample demonstrates synchronization if one of the nodes in a cluster fails. To see how the synchronization works it is necessary for the first run of cluster_nodes on node 0 to exit after a few seconds, then when the sample is started again on node 0 and node 1, the instance on node 0 will ...",t:"Cluster_Nodes"},"1327":{i:0.00108428469683188,u:"../Content/Programming/C/SDK_Samples/Cluster/Open.htm",a:"This is the simplest cluster example. It creates a cluster database, then prints runtime information and exits. (It is analogous to the core sample  02-open_conv). How to Run In a console window run:  \n    cluster_open 2 0\n      Then in a second console window run:  \n    cluster_open 2 1\n  But it is ...",t:"Cluster_Open"},"1328":{i:0.00108428469683188,u:"../Content/Programming/C/SDK_Samples/Cluster/Perf.htm",a:"This sample shows basic performance statistics (analogous to the core sample  08-benchmarks_perf ). How to Run In a console window run:  \n    cluster_perf 2 0\n      Then in a second console window run:  \n    cluster_perf 2 1\n  But it is more instructive to run one instance in your development ...",t:"Cluster_Perf"},"1329":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Quorum.htm",a:"This sample demonstrates how to use the quorum callback technique instead of the standard qrank mechanism. How to Run In a console window run:  \n    cluster_quorum 2 0\n      Then in a second console window run:  \n    cluster_quorum 2 1\n  But it is more instructive to run one instance in your ...",t:"Cluster_Quorum"},"1330":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/RW.htm",a:"This sample demonstrates how to tune read-write workload on a per-thread basis. For each thread the following parameters are specified to tune performance (see thr_p in main.c): node_id: on which node the thread will run write_percent: the ratio of write/read operations table_mask: an integer bit ...",t:"Cluster_RW"},"1331":{i:0.000870416117721484,u:"../Content/Programming/C/SDK_Samples/Cluster/Scatter.htm",a:"This sample demonstrates the use of the distributed class and the mco_cluster_scatter() / mco_cluster_gather() calls to manually synchronize database content on different nodes. How to Run In a console window run:  \n    cluster_scatter 2 0\n      Then in a second console window run:  \n    ...",t:"Cluster_Scatter"},"1332":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Shared.htm",a:"This sample demonstrates the use of shared memory in a cluster environment. (Note that several processes can be run on the same node. ) How to Run In a console window run:  \n    cluster_shared 127.0.0.1:20000 2 0\n      This first process for node 0 will create the cluster database in shared memory. ...",t:"Cluster_Shared"},"1333":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/Cluster_SQL.htm",a:"Demonstrates the use of SQL DDL  statements like \"CREATE TABLE ...\", \"CREATE INDEX ...\", \"DROP TABLE ...\", etc. in a cluster environment. How to Run In a console window run  \n    cluster_sql 2 0\n      Then in a second console window run  \n    cluster_sql 2 1\n  But it is more instructive to run one ...",t:"Cluster_SQL"},"1334":{i:0.000992196560501281,u:"../Content/Programming/C/SDK_Samples/Cluster/Window.htm",a:"This sample demonstrates the use of the transaction window feature to increase overall cluster performance. The sample starts 10 WRITE threads and prints TPS (Transactions Per Second) values for window sizes 1 and 6 to demonstrate the performance gain. How to Run In a console window run:  \n    ...",t:"Cluster_Window"},"1335":{i:0.0003086041300517,u:"../Content/Programming/C/SDK_Samples/HA_Samples.htm",a:"The eXtremeDB High Availability packages include sample applications that demonstrate basic HA functionality. All sub-directories except haswitch contain two sub-directories master and replica which contain the project files for the two parts of each sample. Note that HA applications can communicate ...",t:"C API High Availability Samples"},"1336":{i:0.000741598713907864,u:"../Content/Programming/C/SDK_Samples/HA/Asynch.htm",a:"This example shows eXtremeDB High Availability in asynchronous mode. The master application creates and  populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the master database, ...",t:"HA_Asynch"},"1337":{i:0.000839801854653074,u:"../Content/Programming/C/SDK_Samples/HA/Binev.htm",a:"This sample demonstrates the eXtremeDB High Availability binary schema evolution feature. The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the ...",t:"HA_Binev"},"1338":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Cancel.htm",a:"This sample demonstrates the eXtremeDB High Availability cancellation feature. The replica creates a cancellation socket, and starts a cancel thread, then creates duplicates of the master database, synchronizes them with the master database, then receives commit data from the master and performs the ...",t:"HA_Cancel"},"1339":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Cascade.htm",a:"This sample demonstrates how to use cascade replication in eXtremeDB High Availability. The master application creates and  populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. The hacascade-rplmst application connects to the ...",t:"HA_Cascade"},"1340":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Events.htm",a:"This sample demonstrates eXtremeDB High Availability synchronous and asynchronous events .The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the ...",t:"HA_Events"},"1341":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Extend.htm",a:"This sample demonstrates extending a database in eXtremeDB High Availability. The master application creates the database, then enters a loop inserting objects and at intervals extending the database memory. Replica applications receive notification when the master has extended the database and ...",t:"HA_Extend"},"1342":{i:0.000741598713907864,u:"../Content/Programming/C/SDK_Samples/HA/Filter.htm",a:"This sample application demonstrates eXtremeDB High Availability with partial replication filters on replica and master sides. The keyword local in the schema indicates what classes are subject to the partial replication. For example, consider the following schema definitions. For the master ...",t:"HA_Filter"},"1343":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Force.htm",a:"This sample demonstrates eXtremeDB High Availability \"kill\" feature. The master application creates and populates the database, then enters a loop creating, updating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the master database ...",t:"HA_Force"},"1344":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Hotsync.htm",a:"This sample demonstrates eXtremeDB High Availability hot synchronization  feature. The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the master ...",t:"HA_Hotsync"},"1345":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Mcast.htm",a:"This sample demonstrates the eXtremeDB High Availability multicast mode. The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the master database, ...",t:"HA_Mcast"},"1346":{i:0.000741598713907864,u:"../Content/Programming/C/SDK_Samples/HA/Multichan.htm",a:"This sample shows how to use multiple NW channel implementations in an application. The master application creates and  populates the database, then enters a loop creating and deleting the objects as it waits for connection requests from replicas both via TCP and UDP channels. The hamultichan_rpltcp ...",t:"HA_Multichan"},"1347":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Notify.htm",a:"This sample demonstrates eXtremeDB High Availability with notification on the replica side. The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Replica applications create duplicates of the ...",t:"HA_Notify"},"1348":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Perf.htm",a:"This benchmark test provides some eXtremeDB High Availability performance statistics for create, update and delete operations in different HA modes.  Read-only operations (e.g. searching or getting field values) are \"local\" in nature, so they are not measured.  The replica also measures ...",t:"HA_Perf"},"1349":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Shared.htm",a:"This sample demonstrates eXtremeDB High Availability shared commit mode. The master application creates and populates the database, then enters a loop creating and deleting objects as it waits for connection requests from replicas. Once the \"primary master\" is started, a \"secondary master\" ...",t:"HA_Shared"},"1350":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Simple.htm",a:"This sample demonstrates basic eXtremeDB High Availability functionality. The master application creates the database, then waits for connection requests from replicas. After the replica attaches, master creates several objects in the database. Replica applications create duplicates of the master ...",t:"HA_Simple"},"1351":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Stateful.htm",a:"This sample demonstrates eXtremeDB High Availability stateful replication.  In stateful replication  the master application is informed of the state of a replica’s database when the replica connects.  Since a system failure could result in a replica being dropped while transactions are in progress, ...",t:"HA_Stateful"},"1352":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Switch.htm",a:"This sample demonstrates how to switch between master and replica eXtremeDB High Availability applications. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory.  In a console window ...",t:"HA_Switch"},"1353":{i:0.000727583541288641,u:"../Content/Programming/C/SDK_Samples/HA/Window.htm",a:"This sample demonstrates the    transaction window  feature.  The transaction window allows setting the size of  the transaction packet.  The replica sends a reply only once per transaction packet. Non-yet-confirmed transactions are saved on the master side.  The master application creates and ...",t:"HA_Window"},"1354":{i:0.000480540760100894,u:"../Content/Programming/C/SDK_Samples/SQL_Samples.htm",a:"The  build procedure for the  C API SDK samples  on all supported platforms are described in the \"Getting Started\" section. Note that these samples demonstrate how to open and initialize an eXtremeDB database for SQL access using the low-level C API. (Note that these C functions are an alternative ...",t:"C API Embedded SQL Samples"},"1355":{i:0.000740524745286557,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Access.htm",a:"This sample demonstrates opening, connecting to and closing a database for SQL access using the mcosql_open(), and mcosql_close() functions. Note also that the memory allocator to be used by the SQL engine is registered by calling the mcosql_initialize_memory_manager()  function and the SQL runtime ...",t:"Access"},"1356":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Allocators.htm",a:"This sample demonstrates substituting custom memory allocation functions mem_alloc() and mem_free()  for the standard C runtime heap management functions malloc() and free(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"Allocators"},"1357":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Initialize.htm",a:"This sample demonstrates how to initialize a SQL session by calling mcosql_initialize_memory_manager()  and mcoapi_initialize(). How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory: ...",t:"Initialize"},"1358":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Multifile.htm",a:"Demonstrates opening, connecting to, populating and closing a multifile database. Note that, in addition to the four memory devices commonly defined for persistent storage applications, two additional devices are defined for added database storage. And all the database storage devices are defined as ...",t:"Multifile"},"1359":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Mursimul.htm",a:"This sample demonstrates insert, select, update, and delete operations in two database instances using the  MURSIW  transaction manager. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin ...",t:"Mursimul"},"1360":{i:0.000717173306071879,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/Transactions.htm",a:"This sample demonstrates the use of C language API functions to perform basic insert/update/delete and data retrieval operations with the SQL database engine. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run ...",t:"Transactions"},"1361":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/HA_SQL_Master.htm",a:"This sample demonstrates the master-side implementation of eXtremeDB High Availability using the SQL API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory.  In a console window ...",t:"HA_SQL_Master"},"1362":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/HA_SQL_Replica.htm",a:"This sample demonstrates the replica-side implementation of eXtremeDB High Availability using the SQL API. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory.  In a console window ...",t:"HA_SQL_Replica"},"1363":{i:0.000655284622841314,u:"../Content/Programming/C/SDK_Samples/SQL_Samples/TPC_ODBC.htm",a:"This sample demonstrates an implementation of the Transaction Processing Performance Council Benchmark B using standard ODBC functions. How to Run See instructions  here  on how to build this and other samples on your development platform. (Also note that there are instructions  here  for installing ...",t:"TPC_ODBC"},"1364":{i:0.000282757114558489,u:"../Content/Programming/C/SDK_Samples/Sequence_Samples.htm",a:"C API Sequence Samples The  build procedure for the  C API SDK samples  on all supported platforms are described in the \"Getting Started\" section.  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"C API Sequence Samples"},"1365":{i:0.000419354930064698,u:"../Content/Programming/C/SDK_Samples/Sequence/Api.htm",a:"This sample demonstrates the use of various operations over the sequence data type. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    sequences_api_c\n      But it is more ...",t:"Sequences_API"},"1366":{i:0.000419354930064698,u:"../Content/Programming/C/SDK_Samples/Sequence/Basic.htm",a:" This sample demonstrates the use of the sequence data type. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    sequences_basic\n      But it is more instructive to run it in ...",t:"Sequences_Basic"},"1367":{i:0.000419354930064698,u:"../Content/Programming/C/SDK_Samples/Sequence/Struct.htm",a:"This sample demonstrates the use of the sequence data type using structures. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    sequences_struct\n      But it is more ...",t:"Sequences_Struct"},"1368":{i:0.000386145176531336,u:"../Content/Programming/C/SDK_Samples/TL_Samples.htm",a:"C API Transaction Logging Samples The  build procedures for the  C API SDK samples  on all supported platforms are described in the \"Getting Started\" section.  Please use the links below to view the description and specific instructions for individual samples in the following sub-directories:",t:"C API Transaction Logging Samples"},});