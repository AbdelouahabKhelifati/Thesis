define({"479":{i:0.000157377489214653,u:"../Content/Users_Guides/SQL/Lua/Scripting.htm",a:"Lua scripts can be used as client code for eXtremeSQL A Lua script will typically include code to load the eXtremeDB  module and initialize the  runtime, create/load and connect a database, then execute SQL queries and retrieve a result set. For example: First load the eXtremeDB module:  \n    ...",t:"Lua Scripting"},"480":{i:0.000157377489214653,u:"../Content/Users_Guides/SQL/Lua/eXtremeSQL_Interface.htm",a:"Connections A connection is used to access most of the database features. When a UDF is called, the database connection is already established as  predefined variable con. When a script or the console is used, it’s necessary to call function connect() to explicitly make a connection. The argument of ...",t:"Lua eXtremeSQL Interface"},"481":{i:0.000157377489214653,u:"../Content/Users_Guides/SQL/Lua/Tips_and_Tricks.htm",a:"Using the LuaJIT Console It is possible to use the LuaJIT console REPL (Read-Eval-Print Loop) to instantly enter eXtremeDB commands and see their results. To do this, assuming the required environment variables have already been set (see page  Quick Start ), just start the supplied luajit ...",t:"Lua Tips and Tricks"},"482":{i:0.000183352531021351,u:"../Content/Users_Guides/SQL/Lua/API_Reference.htm",a:"The eXtremeDB Lua API consists of the  functions  and  classes  described in the following sections. (Please see the  Lua 5.3 Reference Manual for detailed information on the Lua language.) Functions The Lua functions are described in the following sections. initRuntime() This function loads and ...",t:"Lua API Reference"},"483":{i:0.00216951051044775,u:"../Content/Appendix/lua-5.3.4/doc/manual.html",a:"\nLua 5.3 Reference Manual\n \nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes\n\n \nCopyright © 2015–2017 Lua.org, PUC-Rio.\nFreely available under the terms of the\n Lua license .\n contents \n·\n index \n·\n other versions 1 –  Introduction \nLua is a powerful, efficient, lightweight, ...",t:"Lua 5.3 Reference Manual"},"484":{i:0.000340861465853646,u:"../Content/Users_Guides/SQL/SQL_Language_Reference/Functions/Aggregate_Functions.htm",a:"eXtremeSQL Aggregate Functions Please use the links in the table below to view the eXtremeSQL aggregate functions:",t:"eXtremeSQL Aggregate Functions"},"485":{i:0.000240593286775335,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Dynamic Memory_Allocation.htm",a:"When executing SQL queries a \"runtime\" object is created. This runtime includes its own allocator method that is used for all memory allocation in the context of this query. When the query finishes, all memory allocated by this allocator is released automatically. The allocator object is a member of ...",t:"Dynamic Memory Allocation in SQL"},"486":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Full_Outer_Joins.htm",a:"eXtremeSQL Full Outer Joins eXtremeSQL supports right and full outer joins which are implemented using a hash join algorithm, where the inner (right) table is materialized in a hash table. An example of full outer join queries can be found in  samples/xsql/scripts/full_join.sql",t:"eXtremeSQL Full Outer Joins"},"487":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/ASOF_Joins.htm",a:"eXtremeSQL supports asof joins which are normally used with date / time columns to select table rows within specified date or time ranges. The keyword asof can be used for inner joins (returns only matched rows) and outer joins (returns nulls for the inner table columns where no match is found). The ...",t:"eXtremeSQL Asof Joins"},"488":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Numeric_Fields.htm",a:"eXtremeSQL understands the standard SQL type NUMERIC. It stores NUMERIC fields internally as 8 byte integer values with a specified width and precision. When performing operations (in SQL statements) on database fields, and converting the resulting values to result set rows, the precision of the ...",t:"eXtremeSQL Numeric Fields"},"489":{i:0.000932509697163966,u:"../Content/Users_Guides/SQL/SQL_Datetime.htm",a:"In SQL date, and time fields are converted to type the eXtremeDB type datetime for all operations. The only difference is how they are formatted for output. So, for example a date field day could be incremented day+5 and the result will be of type date.  For an overview see page  Date, Time and ...",t:"Managing Date and Time Fields  in SQL"},"490":{i:0.000586375600440515,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/SQL_Statement_Strings.htm",a:"There is no  simple limit on the length of SQL statements in eXtremeSQL. It depends on the API or tool being used.  When using the C API functions mcosql_execute_statement() or mcosql_execute_query() or the C++ class SqlEngine methods executeStatement() or executeQuery(), the statement of query ...",t:"SQL Statement Strings in eXtremeSQL"},"491":{i:0.0002570305952158,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Bitwise_Operations.htm",a:"It is sometimes useful to perform operations on an integer field that is actually a bitmask containing sets of boolean values represented by the binary bits. For example an 8-byte integer value might contain 64 bits of information regarding a bank of switches that are either 1=on or 0=off. To ...",t:"Bitwise Operations in SQL"},"492":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Views.htm",a:"It can be useful to create and manipulate Views of tables. To define a view it is necessary to define table \"Views\" in the database schema as follows:  \n    class Views\n    {\n        string name;    // name of the view\n        string body;    // table name and fields present in the view\n \n        ...",t:"eXtremeSQL Views"},"493":{i:0.000191700178081401,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Virtual_Tables.htm",a:"It can be useful to create and manipulate temporary tables for data of a non-permanent nature.   Temporary tables  in eXtremeSQL are called “Virtual Tables” and have the following advantages: They remain in memory for the duration of the application, or until the database is closed; They can be ...",t:"eXtremeSQL Virtual Tables"},"494":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/RSQL_And_Security_Measures.htm",a:"Remote SQL (RSQL) applications can run on different processors even with different architectures. For example validation tests have been run using database shards provided by servers running on the following systems: Itanium processor (big-endian) x64 x86 processor (little-endian) x64 x86 processor ...",t:"eXtremeSQL Remote SQL and Security Measures"},"495":{i:0.00012163265184034,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/OpenSSL.htm",a:"In order to facilitate secure communications, authorization and authentication, eXtremeDB Transport Layer security is implemented using Secure Sockets Layer (TLS/SSL). OpenSSL was chosen as one of the most widespread and well-recognized TLS protocol implementations. Enabling OpenSSL support The ...",t:"eXtremeSQL OpenSSL Support for Remote SQL"},"496":{i:0.000132334186678902,u:"../Content/Users_Guides/SQL/SQL_Implementation_Details/Two_Phase_Commit.htm",a:"Some applications require a more elaborate control of the transaction commit processing; specifically, committing the transaction in two steps (phases).  The first phase writes the data into the database, inserts new data into indexes and checks index restrictions (uniqueness) (altogether, the ...",t:"Using the eXtremeSQL Two-Phase Commit"},"497":{i:0.000510650293231215,u:"../Content/Users_Guides/SQL/SQL_Transaction_Control.htm",a:"As explained in the  eXtremeDB Transaction Control  page, a transaction is a unit of work with the database and all database operations must be implemented within a transaction block. By default, eXtremeSQL  executes all statements within a single transaction; i.e. the runtime implicitly performs a ...",t:"Transaction Control in eXtremeSQL"},"498":{i:0.000236285555927368,u:"../Content/Users_Guides/SQL/C_API/Transactions.htm",a:" As explained in the  eXtremeDB User Guide , all eXtremeDB database operations are performed within the context of a transaction. A READ_ONLY transaction is started for database read operations, and then the transaction is committed or rolled back after the read is completed. Likewise, all database ...",t:"Managing eXtremeSQL Transactions in C "},"499":{i:0.000315685828924977,u:"../Content/Users_Guides/SQL/C++_API/Transactions.htm",a:"All eXtremeDB database access is performed within transactions to assure database integrity by enforcing the ACID principles (see the  eXtremeDB User Guide  for a detailed description of transaction processing). When using the eXtremeSQL API, transaction processing is implicit , i.e. transactions ...",t:"Managing eXtremeSQL Transactions in C++"},"500":{i:0.000202277796434644,u:"../Content/Users_Guides/SQL/Java_API/Transactions.htm",a:"All eXtremeDB database access is performed within transactions to assure database integrity by enforcing the ACID principles (see the  eXtremeDB User Guide  for a detailed description of transaction processing). When using the eXtremeSQL API, transaction processing is implicit , i.e. transactions ...",t:"Managing eXtremeSQL Transactions in Java"},"501":{i:0.000199830366834106,u:"../Content/Users_Guides/SQL/Csharp_API/Transactions.htm",a:"All eXtremeDB database access is performed within transactions to assure database integrity by enforcing the ACID principles (see the  eXtremeDB User Guide  for a detailed description of transaction processing). When using the eXtremeSQL API, transaction processing is implicit , i.e. transactions ...",t:"Managing eXtremeSQL Transactions in C#"},"502":{i:0.000364428849008189,u:"../Content/Users_Guides/SQL/SQL_Distributed_Engine.htm",a:"The eXtremeSQL Distributed SQL Engine provides limited support for the database sharding architecture for eXtremeDB Cluster installations.  Why is it limited? Most full-blown distributed database engines (such as the one found in Oracle for example) normally create an execution plan based on the ...",t:"Using the eXtremeSQL Distributed SQL Engine"},"503":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Query_Result_Processing.htm",a:"SQL Query result processing Please use the links below to view detailed explanations and examples  of the  methods for query result processing in your development environment: ",t:"SQL Query result processing"},"504":{i:0.0002062239906632,u:"../Content/Users_Guides/SQL/SQL_Optimizing_Query_Performance.htm",a:"Query performance with eXtremeSQL can be improved by the proper use of indexes and understanding how the Query Optimizer works. Please use the following link for a detailed description of the  eXtremeSQL Query Optimizer .  Covering and Inclusive indexes In many cases, query performance on in-memory ...",t:"Optimizing eXtremeSQL Query Performance"},"505":{i:0.000294119124520827,u:"../Content/Users_Guides/SQL/SQL_Optimizer.htm",a:"eXtremeSQL uses a rule-based query optimizer to support goals of  1) predictable and fast execution of queries, and  2) maximum developer flexibility to tune the queries and indirectly specify the optimal execution plans by arranging the tables and filters according to simple rules.  The eXtremeSQL ...",t:"eXtremeSQL Optimizer"},"506":{i:0.000383438681757888,u:"../Content/Users_Guides/SQL/SQL_Data_Export_Import.htm",a:"xSQL provides a number of backup options in the form of  specific commands  to backup the database or save a snapshot as well as to save the database metadata and dictionary. These operations can also be executed via the following function calls in SQL select statements:  \n    select backup( ...",t:"SQL Data Import and Export operations"},"507":{i:0.000328811640483001,u:"../Content/Users_Guides/SQL/SQL_Import.htm",a:" Importing Data From External Files in SQL As explained in the  page  xSQL Data Export and Import Operations, it can be useful to import external data  from CSV files using the xSQL import command. Data can also be imported using the embedded eXtremeSQL APIs. The SQL statement syntax and ...",t:" Importing Data From External Files in SQL"},"508":{i:0.000838983182383188,u:"../Content/Users_Guides/SQL/SQL_Using_Sequences.htm",a:"Inserting and Updating Sequences with SQL  Sequences  can be  inserted or updated through SQL in four different ways: 1)\tAs a scalar value:      \n    INSERT OR UPDATE INTO t VALUES (1, 1);\n      2)\tAs an array:  \n    INSERT OR UPDATE INTO t VALUES (1, [1,2,3]);\n      3)\tAs a string:  \n    INSERT OR ...",t:"Using Sequences in SQL"},"509":{i:0.000950418422236231,u:"../Content/Programming/ODBC_API.htm",a:"This topic describes the eXtremeSQL ODBC Driver implementation and how to use the ODBC driver to connect to existing eXtremeDB databases. (Please use the following links for details on configuring the ODBC DSN on  Windows  systems or on  Unix-Linux  systems.) The objective of the ODBC Driver is to ...",t:"The eXtremeSQL ODBC API"},"510":{i:0.000600989806954569,u:"../Content/Programming/JDBC_API.htm",a:"This topic describes the eXtremeSQL JDBC Driver implementation and how to use the JDBC driver to connect to existing eXtremeDB databases. The eXtremeSQL JDBC driver provides access for Java applications to the eXtremeSQL server using a widely applicable industry connectivity standard. The eXtremeSQL ...",t:"The eXtremeSQL JDBC API"},"511":{i:0.000176259693115226,u:"../Content/Users_Guides/SQL/SQL_Features/DBeaver.htm",a:"To use DBeaver as a GUI front-end to eXtremeDB databases, the only necessary component of the eXtremeSQL package is its JDBC driver. In summary, the steps to install and use DBeaver are: 1.\tDownload and install the proper version of the DBeaver DB manager 2.\tUse xSQL as eXtremeSQL server or ...",t:"eXtremeSQL  Support for DBeaver"},"512":{i:0.000998872994178792,u:"../Content/Users_Guides/High_Availability_Users_Guide.htm",a:"eXtremeDB High Availability is McObject\u0027s in-memory and on-disk embedded database solution for applications such as network and telecom gear that require the highest degree of reliability.   The following  topics explain the general  principles of eXtremeDB High Availability application design and ...",t:"High Availability User\u0027s Guide"},"513":{i:0.000266737739413078,u:"../Content/Users_Guides/HA/HA_Introduction.htm",a:"As explained in the  eXtremeDB High Availability User\u0027s Guide , eXtremeDB High Availability is McObject\u0027s in-memory and on-disk embedded database solution for applications such as network and telecom gear that require the highest degree of reliability.  This introduction describes eXtremeDB High ...",t:"Introduction to eXtremeDB High Availability"},"514":{i:0.000226407992752617,u:"../Content/Users_Guides/HA/HA_Theory.htm",a:"Computing environments configured to provide nearly full-time availability are known as high availability systems. Typically they have redundant hardware and software and do not have single “points-of-failure”, i.e. hardware or software components that could fail. When failures occur, the failover ...",t:"eXtremeDB HA Theory of Operation"},"515":{i:0.000263298114838781,u:"../Content/Users_Guides/HA/HA_Overview.htm",a:"When employing synchronous replication, eXtremeDB High Availability implements a time-cognizant two-phase commit replication protocol (synchronous replication) that provides the means to instantiate one or more standby database instances and bring the standby to a state of synchronization with the ...",t:"eXtremeDB HA Overview"},"516":{i:0.00661020501157419,u:"../Content/Users_Guides/HA/HA_Applications.htm",a:"Two-layered architecture eXtremeDB High Availability uses a two-layered architecture that facilitates the development of HA-enabled eXtremeDB-based applications.  The higher layer is called the protocol layer.  This layer is responsible for the high availability logic of the application.  The lower ...",t:"eXtremeDB HA Applications"},"517":{i:0.00110603546807033,u:"../Content/Users_Guides/HA/HA_Synchronization.htm",a:"Synchronization Modes For eXtremeDB High Availability applications there are two orthogonal operations to be aware of: initial synchronization and transaction replication. The initial synchronization is performed once after the replica has attached and can be static (the default) or hot-sync. These ...",t:"HA Synchronization Modes"},"518":{i:0.000338732108453858,u:"../Content/Users_Guides/HA/HA_Synchronous_Replication.htm",a:"Synchronous Replication Synchronous replication using the time-cognizant, two-phase commit protocol is the default mode. So it is sufficient for C/C++  master applications to call:      \n    mco_HA_master_params_t MasterParams;\n    mco_HA_master_params_init( \u0026MasterParams );\n    ...",t:"HA Synchronous Replication"},"519":{i:0.00022121452468077,u:"../Content/Users_Guides/HA/HA_Asynchronous_Replication.htm",a:"Asynchronous Replication As mentioned in the  HA Applications  page, in asynchronous or lazy replication, updates are propagated to replica nodes asynchronously and after the transaction commits on the master node. These updates are applied to replica nodes as separate transactions which can improve ...",t:"HA Asynchronous Replication"},"520":{i:0.00048347525887758,u:"../Content/Users_Guides/HA/HA_Implementation_Details.htm",a:"HA Implementation Details Synchronous vs. Asynchronous Replication eXtremeDB High Availability allows both  Synchronous  and  Asynchronous  replication between master and replica applications. Because synchronous replication requires a successful transaction commit and ACK response from the replica ...",t:"HA Implementation Details"},"521":{i:0.00026250130920656,u:"../Content/Users_Guides/HA/HA_Dynamic_Schema_Modification.htm",a:"Dynamic Schema Modification With eXtremeDB version 7.1 and later it is possible to modify an SQL database schema through the standard SQL DDL statements create table/index, drop table/index and alter table/index. (Please refer to the  eXtremeSQL User’s Guide  for further details about SQL DDL.) ...",t:"HA Dynamic Schema Modification"},"522":{i:0.000206537520407028,u:"../Content/Users_Guides/HA/HA_OpenSSL_Integration.htm",a:"OpenSSL Integration with eXtremeDB High Availability To facilitate secure communications, authorization and authentication, eXtremeDB High Availability Transport Layer security is implemented using Secure Sockets Layer (TLS/SSL). OpenSSL was chosen as one of the most widespread and well-recognized ...",t:"HA OpenSSL Integration"},"523":{i:0.00079256657818895,u:"../Content/Users_Guides/Cluster_Users_Guide.htm",a:"Cluster User\u0027s Guide eXtremeDB Cluster is McObject\u0027s distributed database implementation. The following topics explain the general principles of eXtremeDB Cluster application design and implementation:",t:"Cluster User\u0027s Guide"},"524":{i:0.000326054171172664,u:"../Content/Users_Guides/Cluster/CL_Introduction.htm",a:"eXtremeDB Cluster is a distributed database implementation. Instances of applications can run on different nodes in a network, and all database modifications will be automatically replicated between all instances. For example, the following diagram illustrates a 5-node cluster.   All nodes in a ...",t:"Introduction to eXtremeDB Cluster"},"525":{i:0.000256370068994305,u:"../Content/Users_Guides/Cluster/CL_Applications.htm",a:"All eXtremeDB Cluster  applications must perform a simple set of operations:\n\nStart the Cluster runtime,\nInitialize Cluster parameters,\nCreate the Cluster database, \nCreate a “listener” thread and listen for connecting nodes,\nthen Close the Cluster.\n\n The APIs for Cluster applications are specific ...",t:"eXtremeDB Cluster Applications"},"526":{i:0.00212117364518198,u:"../Content/Users_Guides/Cluster/CL_Applications_C.htm",a:"To implement a C/C++ Cluster application requires, as a minimum, calling the following functions:  \n    MCO_RET mco_cluster_init();\n    MCO_RET mco_cluster_params_init();\n    MCO_RET mco_cluster_db_open();\n    MCO_RET mco_cluster_listen();\n    MCO_RET mco_cluster_stop();\n      A Cluster application ...",t:"eXtremeDB Cluster Applications in C/C++"},"527":{i:0.000176111645637614,u:"../Content/Users_Guides/Cluster/CL_Applications_Java.htm",a:"To implement a cluster with Java, first an array of Cluster nodes is initialized and passed to the ClusterDatabase.open() method, then a ClusterConnection is instantiated for this database and a Listener thread is created. Finally the ClusterConnection’s stop() method is called to terminate the ...",t:"eXtremeDB Cluster Applications in Java"},"528":{i:0.000176111645637614,u:"../Content/Users_Guides/Cluster/CL_Applications_Csharp.htm",a:"To implement a cluster with C#, first an array of Cluster nodes is initialized and passed to the ClusterDatabase.Open() method, then a ClusterConnection is instantiated for this database and a Listener thread is created. Finally the ClusterConnection.Stop() method is called to terminate the Cluster ...",t:"eXtremeDB Cluster Applications in C#"},"529":{i:0.000176111645637614,u:"../Content/Users_Guides/Cluster/CL_Applications_Python.htm",a:"Python cluster support is a thin layer over the top of eXtremeDB Cluster. To implement a cluster application with Python, an array of Cluster nodes is initialized then the exdb.open_database() method is called and a Listener thread is created for each node.  Before creating the cluster, the Python ...",t:"eXtremeDB Cluster Applications in Python"},"530":{i:0.000353191605862818,u:"../Content/Users_Guides/Cluster/CL_Implementation_Details.htm",a:"Cluster Binary Schema Evolution The Cluster runtime supports the Binary Schema Evolution (BSE) feature of eXtremeDB, thus nodes in the single cluster are able to have different database schemas. To enable binary evolution mode the application must set the BINARY_EVOLUTION flag in the mode_mask field ...",t:"eXtremeDB Cluster Implementation Details"},"531":{i:0.000653861845752758,u:"../Content/Users_Guides/Cluster/CL_MPI.htm",a:"To use an MPI channel in a Cluster application, it must be linked with the mcoclmpi library (instead of mcocltcp). The MPI standard requires that the first MPI call in the MPI-program must be MPI_Init() or MPI_Init_thread(), and the last call must be MPI_Finalize(). Another requirement is that ...",t:"Using an MPI channel with eXtremeDB Cluster"},"532":{i:0.000256370068994305,u:"../Content/Users_Guides/Cluster/CL_OpenSSL.htm",a:"To facilitate secure communications, authorization and authentication, eXtremeDB Cluster Transport Layer security is implemented using Secure Sockets Layer (TLS/SSL). OpenSSL was chosen as one of the most widespread and well-recognized TLS protocol implementations. In order to use OpenSSL networking ...",t:"OpenSSL integration with eXtremeDB Cluster"},"533":{i:0.00012163265184034,u:"../Content/Programming/HA_SDK_Samples.htm",a:"eXtremeDB High Availability SDK Samples Please use the following links to view programming examples for the eXtremeDB High Availability API of interest.  Please see page  Cluster  SDK Samples  for examples using eXtremeDB Cluster",t:"eXtremeDB High Availability SDK Samples"},"534":{i:0.000147479667333551,u:"../Content/Programming/Cluster_SDK_Samples.htm",a:"eXtremeDB Cluster SDK Samples Please use the following links to view programming examples for the API of interest:",t:"eXtremeDB Cluster SDK Samples"},"535":{i:0.00104051919969371,u:"../Content/Users_Guides/Active_Data_Replication.htm",a:"eXtremeDB Active Replication Fabric is McObject\u0027s  implementation for data exchange between \"Internet of Things\" (IoT) edge devices and database storage on remote systems. IoT edge devices often collect data and transmit it to Gateway or Server systems for further analysis. Please see  The IoT ...",t:"Active Replication Fabric User\u0027s Guide"},"536":{i:0.000868431818775762,u:"../Content/Users_Guides/ADR/The_IoT_Challenges.htm",a:"From vehicles and buildings, to factory floors to power plugs, everything around us is increasingly controlled by sensors. The number of data collection points, edge devices, is huge and is growing fast. In the recent past, we dealt with dozens of connected devices: factory floor controllers, face ...",t:"The IoT Challenges"},"537":{i:0.00212696450134455,u:"../Content/Users_Guides/ADR/ADR_Introduction.htm",a:"As explained in the  eXtremeDB Active Replication Fabric page , Active Replication Fabric is an eXtremeDB-based foundation for distributed IoT applications. And, as further explained in  The IoT Challenges  page, the volume of data collection points (edge devices), the constrained resources and ...",t:"Introduction to eXtremeDB Active Replication Fabric"},"538":{i:0.00284191781306646,u:"../Content/Users_Guides/ADR/ADR_Applications.htm",a:"As explained in the  ARF introduction page , eXtremeDB Active Replication Fabric provides APIs for  implementing automatic or on-demand data exchange between collection points and servers. Generally speaking, IoT applications implement the following steps to utilize ARF: 1.\tInitialize the ARF ...",t:"eXtremeDB ARF Applications"},"539":{i:0.00447442246266776,u:"../Content/Users_Guides/ADR/ADR_Applications_C.htm",a:"The  ARF Applications page  describes the ARF communicator and the replicator objects and the basic steps for implementing ARF (IoT) applications. This page describes the eXtremeDB Active Replication Fabric C API for  implementing automatic or on-demand data exchange between collection points and ...",t:"eXtremeDB ARF Applications in C"},"540":{i:0.000934898734408241,u:"../Content/Programming/Python/Classes/IoTSupport.htm",a:"The IoT interface for Python resembles its underlying C API layer. It consists of 3 classes: IoTCommunicator, IoTReplicator and IoTConnection which are described in detail in the pages linked to the table below. For an overview see page  ARF Applications To enable IoT support in the eXtremeDB core ...",t:"The Python IoT Support Classes"},"541":{i:0.00013911177544924,u:"../Content/Programming_with_eXtremeDB.htm",a:"The  eXtremeDB User\u0027s Guide  presents the important guidelines for developing eXtremeDB database-enabled applications.  Please use the following links to view Reference Guide topics explaining the specialized database APIs for the development environment and language of your choice:",t:"Programming with eXtremeDB"},"542":{i:0.00029497927645965,u:"../Content/Programming/Native_APIs.htm",a:"Native APIs The  eXtremeDB User\u0027s Guide  presents the important guidelines for developing eXtremeDB database-enabled applications. Please use the following links to view Reference Guide topics explaining the specialized database APIs for the development environment and language of your choice:",t:"Native APIs"},"543":{i:0.000248863447703443,u:"../Content/Programming/C_API.htm",a:"C  applications require an external database schema defined in the eXtremeDB Data Definition Language (DDL). The schema is compiled to produce a generated API for the database objects defined in the schema which is then linked into the application. The eXtremeDB  runtime for C applications (loaded ...",t:"C API"},"544":{i:0.000527176126884387,u:"../Content/Programming/C/Return_Codes.htm",a:"The eXtremeDB  runtime returns integer codes indicating success or failure for most C API functions. The runtime returns three different types of return code: Status Codes (MCO_S_*): indicate runtime states that can and will occur during normal database operations; Non-Fatal Error Codes (MCO_E_*): ...",t:"C API Return Codes"},"545":{i:0.00012163265184034,u:"../Content/Programming/C/Return Codes/ERROR_CODES.htm",a:"eXtremeDB Status code and Error Code interpretation To determine the cause of a specific eXtremeDB return code, please refer to page  C API Return Codes  for values less than 100000 (100k). For values greater than 100000 please refer to page  eXtremeDB Fatal Error Codes  .",t:"eXtremeDB Status code and Error Code interpretation"},"546":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Status_Codes.htm",a:"eXtremeDB Status Codes The following table lists status codes that can be returned by the eXtremeDB  runtime. These return codes do not indicate error conditions but rather runtime states that can and will occur during normal database operations.",t:"eXtremeDB Status Codes"},"547":{i:0.0011831323404543,u:"../Content/Programming/C/Return Codes/Non_Fatal_Error_Codes.htm",a:"eXtremeDB Non-fatal Error Codes The following error codes indicate miscellaneous non-fatal error conditions that the eXtremeDB  runtime might return:",t:"eXtremeDB Non-fatal Error Codes"},"548":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/Disk_Manager_Error_Codes.htm",a:"eXtreme DB Disk Manager Error Codes The following error codes  indicate non-fatal error conditions that might be returned by the eXtremeDB disk manager:",t:"eXtremeDB Disk Manager Error Codes"},"549":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/DDL_Error_Codes.htm",a:"eXtremeDB Data Definition Language Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing  Data Definition  or Dictionary operations:",t:"eXtremeDB Data Definition Language Error Codes"},"550":{i:0.00106459893718032,u:"../Content/Programming/C/Return Codes/XML_Error_Codes.htm",a:"eXtremeDB XML Error Codes The following error codes indicate non-fatal error conditions that might be returned by the eXtremeDB  runtime while processing  XML  operations:",t:"eXtremeDB XML Error Codes"},});