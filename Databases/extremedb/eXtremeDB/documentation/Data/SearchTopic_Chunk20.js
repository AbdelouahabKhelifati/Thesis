define({"1369":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Append.htm",a:"This sample demonstrates eXtremeDB Transaction Logging by appending transactions to an already existing log file. It demonstrates the use of the MCO_TRANSLOG_APPEND option. The application opens and connects to a database, starts transaction logging, performs some read-write transactions, then stops ...",t:"TLog_Append"},"1370":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Apply_Partial.htm",a:"This sample demonstrates how to apply a part of the log to a database. Multiple parts of the log are saved to separate files, then all of these parts are applied one by one to a newly created database. How to Run See instructions  here  on how to build this and other samples on your development ...",t:"TLog_Apply_Partial"},"1371":{i:0.000943125634367363,u:"../Content/Programming/C/SDK_Samples/TL/Basic.htm",a:"This sample demonstrates basic eXtremeDB Transaction Logging functionality. When it is run the first time (with no database snapshot and log file on  disk) the sample creates a database and makes a database snapshot file. Then it starts transaction logging and begins to perform some read-write ...",t:"TLog_Basic"},"1372":{i:0.000769485923764001,u:"../Content/Programming/C/SDK_Samples/TL/Checkpoint.htm",a:"This sample demonstrates the use of log option MCO_TRANSLOG_SIZE_CLBK that enables warning via user defined callback if the specified log file size has been reached. The sample application sets up the log file size limit and user defined callback that will signal whether the limit has been reached. ...",t:"TLog_Checkpoint"},"1373":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Flush.htm",a:"This sample demonstrates the use of log flushing options MCO_TRANSLOG_SYNC_TIMER and MCO_TRANSLOG_SYNC_COUNT. The application sets up two kinds of flushing strategies: by transactions count and by timer. The latter assumes a user-defined call-back function has been registered.  The sample provides ...",t:"TLog_Flush"},"1374":{i:0.000786829658589476,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Dualout.htm",a:"This sample demonstrates the use of transaction logging iteration using the MCO_TRANSLOG_DUAL_OUT flag which makes it possible to copy the log to a file while it is also transferred via a pipe and iterated by a reader application. The log file saved in this manner may be used to restore the database ...",t:"TLog_Iter_Dualout"},"1375":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Dynpipe.htm",a:"This sample demonstrates the use of eXtremeDB Transaction Logging iteration functionality using dynamic pipes. Multiple iteration threads are started and each creates a pipe device, iterates over it and then detaches the device. How to Run See instructions  here  on how to build this and other ...",t:"TLog_Iter_Dynpipe"},"1376":{i:0.000731301944204194,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Events.htm",a:"This sample demonstrates the use of a technique called “persistent events queue”. The log reader not only iterates objects but also receives events declared in the database schema and registered by the reader application. Function mco_translog_play(), which is an extended version of ...",t:"TLog_Iter_Events"},"1377":{i:0.000786829658589476,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Multipipe.htm",a:"This sample is similar to tlogiterpipe, but shows how to create more than one pipe channel and broadcast the log to multiple readers. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin ...",t:"TLog_Iter_Multipipe"},"1378":{i:0.000777233071531316,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Pipe.htm",a:"This sample demonstrates the use of flags MCO_TRANSLOG_ITERABLE and MCO_TRANSLOG_PIPE  to transfer the log through a pipe to another thread or another application and iterate the log on the reader side. (Note the use of runtime option MCO_RT_OPTION_MARK_LAST_OBJ which makes an additional call to the ...",t:"TLog_Iter_Pipe"},"1379":{i:0.00014507732470493,u:"../Content/Programming/C/SDK_Samples/TL/Iter_Pipe_DLL.htm",a:"This sample demonstrates Dynamic DDL with the use of flags MCO_TRANSLOG_ITERABLE and MCO_TRANSLOG_PIPE  to transfer the log through a pipe to another thread or another application and iterate the log on the reader side. (Note the use of runtime option MCO_RT_OPTION_MARK_LAST_OBJ which makes an ...",t:"TLog_Iter_Pipe_DLL"},"1380":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Labels.htm",a:"This sample demonstrates the use of the transaction log labeling feature. The application starts transaction logging and runs READ_WRITE transactions while it periodically marks the log file with labels between transaction blocks.  After the specified transaction count has elapsed the sample ...",t:"TLog_Labels"},"1381":{i:0.000774113233296108,u:"../Content/Programming/C/SDK_Samples/TL/Truncate.htm",a:"This sample demonstrates the use of log truncation. The application shows how to truncate unnecessary log entities during a single transaction logging session.  It starts transaction logging then performs READ_WRITE transactions, resets the log periodically and makes a new database snapshot. This ...",t:"TLog_Truncate"},"1382":{i:0.00012163265184034,u:"../Content/Programming/C/C_App_Development.htm",a:"The eXtremeDB C API consists of a set of  static  and  generated  functions. For  general principles of eXtremeDB application  implementation using the C APIs please refer to the  eXtremeDB User\u0027s Guide .  The links in the following table provide shortcuts to the specific C API functions relevant to ...",t:"Application Development in C"},"1383":{i:0.000149491998752799,u:"../Content/Programming/Cpp_API.htm",a:"The eXtremeDB C++ API consists of a set of classes that encapsulate the low-level C functions which make up the eXtremeDB  runtime. The usage of these classes is demonstrated in the  C++ SDK Samples . For developers new to eXtremeDB, we recommend the Quick Start  tutorial  to quickly learn the ...",t:"C++ API"},"1384":{i:0.00012163265184034,u:"../Content/Programming/C++/Cpp_Runtime_Libraries.htm",a:"C++ Runtime Libraries The C++ runtime libraries are the same as those used by C applications. Please see the  C API Runtime Libraries  page for details.",t:"C++ Runtime Libraries"},"1385":{i:0.000808816746230648,u:"../Content/Programming/C++/Cpp_Samples.htm",a:"The C++ sample applications are currently combined with the C API and embedded SQL API samples and the build procedure for the  C++ API SDK samples  on all supported platforms are described in the \"Getting Started\" section.  By default, all sample executables are built in the eXtremeDB/target/bin ...",t:"C++ Samples"},"1386":{i:0.000400022894939781,u:"../Content/Programming/C++/SDK_Samples/Cpp_Demo.htm",a:"This sample demonstrates the use of the -hpp schema compiler option to generate the C++ interface to a simple \"Parts\" database.  The project makefile, or the custom build step in Visual Studio, demonstrates the use of -hpp option on the mcocomp command line:  \n    \\host\\bin\\mcocomp.exe  -hpp ...",t:"C++ Demo"},"1387":{i:0.00028573415644905,u:"../Content/Programming/C++/SDK_Samples/Cpp_Smartptr.htm",a:"This sample demonstrates the use of the -smartptr schema compiler option to generate the C++ interface to a simple \"Parts\" database.  The project makefile, or the custom build step in Visual Studio, demonstrates the use of the -smartptr option on the mcocomp command line:  \n    \\host\\bin\\mcocomp.exe ...",t:"C++ Smartptr"},"1388":{i:0.000337310627159214,u:"../Content/Programming/C++/SDK_Samples/Cpp_Sequences_Api.htm",a:"This sample demonstrates the use of the sequence data type and the C++ class interface on a database containing several time-series fields representing Stock Market Quotes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample ...",t:"C++ Sequences API"},"1389":{i:0.000259132766511945,u:"../Content/Programming/C++/SDK_Samples/Cpp_Sequences_Inetdb.htm",a:"This sample demonstrates the use of the sequence data type and the C++ class interface. It reads Host, User and Event data and generates Event records with browser information. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"C++ Sequences Inetdb"},"1390":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/02-Open_Allocator.htm",a:"Demonstrates the use of class StdAllocator  to register a custom dynamic memory allocator to substitute standard C runtime function malloc() and free() for SQL statement execution. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the ...",t:"02-Open_Allocator"},"1391":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/02-Open_Imp_CSV.htm",a:"This sample populates an all-in-memory database from an external CSV file. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:      \n    api_sql_02_open_imp_csv\n      But it is more ...",t:"02-Open_Imp_CSV"},"1392":{i:0.000242947342033679,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/02-Open_Initialize.htm",a:"This sample demonstrates basic application initialization for C++ SQL Access. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_02_open_initililize\n      But it is ...",t:"02-Open_Initialize"},"1393":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/02-Open_Raid.htm",a:"This sample opens and initializes a persistent database on a RAID storage device. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_02_open_raid\n      But it is more ...",t:"02-Open_Raid"},"1394":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/02-Open_Shutdown.htm",a:"This sample demonstrates the proper shutting down of the McoSqlEngine. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_02_open_shutdown\n      But it is more ...",t:"02-Open_Shutdown"},"1395":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_Mursiw.htm",a:"This sample demonstrates SQL operations using the  MURSIW  Transaction Manager. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_03_transactions_mursiw\n      But it ...",t:"03-Transactions_Mursiw"},"1396":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_Mursiw2.htm",a:"This sample demonstrates SQL operations using the  MURSIW  Transaction Manager with two database instances. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:          \n    ...",t:"03-Transactions_Mursiw2"},"1397":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_MVCC.htm",a:"This sample demonstrates SQL operations using the MVCC  Transaction Manager. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_03_transactions_mvcc\n      But it is ...",t:"03-Transactions_MVCC"},"1398":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_Persistent.htm",a:"This sample demonstrates SQL operations using a persistent database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_03_transactions_persistent\n      But it is more ...",t:"03-Transactions_Persistent"},"1399":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_Ph2commit.htm",a:"This sample demonstrates a two-phase database transaction. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_03_transactions_ph2commit\n      But it is more ...",t:"03-Transactions_Ph2commit"},"1400":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/03-Transactions_Vtable.htm",a:"This sample demonstrates the use of virtual tables in combination with an eXtremeDB database. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"03-Transactions_Vtable"},"1401":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/04-Varlength_Blobs.htm",a:"This sample demonstrates the use of the BLOB (Binary Large Object) data type. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_04_varlength_blobs\n      But it is ...",t:"04-Varlength_Blobs"},"1402":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/04-Varlength_Vectors.htm",a:"This sample demonstrates the use of the vector data type. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_04_varlength_vectors\n      But it is more instructive to ...",t:"04-Varlength_Vectors"},"1403":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/05-Structures.htm",a:"This sample demonstrates the use of class fields of type struct. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_05_structures\n      But it is more instructive to ...",t:"05-structures"},"1404":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/06-References.htm",a:"This sample demonstrates the implementation of joins using  autoid references. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_03_transactions_references\n      But ...",t:"06-References"},"1405":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/07-Search_Btree.htm",a:"This sample demonstrates searches with a Btree index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_07_search_btree\n      But it is more instructive to run it in ...",t:"07-Search_Btree"},"1406":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/07-Search_Cursor.htm",a:"This sample demonstrates cursor operations with a Btree index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_07_search_cursor\n      But it is more instructive to ...",t:"07-Search_Cursor"},"1407":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/07-Search_Hash.htm",a:"This sample demonstrates SQL selects on unique and non-unique hash indexes. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_07_search_hash\n      But it is more ...",t:"07-Search_Hash"},"1408":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/07-Search_Patricia.htm",a:"This sample demonstrates cursor operations with a Patricia index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_07_search_patricia\n      But it is more ...",t:"07-Search_Patricia"},"1409":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/07-Search_Rtree.htm",a:"This sample demonstrates spatial searches with an Rtree index. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_07_search_rtree\n      But it is more instructive to ...",t:"07-Search_Rtree"},"1410":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/08-Join.htm",a:"This sample performs joins through varied select statements. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_08_join\n      But it is more instructive to run it in ...",t:"08-Join"},"1411":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/09-Functions_Group-by.htm",a:"This sample demonstrates the use of the group by clause. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_09_functions_group_by\n      But it is more instructive to ...",t:"09-Functions_Group-by"},"1412":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/09-Functions_Math.htm",a:"This sample demonstrates use of the SQL math functions. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_09_functions_math\n      But it is more instructive to run it ...",t:"09-Functions_Math"},"1413":{i:0.000189241882548158,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/10-RSQL_Client.htm",a:"This sample demonstrates the client side implementation of a client-server application. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_10_rsql_client\n      But it ...",t:"10-RSQL_Client"},"1414":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/10-RSQL_Server.htm",a:"This sample demonstrates the server side implementation of a client-server application. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_10_rsql_server\n      But it ...",t:"10-RSQL_Server"},"1415":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/11-Sequences.htm",a:"This sample demonstrates the use of the sequence data type. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    api_sql_11_sequences\n      But it is more instructive to run it ...",t:"11-Sequences"},"1416":{i:0.000334446881303692,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/12-Interactive.htm",a:"This sample demonstrates how to create an interactive SQL utility using the DistributedSqlEngine class. How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory:  \n    ...",t:"12-Interactive"},"1417":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/HA_SQL_Master.htm",a:"This sample demonstrates the master-side implementation of eXtremeDB High Availability using the SQL API . How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory: Note that all HA ...",t:"HA_SQL_Master"},"1418":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/HA_SQL_Replica.htm",a:"This sample demonstrates the replica-side implementation of eXtremeDB High Availability using the SQL API . How to Run See instructions  here  on how to build this and other samples on your development platform. Once built, the sample can be run from the \\target\\bin directory: Note that all HA ...",t:"HA_SQL_Replica"},"1419":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/SimpleODBC.htm",a:"This sample demonstrates the use of standard ODBC functions in conjunction with the eXtremeSQL ODBC driver to connect to an in-memory database. It also demonstrates the ability to connect to a shared in-memory database from two processes - the simpleodbc sample application and the xSQL utility. ...",t:"SimpleODBC"},"1420":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/TPC.htm",a:"This is a sample implementation of the Transaction Processing Performance Council Benchmark B. How to Run See instructions  here  on how to build this and other samples on your development platform. (Also note that there are instructions here for installing the eXtremeSQL ODBC driver). Once built, ...",t:"TPC"},"1421":{i:0.000132481288116405,u:"../Content/Programming/C++/SDK_Samples/SQL_Samples/TPC_Log.htm",a:"This is a sample implementation of the Transaction Processing Performance Council Benchmark B with eXtremeDB Transaction Logging. How to Run See instructions  here  on how to build this and other samples on your development platform. (Also note that there are instructions here for installing the ...",t:"TPC_Log"},"1422":{i:0.000142810768725464,u:"../Content/Programming/C++/Cpp_App_Development.htm",a:"The eXtremeDB C++ API consists of a set of  generated   classes and methods that provide a thin wrapper for the lower level C API \"wrapper\" functions. Typically a C++ application will use a mix of C++ class methods and  static  C APIs. For  general principles of eXtremeDB application  implementation ...",t:"Application Development in C++"},"1423":{i:0.00012163265184034,u:"../Content/Programming/C++/Cpp_Schema_Definition.htm",a:"As described in the  Users_Guide  page, the database schema consists of a set of classes (tables) containing fields (columns) and indexes that implement the application\u0027s  information model  . For C++ applications, the schema is defined, and the generated header and implementation files are ...",t:"C++ Schema Definition"},"1424":{i:0.000152571052654698,u:"../Content/Programming/C++/Cpp_Allocators.htm",a:"The eXtremeSQL engine manages dynamic data objects like Blob, String, Array etc. with an object of class Allocator as an argument in order to construct (and make a copy of) the dynamic object using memory managed by the Allocator. There are three types of Allocator provided by the eXtremeSQL engine: ...",t:"Dynamic Object Allocators in C++"},"1425":{i:0.0003324369146109,u:"../Content/Programming/C++/Classes/Analytics_Methods/Methods_By_Category.htm",a:"The C++ class  Sequence provides a set of analytics methods that operate on  sequences. These methods inherit functionality from the specialized C API type  mco_seq_iterator_t as the \"handle\" to manage  sequence  fields. The table below links to pages describing the methods in detail. The examples ...",t:"Analytics C++ Sequence Methods by Category"},"1426":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Unary_Operators.htm",a:"The following unary C++ methods and operator take no arguments, perform the indicated operation on the object\u0027s sequence and return a result sequence of the same type; or, in the case of match(), takes a character string argument pattern and returns a Boolean result sequence. Example Following is an ...",t:"Unary C++ Sequence Methods"},"1427":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Binary_Methods.htm",a:"Binary C++ Sequence Methods The following binary C++ Sequence methods and operators take a single argument other, perform the indicated operation on the object\u0027s sequence elements as the left operand and the other sequence elements as the right  operand. They return a result sequence of the same ...",t:"Binary Operators C++ Sequence Methods"},"1428":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Comparison_Operators.htm",a:"The following comparison  C++ Sequence operators take a single argument other, and perform the indicated comparison of the object\u0027s sequence elements as the left operand and the other sequence elements as the right  operand. They return a Boolean result Sequence (specifically of type mco_seq_bool).  ...",t:"Comparison C++ Sequence Methods"},"1429":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Logical_Operators.htm",a:"The following logical  C++ Sequence operators (except the not operator \"!\") take a single argument other, and perform the indicated logical operation oo the object\u0027s sequence elements as the left operand and the other sequence elements as the right  operand. They return a Boolean result Sequence ...",t:"Logical C++ Sequence Methods"},"1430":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Collapse_Methods.htm",a:"The following collapse C++ Sequence methods operate on the object\u0027s and the input sequences, left and right, to produce the computed scalar result  of  type double. The method signatures are of the following form (where op is the indicated operation):  \n    double op(Sequence\u003cT\u003e const\u0026 weights) ...",t:"Collapse C++ Sequence Methods"},"1431":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Conditional_Methods.htm",a:"The following conditional C++ methods   apply the object\u0027s Boolean sequence to the input sequence(s). These methods are of the following types: Ternary operations iif() and cond() which take two input sequence arguments then and else, and produce a result sequence of the same type by applying the ...",t:"Conditional C++ Sequence Methods"},"1432":{i:0.000311887418392113,u:"../Content/Programming/C++/Classes/Analytics_Methods/Manipulator_Methods.htm",a:"The following manipulator C++ Sequence methods take a variety of  sequence arguments and produce result sequences  as described in the table below: Example Following is an example code snippet demonstrating a sequence manipulator function:          \n    {\n        mco_trans_h trans;\n        ...",t:"Manipulator C++ Sequence Methods"},"1433":{i:0.000256136200702198,u:"../Content/Programming/C++/Classes/Analytics_Methods/Iterator_Methods.htm",a:"The iterator C++ Sequence methods and operator are used to iterate or return the count of the object\u0027s sequence elements.  The iterator operation can be one of the following:  Example Following is an example code snippet demonstrating different types of sequence iteration, note the use of next() and ...",t:"Iterator C++ Sequence Methods"},"1434":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/Top_Methods.htm",a:"The following C++ Sequence methods  take an integer argument n and produce result sequences of the top n elements as described in the table below: Example Following is an example code snippet demonstrating one of these functions:      \n    {\n        mco_trans_h trans;\n        mco_cursor_t ...",t:"Top C++ Sequence Methods"},"1435":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/RLE_Methods.htm",a:"The RLE C++ Sequence methods take one (except rleDecode() ) input argument and produce a result sequence or scalar type as described in the table below:   Example Following is an example code snippet demonstrating an RLE function:          \n    {\n        mco_trans_h trans;\n        mco_cursor_t ...",t:"Run Length Encryption C++ Sequence Methods"},"1436":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/GrandAgg_Methods.htm",a:"All Grand Aggregate C++ Sequence methods produce a double result or a scalar value of the object\u0027s type, except methods count() and approxDistinctCount()  which return a uint8 or uint4 value. Example Following is an example code snippet demonstrating a grand aggregate function:          \n        ...",t:"Grand Aggregate C++ Sequence Methods"},"1437":{i:0.000139058109304703,u:"../Content/Programming/C++/Classes/Analytics_Methods/GroupAgg_Methods.htm",a:"All Group Aggregate C++ Sequence methods take an input groupBy sequence argument and produce a result sequence containing the calculated aggregate for each group. The object\u0027s sequence is split into groups based on the values in the groupBy sequence which is expected to be ordered. Example Following ...",t:"Group Aggregate C++ Sequence Methods"},});