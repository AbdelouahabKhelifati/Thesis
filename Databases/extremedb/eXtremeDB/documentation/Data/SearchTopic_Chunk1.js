define({"68":{i:0.000295458233629298,u:"../Content/Getting_Started/Quick_Start/QS_Csharp/QS_Csharp2.htm",a:"SDK sample  samples/csharp/Open  illustrates how to open a simple In-Memory database. The sample also demonstrates how to display runtime information by calling the Database method GetRunTimeInfo(). Please  build and run  the sample application and examine the source code. Note that the ...",t:"Step 2: Opening Databases"},"69":{i:0.000242410238064579,u:"../Content/Getting_Started/Quick_Start/QS_Csharp/QS_Csharp2_Persistent.htm",a:"As explained for  In-Memory Databases , before performing data storage and retrieval operations, we must open and connect to the database. To open the database C# applications call Database method Open() with a number of possible parameters including  a Database.Parameters object and an array of ...",t:"Opening Persistent Databases with the C# API"},"70":{i:0.000158696733517057,u:"../Content/Getting_Started/Quick_Start/QS_Csharp/QS_Csharp3.htm",a:"SDK sample  samples/csharp/Operations  illustrates how to use the Connection and Cursor classes to perform basic database CRUD operations. Please  build and run  the sample application and examine the source code. Note that the Connection con is instantiated after the database is opened:  \n    ...",t:"Step 3: Data Access Operations"},"71":{i:0.000232637018452184,u:"../Content/Getting_Started/Quick_Start/QS_Python.htm",a:"Use the links below to walk through the tutorial examples. Each step demonstrates a number of simple eXtremeDB Python APIs. We recommend doing these exercises to quickly gain familiarity with the essential implementation details. After gaining a basic understanding of eXtremeDB basics, developers ...",t:"Quick Start with the eXtremeDB Python API"},"72":{i:0.00015458970193795,u:"../Content/Getting_Started/Quick_Start/QS_Python/QS_Python1.htm",a:"The first step in using the eXtremeDB Python API is to define the classes that you’ll want to manage in the eXtremeDB database. The eXtremeDB Python wrapper has the  mcocomp  runtime compiled in, so the database schema can be defined in the form of text, just like a regular .mco file. For example, ...",t:"Step 1: Database Definition"},"73":{i:0.00015458970193795,u:"../Content/Getting_Started/Quick_Start/QS_Python/QS_Python2.htm",a:"The simplest way to open a database in Python is to use the open_database() method:  \n    \u003e\u003e\u003e db = exdb.open_database(\"myopendb\", dict)\n    \u003e\u003e\u003e db\n    \u003cexdb.Database object at 0x100827610\u003e\n    \u003e\u003e\u003e\n      In this example, a database with the name “myopendb” is created. By default, it is opened as an ...",t:"Step 2: Opening Databases"},"74":{i:0.00015458970193795,u:"../Content/Getting_Started/Quick_Start/QS_Python/QS_Python3.htm",a:"To perform operations on database objects the Python application must first establish a connection to the database. After calling the exdb.open_database() method, the application calls the Database method connect() to create a database connection handle:  \n    \u003e\u003e\u003e con = db.connect()\n    \u003e\u003e\u003e\n      ...",t:"Step 3: Data Access Operations"},"75":{i:0.00013911177544924,u:"../Content/Getting_Started/Getting_Started_Server.htm",a:"As described in the  Product Family  description, McObject\u0027s eXtremeDB for HPC includes all of the eXtremeDB features including  eXtremeDB High Availability, eXtremeSQL and a library of vector-based math functions that operate on database fields of type  Sequence (vertical/columnar storage of ...",t:"Getting Started with eXtremeDB for HPC"},"76":{i:0.000145281740819337,u:"../Content/Getting_Started/Quick_Start/QS_Server.htm",a:"Quick Start with  eXtremeDB for HPC If you are new to the eXtremeDB we recommend first viewing the  Product Family  page which presents the important features included in eXtremeDB for HPC that extend the basic eXtremeDB package. Perhaps most important is the inclusion of eXtremeSQL with the ...",t:"Quick Start with eXtremeDB for HPC"},"77":{i:0.000159489857691483,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_server.htm",a:"eXtremeDB for HPC packages include the Analytics Functions Library which provides a rich set of functions for performing analytics on sequences (aka  time-series). A number of specialized scripts using sequences and statistical functions are included in the samples/xsql/scripts/financial directory. ...",t:"Quick Start with xSQL - eXtremeDB for HPC"},"78":{i:0.000190505688540511,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL1.htm",a:"Starting xSQL as a database server and client xSQL is an interactive tool for processing SQL statements.  It can be run as a server to provide access to eXtremeDB databases from local or remote clients. For example. from directory target/bin type:  \n    xsql -size 100m -p 5000\n    press Enter to ...",t:"Step 1: Startup"},"79":{i:0.000243080444787536,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL2.htm",a:"Executing basic xSQL commands and scripts As mentioned in  Step 1 , xSQL can be started in server or client mode. For the next group of exercises we will start xSQL with the command file xsql.bat directory /samples/xsql/scripts/financial with the default parameters to enter interactive SQL ...",t:"Step 2: Executing commands and scripts"},"80":{i:0.000190505688540511,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL3.htm",a:"The output from xSQL interactive commands can be redirected to a file or suppressed by the output command:  \n    output console|null|\u003cfilename\u003e\n      This command switches output of the SQL engine between the console, a null device (suppress output) and a disk file. For example the following ...",t:"Step 3: Formatting output"},"81":{i:0.000221712666040044,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL4.htm",a:"A powerful capability of xSQL is its ability to manage a single in-memory or persistent database distributed across a cluster of network nodes. To demonstrate this, we will use the configuration files (more about configuration files in  step 5 ) found in the SDK directory samples/xsql/configs/shards ...",t:"Step 4: Distributed Database Sharding"},"82":{i:0.000350571696060943,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL5.htm",a:"The example in  step 4  demonstrates one of the advantages of using a configuration file to start xSQL with a pre-designed set of instructions. A database schema can be defined as in shard1.cfg:  \n    #\n    #  Simple In-Memory configuration\n    #\n    database_name : imdb,\n    database_size    :  ...",t:"Step 5: Using Configuration Files"},"83":{i:0.000221712666040044,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL6.htm",a:"It can be important, especially when using in-memory databases, to save data to or load data from persistent storage; i.e. disk based files. There are a number of commands to do this. Also when using persistent databases, it may be desirable to use the backup command to save a snapshot of its ...",t:"Step 6: Exporting and Importing Data"},"84":{i:0.000341058154108922,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Server/Server_QS_xSQL7.htm",a:"A powerful feature of eXtremeDB is the  sequence data type. Apart from the memory and processing efficiency enabled by the possibility to store data in this  \"columnar\" format , sequences are particularly suited to vector-based statistical functions. Typically, these SQL statistical functions are ...",t:"Step 7: Vector-based Analytics Functions"},"85":{i:0.000363768981465862,u:"../Content/Getting_Started/Getting_Started_SQL.htm",a:"As described in the  Product Family  description, McObject\u0027s eXtremeDB SQL, eXtremeSQL, is a high-performance implementation of the SQL database programming language for the eXtremeDB embedded database system. eXtremeSQL was designed for use as an “embedded SQL” API for C, C++, Java, C# and Python ...",t:"Getting Started with eXtremeSQL"},"86":{i:0.000472817137382735,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded.htm",a:" Use the links below to walk through the tutorial examples. Each step demonstrates a number of simple xSQL operations. We recommend doing these exercises to quickly gain familiarity with this powerful, easy to use database management tool - just cut and paste the example commands into a console ...",t:"Quick Start with xSQL"},"87":{i:0.000508239516790942,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL1.htm",a:"xSQL is an interactive tool for processing SQL statements.  It can be run as a server to provide access to eXtremeDB databases from local or remote clients. For example from directory target/bin type the following command  to open an in-memory database with size 100 Mb and start a server session ...",t:"Step 1: Startup"},"88":{i:0.000631100771656349,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL2.htm",a:"Executing basic xSQL commands and scripts As mentioned in  Step 1 , xSQL can be started in server or client mode. For the next group of exercises we will start xSQL by simply typing xsql from directory target\\bin:  \n    xsql\n     \n    Simple interactive configuration is started\n    To run as a ...",t:"Step 2: Executing commands and scripts"},"89":{i:0.000424003698247949,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL3.htm",a:"The output from xSQL interactive commands can be redirected to a file or suppressed by the output command:  \n    output console|null|\u003cfilename\u003e\n      This command switches output of the SQL engine between the console, a null device (suppress output) and a disk file. For example the following ...",t:"Step 3: Formatting Output"},"90":{i:0.000368093582241082,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL4.htm",a:"Distributed Database Sharding A powerful capability of xSQL is its ability to manage a single in-memory or persistent database distributed across a cluster of network nodes. To demonstrate this, we will use the configuration files (more about configuration files in  step 5 ) found in the SDK ...",t:"Step 4: Distributed Database Sharding"},"91":{i:0.000582029424931142,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL5.htm",a:"The example in  step 4  demonstrates one of the advantages of using a configuration file to start xSQL with a pre-designed set of instructions. A database schema can be defined as in shard1.cfg:  \n    #\n    #  Simple In-Memory configuration\n    #\n    database_name : imdb,\n    database_size    :  ...",t:"Step 5: Using Configuration Files"},"92":{i:0.000575272570883743,u:"../Content/Getting_Started/Quick_Start/QS_xSQL_Embedded/QS_xSQL6.htm",a:"It can be important, especially when using in-memory databases, to save data to or load data from persistent storage; i.e. disk based files. There are a number of commands to do this. Also when using persistent databases, it may be desirable to use the backup command to save a snapshot of its ...",t:"Step 6: Exporting and Importing Data"},"93":{i:0.000275958054216208,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL.htm",a:"Quick Start with Embedded eXtremeSQL eXtremeSQL is implemented as a C language library with a set of C++, Java, Python and C# wrapper classes. Please use the links below to quickly learn how to embed eXtremeSQL functionality into C, C++, Java, Python and C# applications:",t:"Quick Start with Embedded eXtremeSQL"},"94":{i:0.000249822116419842,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL/QS_Embedded_SQL_C.htm",a:"The eXtremeSQL C Language API allows developers to call low level C functions to initialize, open and close the SQL engine, and execute  statements directly (without the use of  C++ wrapper classes ). Once initialized, the SQL engine is passed to function mcosql_execute_statement() for SQL insert, ...",t:"Quick Start with Embedded eXtremeSQL in C"},"95":{i:0.000513959999586266,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL/QS_Embedded_SQL_Cpp.htm",a:" The principle classes for most eXtremeSQL C++ applications are  McoSqlEngine and  QueryResult . The McoSqlEngine open() and close() methods are called to open and close a database. Then method executeStatement() is called to execute SQL insert, update and delete statements and method executeQuery() ...",t:"Quick Start with Embedded eXtremeSQL in C++ "},"96":{i:0.000202137780314644,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL/QS_Embedded_SQL_Java.htm",a:"The principle classes for most eXtremeSQL Java applications are Database, SqlLocalConnection and SqlResultSet. The SqlLocalConnection  is normally instantiated by calling the Database connectSql() method. Then SqlLocalConnection method executeStatement() is called to execute SQL insert, update and ...",t:"Quick Start with Embedded eXtremeSQL in Java"},"97":{i:0.000187741211054758,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL/QS_Embedded_SQL_Csharp.htm",a:"The principle classes for most eXtremeSQL C# applications are Database, SqlLocalConnection and SqlResultSet. The SqlLocalConnection is normally instantiated by calling the Database ConnectSql() method. Then SqlLocalConnection method ExecuteStatement() is called to execute SQL insert, update and ...",t:"Quick Start with Embedded eXtremeSQL in C#"},"98":{i:0.000168545785374911,u:"../Content/Getting_Started/Quick_Start/QS_Embedded_SQL/QS_Embedded_SQL_Python.htm",a:" The eXtremeSQL Python wrapper supports a SQL engine and a SQL server that operate on eXtremeDB databases using the  Python DB API Specification . Developers are encouraged to view this website for general information on the Python Database classes and methods.  eXtremeSQL Python applications use ...",t:"Quick Start with Embedded eXtremeSQL in Python"},"99":{i:0.000210392388111582,u:"../Content/Getting_Started/Getting_Started_HA.htm",a:"To understand how eXtremeDB High Availability provides full-time application availability and fail-over capability please see the  HA Introduction  and  HA Theory  pages or the  eXtremeDB High Availability User\u0027s Guide  for a full description of HA features and implementation. In addition to high ...",t:"Getting Started with eXtremeDB High Availability"},"100":{i:0.00012163265184034,u:"../Content/Getting_Started/Getting_Started_Cluster.htm",a:"As explained in the  High Availability  page, the inclusion of eXtremeDB Cluster  provides powerful distributed database capabilities for eXtremeDB applications.To understand how eXtremeDB Cluster provides a simple interface for managing a peer-to-peer network of “equal” nodes, please see the  ...",t:"Getting Started with eXtremeDB Cluster"},"101":{i:0.000507473241901946,u:"../Content/eXtremeDB_Fundamental_Concepts.htm",a:"It is important to understand some fundamental database concepts, and relate these to specific elements or characteristics of eXtremeDB. Even developers experienced with database management systems are encouraged to read this section for a full understanding of eXtremeDB and its positioning with ...",t:"eXtremeDB Fundamental Concepts"},"102":{i:0.000154813832936872,u:"../Content/Fundamental_Concepts/Definitions.htm",a:"A database is a collection of related data organized for efficient storage and retrieval.  Beyond this, any attempt to more specifically describe a database inevitably involves individual features of one or more specific database implementations.  The following definitions describe the eXtremeDB ...",t:"eXtremeDB Definitions"},"103":{i:0.00117777275371541,u:"../Content/Fundamental_Concepts/Database_Models.htm",a:"Formally, a  \"database\" refers to a set of related data and the way it is organized. Access to these data is usually provided by a \"database management system\" (DBMS) consisting of an integrated set of software that allows users to interact with one or more databases and provides access to all of ...",t:"Database Models"},"104":{i:0.000154813832936872,u:"../Content/Fundamental_Concepts/Embedded_and_Client_Server_Db_Management.htm",a:"Most commonly known \"enterprise\" database systems, such as Oracle, Microsoft SQL Server, IBM DB2 and others are implemented as client/server applications, where the database server is a \"back-end\" application that services requests from \"front-end\" client applications. In contrast to this, an ...",t:"Embedded and Client/Server Database Management"},"105":{i:0.000154813832936872,u:"../Content/Fundamental_Concepts/Cross_Platform_Database_Application_Development.htm",a:"Cross-platform software is defined as software that is implemented on multiple computing platforms, such as Linux, Windows and MacOS. (Please refer to the wikipedia entry at  https://en.wikipedia.org/wiki/Cross-platform  for a detailed description of the term.) While eXtremeDB is certainly ...",t:"Cross-platform Database Application Development"},"106":{i:0.000154813832936872,u:"../Content/Fundamental_Concepts/Data_Definition_Language_Database_Schema_and_DDL_Compiler.htm",a:"An eXtremeDB database schema is specified in Data Definition Language ( DDL ) or in native Java or C# class definitions. For C and C++ applications the DDL specification identifies the database, defines each data class, its elements (called fields), its relationship to other data classes, and the ...",t:"Data Definition Language, Database Schema and DDL Compiler"},"107":{i:0.00038389300466289,u:"../Content/Fundamental_Concepts/Database_Storage.htm",a:"eXtremeDB supports the notion of logical database devices. Logical database devices are abstractions of physical storage locations that can be conventional memory (static or heap allocated memory in the application address space), shared memory (“named” memory shared by multiple processes), or ...",t:"Database Storage"},"108":{i:0.00274473509818134,u:"../Content/Fundamental_Concepts/Concurrency_Control.htm",a:"Concurrency is defined as the ability for multiple tasks to access shared data simultaneously.  Database concurrency control in eXtremeDB is implemented through database transactions.  eXtremeDB Transaction Managers ensure that database transactions are performed concurrently without violating data ...",t:"Concurrency Control and Transactions"},"109":{i:0.000762172019808125,u:"../Content/Fundamental_Concepts/Spinlock.htm",a:"In general, the term “spinlock” means a synchronization primitive that does not require a process context switch or any other kernel activities. Usually it is implemented as a assembler loop over a variable. In some cases using this kind light-weight primitive makes sense for performance reasons ...",t:"Spinlocks"},"110":{i:0.00259341765056128,u:"../Content/Fundamental_Concepts/Indexes.htm",a:"eXtremeDB supports hash indexes, and tree indexes of the following types: tree (b-tree), patricia (Patricia Trie), rtree (R-tree spatial), kdtree (kd-tree multi-dimensional), trigram (text substring) and user-defined (“custom”). Hash and unique tree indexes can also be used to uniquely identify ...",t:"eXtremeDB Indexes"},"111":{i:0.000154813832936872,u:"../Content/Fundamental_Concepts/Native_APIs_and_SQL_API.htm",a:"eXtremeDB provides specialized \"low-level\" APIs for a number of programming languages that give the application developer highly efficient embedded database access - whether the database resides in the application process memory space, on persistent storage, or partially in-memory and partially ...",t:"Native APIs and SQL API"},"112":{i:0.000286406138793296,u:"../Content/Fundamental_Concepts/eXtremeDB_as_a_Client_Server_Development_Tool.htm",a:"As defined by wikipedia ( https://en.wikipedia.org/wiki/Client%E2%80%93server_model ), \"the client–server model is as a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients. \" With ...",t:"eXtremeDB as a Client/Server Development Tool"},"113":{i:0.000418485055009487,u:"../Content/Fundamental_Concepts/Distributed_Database_Systems.htm",a:"eXtremeDB extension modules provide the tools to implement a variety of distributed data solutions. A distributed database system allows applications to access data from local and remote databases. General goals of a distributed database management design are to: Provide high availability of data ...",t:"Distributed Database Topologies"},"114":{i:0.000620399511263276,u:"../Content/Fundamental_Concepts/Horizontal_Database_Partitioning.htm",a:"As defined by wikipedia ( https://en.wikipedia.org/wiki/Partition_(database) ), \"A partition is a division of a logical database or its constituent elements into distinct independent parts. Database partitioning is normally done for manageability, performance or availability reasons, as for load ...",t:"Horizontal Database Partitioning"},"115":{i:0.00076994530003995,u:"../Content/Users_Guides/Users_Guides.htm",a:"As described in the eXtremeDB  product family  the core eXtremeDB  runtime was designed to optimize management of in-memory databases. The runtime APIs along with database application design and implementation details are presented in the  eXtremeDB User\u0027s Guide . For developers new to eXtremeDB we ...",t:"eXtremeDB User\u0027s Guides"},"116":{i:0.000593153164273816,u:"../Content/Users_Guides/Embedded_Core_Users_Guide.htm",a:"For application developers new to eXtremeDB we recommend  reading the  fundamental concepts  and  the  Getting Started topics , then building and running the  SDK samples  to become familiar with eXtremeDB essentials and the APIs appropriate for your development environment. The  Product Overview  ...",t:"eXtremeDB Embedded User\u0027s Guide"},"117":{i:0.000260876917310556,u:"../Content/Users_Guides/Core/Product_Overview.htm",a:"eXtremeDB is first and foremost an in-memory embedded database system (IMDS) ideally suited for embedded systems and other application domains that require extremely high performance / low latency, small footprint, compact storage, zero memory allocations, or any combination of these attributes.  ...",t:"Product Overview"},"118":{i:0.000137388441178233,u:"../Content/Users_Guides/Core/Our_Objectives.htm",a:"The primary design objective for eXtremeDB is to provide extremely high performance, low latency, and the efficient use of storage space for the kinds of applications to which it is targeted.  These applications are different from ordinary database business applications such as payroll or inventory ...",t:"eXtremeDB  Objectives"},"119":{i:0.000264232481651491,u:"../Content/Users_Guides/Core/Schema_Definition.htm",a:"The database schema consists of a set of classes (tables) containing fields (columns) and indexes that implement the application\u0027s  information model  . This schema can be defined for SQL applications using embedded  SQL Data Definition Language  (DDL) statements. For non-SQL applications the ...",t:"Defining Database Schemas"},"120":{i:0.000320125506814741,u:"../Content/Users_Guides/SQL/SQL_DDL.htm",a:"With eXtremeSQL there are two methods of defining the database schema. An embedded eXtremeSQL application developed with the C or C++ API will often use a database initially defined with the eXtremeDB DDL . Java, C# and Python applications will define database classes and indexes using the native ...",t:"SQL Data Definition Language"},"121":{i:0.00709326778938507,u:"../Content/Programming/C/DDL.htm",a:"C/C++ applications require an external database schema defined in the eXtremeDB Data Definition Language (DDL). The schema is compiled to produce a generated API for the database objects defined in the schema which is then linked into the application. Each database has a DDL specification that ...",t:"The eXtremeDB Data Definition Language (DDL)"},"122":{i:0.000269488172926047,u:"../Content/Users_Guides/Changing_Schema.htm",a:"Changing the database schema after an initial implementation is common during the development stages and may be necessary after application deployment.  The technique for altering the database schema and programming considerations vary depending on the APIs used to access the database. It is ...",t:"Changing the Database Schema"},"123":{i:0.000144092630427826,u:"../Content/Users_Guides/Core/Schema_Features.htm",a:"As mentioned in the  Schema Definition page, eXtremeDB provides a number of specific data storage capabilities. These features are described briefly below. For more a detailed description please use the associated links: transient or persistent classes : The database designer specifies whether ...",t:"eXtremeDB Database Features"},"124":{i:0.000129287605866274,u:"../Content/Users_Guides/Core/Features/Transient_Persistent.htm",a:"A transient database object exists only as long as an application has an open connection to the database. All transient objects disappear when the application shuts down the database. An in-memory database will contain only transient objects, i.e. objects that reside in memory only for the duration ...",t:"Transient or Persistent Database Objects"},"125":{i:0.000252038686436829,u:"../Content/Users_Guides/Core/Features/Dynamic_Fields.htm",a:"eXtremeDB supports both \"fixed size\" fields such as int, float date, etc. and also dynamic or \"variable size\" fields of type string, vector, varbinary, sequence and optional struct . The latter are dynamically extendable, i.e. they can be created, enlarged and reduced in size during runtime. These ...",t:"Dynamic Fields"},"126":{i:0.000773443667112469,u:"../Content/Users_Guides/Core/Features/Autocompaction.htm",a:"If a class contains dynamically extended components (i.e. fields of type string, vector, varbinary and sequence), an object of this class that is frequently updated can develop memory holes. To prevent this kind of fragmentation, an automatic de-fragmentation (auto_compact mode) feature is provided ...",t:"Automatic De-fragmentation of Dynamic Database Objects"},"127":{i:0.000722056689301806,u:"../Content/Users_Guides/Core/Features/Optional_Structures.htm",a:"  A struct in eXtremeDB terminology, is a collection of data elements grouped together that can be designated as a field of a class. An optional declaration means that the field may or may not be actually stored in the database, the eXtremeDB  runtime does not allocate memory for optional struct  ...",t:"Optional Structures"},"128":{i:0.000556106007220792,u:"../Content/Users_Guides/Core/Features/Direct_Structures.htm",a:"Direct structures (generated by specifying the optional direct keyword) are an efficient optimization for C and C++ applications that can be applied to fixed sized class layouts; i.e. data  layouts within a  class  without any dynamic objects (i.e. objects with fields of type string, rect, vector, ...",t:"Direct Structures"},"129":{i:0.000223826726525772,u:"../Content/Users_Guides/Core/Features/Nullable_Fields.htm",a:"eXtremeDB supports nullable fields, i.e. fields that have no value. Fields that are declared nullable have a null indicator associated with them which, when set, indicates that the field has no value. When a value is assigned the null indicator is cleared to indicate that the field now has a value. ...",t:"Nullable Database Fields"},"130":{i:0.000129287605866274,u:"../Content/Users_Guides/Core/Features/Voluntary_Indexes.htm",a:"With eXtremeDB, the only way to access database objects is via an index or indexes. Normally the indexes are populated and updated in the course of normal database put operations. However, the voluntary  qualifier for an index is provided to indicate that the index can be initiated or dropped at ...",t:"Voluntary Indexes"},"131":{i:0.000129287605866274,u:"../Content/Users_Guides/Core/Features/Object_Identifiers.htm",a:"In C and C++ applications, an oid can be declared for the database and used to quickly retrieve the object it identifies. The oid values are assigned by the applications but must be unique within all classes in the database and uniqueness is enforced during object creation by the eXtremeDB  runtime. ...",t:"Unique Database Object Identifiers"},"132":{i:0.000129287605866274,u:"../Content/Users_Guides/Core/Features/Events.htm",a:"Event statements declare the events that the application will be notified of, such as: adding a new object, deleting an object, updating an object or a specified field of an object (with the exception of array, vector and blob fields and elements of inner structures), and checkpoint events. ...",t:"Database Events"},"133":{i:0.000249232981752462,u:"../Content/Users_Guides/Core/Features/Collations.htm",a:"C and C++ applications include support for custom collations. In some character sets, multiple-character combinations like “AE” (“labor lapsus” in the Danish and Norwegian alphabets or “ash” in Old-English) and “OE” (an alternate form of “Ö” or “O-umlaut” in the German alphabet) are treated as ...",t:"Custom Collations"},"134":{i:0.000229905784983589,u:"../Content/Users_Guides/Core/Features/Case_Sensitivity.htm",a:"When sorting ASCII strings, the alphabetic order of strings is by default case-sensitive.  If it is important to order rows by case-insensitive character comparison, i.e. where the lowercase and uppercase letters in the same position are sorted equally, the case_insensitive or ignore_case keywords ...",t:"eXtremeDB Case Sensitivity"},"135":{i:0.000683438555692396,u:"../Content/Users_Guides/Core/Features/Binary_Schema_Evolution.htm",a:"“Binary schema evolution” (BSE) is a feature that allows an application to alter the database schema of a stored database image to a new definition contained in the dictionary of the currently running application. Supported schema changes include: Adding new classes Dropping classes Adding new ...",t:"Binary Schema Evolution"},});