DROP TABLE IF EXISTS datapoints;
DROP TABLE IF EXISTS result;

CREATE TABLE datapoints (time TIMESTAMP, a0 DOUBLE PRECISION, a1 DOUBLE PRECISION, a2 DOUBLE PRECISION, a3 DOUBLE PRECISION, a4 DOUBLE PRECISION, a5 DOUBLE PRECISION, a6 DOUBLE PRECISION, a7 DOUBLE PRECISION, a8 DOUBLE PRECISION, a9 DOUBLE PRECISION, a10 DOUBLE PRECISION, a11 DOUBLE PRECISION, a12 DOUBLE PRECISION, a13 DOUBLE PRECISION, a14 DOUBLE PRECISION, a15 DOUBLE PRECISION, a16 DOUBLE PRECISION, a17 DOUBLE PRECISION, a18 DOUBLE PRECISION, a19 DOUBLE PRECISION, a20 DOUBLE PRECISION, a21 DOUBLE PRECISION, a22 DOUBLE PRECISION, a23 DOUBLE PRECISION, a24 DOUBLE PRECISION, a25 DOUBLE PRECISION, a26 DOUBLE PRECISION, a27 DOUBLE PRECISION, a28 DOUBLE PRECISION, a29 DOUBLE PRECISION, a30 DOUBLE PRECISION, a31 DOUBLE PRECISION, a32 DOUBLE PRECISION, a33 DOUBLE PRECISION, a34 DOUBLE PRECISION, a35 DOUBLE PRECISION, a36 DOUBLE PRECISION, a37 DOUBLE PRECISION, a38 DOUBLE PRECISION, a39 DOUBLE PRECISION, a40 DOUBLE PRECISION, a41 DOUBLE PRECISION, a42 DOUBLE PRECISION, a43 DOUBLE PRECISION, a44 DOUBLE PRECISION, a45 DOUBLE PRECISION, a46 DOUBLE PRECISION, a47 DOUBLE PRECISION, a48 DOUBLE PRECISION, a49 DOUBLE PRECISION, a50 DOUBLE PRECISION, a51 DOUBLE PRECISION, a52 DOUBLE PRECISION, a53 DOUBLE PRECISION, a54 DOUBLE PRECISION, a55 DOUBLE PRECISION, a56 DOUBLE PRECISION, a57 DOUBLE PRECISION, a58 DOUBLE PRECISION, a59 DOUBLE PRECISION, a60 DOUBLE PRECISION, a61 DOUBLE PRECISION, a62 DOUBLE PRECISION, a63 DOUBLE PRECISION, a64 DOUBLE PRECISION, a65 DOUBLE PRECISION, a66 DOUBLE PRECISION, a67 DOUBLE PRECISION, a68 DOUBLE PRECISION, a69 DOUBLE PRECISION, a70 DOUBLE PRECISION, a71 DOUBLE PRECISION, a72 DOUBLE PRECISION, a73 DOUBLE PRECISION, a74 DOUBLE PRECISION, a75 DOUBLE PRECISION, a76 DOUBLE PRECISION, a77 DOUBLE PRECISION, a78 DOUBLE PRECISION, a79 DOUBLE PRECISION, a80 DOUBLE PRECISION, a81 DOUBLE PRECISION, a82 DOUBLE PRECISION, a83 DOUBLE PRECISION, a84 DOUBLE PRECISION, a85 DOUBLE PRECISION, a86 DOUBLE PRECISION, a87 DOUBLE PRECISION, a88 DOUBLE PRECISION, a89 DOUBLE PRECISION, a90 DOUBLE PRECISION, a91 DOUBLE PRECISION, a92 DOUBLE PRECISION, a93 DOUBLE PRECISION, a94 DOUBLE PRECISION, a95 DOUBLE PRECISION, a96 DOUBLE PRECISION, a97 DOUBLE PRECISION, a98 DOUBLE PRECISION, a99 DOUBLE PRECISION, b0 DOUBLE PRECISION, b1 DOUBLE PRECISION, b2 DOUBLE PRECISION, b3 DOUBLE PRECISION, b4 DOUBLE PRECISION, b5 DOUBLE PRECISION, b6 DOUBLE PRECISION, b7 DOUBLE PRECISION, b8 DOUBLE PRECISION, b9 DOUBLE PRECISION, b10 DOUBLE PRECISION, b11 DOUBLE PRECISION, b12 DOUBLE PRECISION, b13 DOUBLE PRECISION, b14 DOUBLE PRECISION, b15 DOUBLE PRECISION, b16 DOUBLE PRECISION, b17 DOUBLE PRECISION, b18 DOUBLE PRECISION, b19 DOUBLE PRECISION, b20 DOUBLE PRECISION, b21 DOUBLE PRECISION, b22 DOUBLE PRECISION, b23 DOUBLE PRECISION, b24 DOUBLE PRECISION, b25 DOUBLE PRECISION, b26 DOUBLE PRECISION, b27 DOUBLE PRECISION, b28 DOUBLE PRECISION, b29 DOUBLE PRECISION, b30 DOUBLE PRECISION, b31 DOUBLE PRECISION, b32 DOUBLE PRECISION, b33 DOUBLE PRECISION, b34 DOUBLE PRECISION, b35 DOUBLE PRECISION, b36 DOUBLE PRECISION, b37 DOUBLE PRECISION, b38 DOUBLE PRECISION, b39 DOUBLE PRECISION, b40 DOUBLE PRECISION, b41 DOUBLE PRECISION, b42 DOUBLE PRECISION, b43 DOUBLE PRECISION, b44 DOUBLE PRECISION, b45 DOUBLE PRECISION, b46 DOUBLE PRECISION, b47 DOUBLE PRECISION, b48 DOUBLE PRECISION, b49 DOUBLE PRECISION, b50 DOUBLE PRECISION, b51 DOUBLE PRECISION, b52 DOUBLE PRECISION, b53 DOUBLE PRECISION, b54 DOUBLE PRECISION, b55 DOUBLE PRECISION, b56 DOUBLE PRECISION, b57 DOUBLE PRECISION, b58 DOUBLE PRECISION, b59 DOUBLE PRECISION, b60 DOUBLE PRECISION, b61 DOUBLE PRECISION, b62 DOUBLE PRECISION, b63 DOUBLE PRECISION, b64 DOUBLE PRECISION, b65 DOUBLE PRECISION, b66 DOUBLE PRECISION, b67 DOUBLE PRECISION, b68 DOUBLE PRECISION, b69 DOUBLE PRECISION, b70 DOUBLE PRECISION, b71 DOUBLE PRECISION, b72 DOUBLE PRECISION, b73 DOUBLE PRECISION, b74 DOUBLE PRECISION, b75 DOUBLE PRECISION, b76 DOUBLE PRECISION, b77 DOUBLE PRECISION, b78 DOUBLE PRECISION, b79 DOUBLE PRECISION, b80 DOUBLE PRECISION, b81 DOUBLE PRECISION, b82 DOUBLE PRECISION, b83 DOUBLE PRECISION, b84 DOUBLE PRECISION, b85 DOUBLE PRECISION, b86 DOUBLE PRECISION, b87 DOUBLE PRECISION, b88 DOUBLE PRECISION, b89 DOUBLE PRECISION, b90 DOUBLE PRECISION, b91 DOUBLE PRECISION, b92 DOUBLE PRECISION, b93 DOUBLE PRECISION, b94 DOUBLE PRECISION, b95 DOUBLE PRECISION, b96 DOUBLE PRECISION, b97 DOUBLE PRECISION, b98 DOUBLE PRECISION, b99 DOUBLE PRECISION);
CREATE TABLE result (time TIMESTAMP, d DOUBLE PRECISION);

CREATE OR REPLACE FUNCTION get_time() RETURNS FLOAT
LANGUAGE PYTHON
{
        from datetime import datetime
        return (datetime.now() - datetime(1970, 1, 1)).total_seconds()
};

-- Writing data *************************************************************************************
DECLARE initial_time FLOAT;
DECLARE final_time FLOAT;

SET initial_time = get_time();
COPY INTO datapoints FROM '/home/gabi/Thesis-master/Datasets/synthetic.txt.csv' USING DELIMITERS ',','\n';
SET final_time = get_time();
-- Writing data *************************************************************************************

-- KNN *******************************************************************************************
DECLARE initial_time_knn FLOAT;
DECLARE final_time_knn FLOAT;

SET initial_time_knn = get_time();
INSERT INTO result SELECT time, SQRT(POWER(a0 - b0, 2) + POWER(a1 - b1, 2) + POWER(a2 - b2, 2) + POWER(a3 - b3, 2) + POWER(a4 - b4, 2) + POWER(a5 - b5, 2) + POWER(a6 - b6, 2) + POWER(a7 - b7, 2) + POWER(a8 - b8, 2) + POWER(a9 - b9, 2) + POWER(a10 - b10, 2) + POWER(a11 - b11, 2) + POWER(a12 - b12, 2) + POWER(a13 - b13, 2) + POWER(a14 - b14, 2) + POWER(a15 - b15, 2) + POWER(a16 - b16, 2) + POWER(a17 - b17, 2) + POWER(a18 - b18, 2) + POWER(a19 - b19, 2) + POWER(a20 - b20, 2) + POWER(a21 - b21, 2) + POWER(a22 - b22, 2) + POWER(a23 - b23, 2) + POWER(a24 - b24, 2) + POWER(a25 - b25, 2) + POWER(a26 - b26, 2) + POWER(a27 - b27, 2) + POWER(a28 - b28, 2) + POWER(a29 - b29, 2) + POWER(a30 - b30, 2) + POWER(a31 - b31, 2) + POWER(a32 - b32, 2) + POWER(a33 - b33, 2) + POWER(a34 - b34, 2) + POWER(a35 - b35, 2) + POWER(a36 - b36, 2) + POWER(a37 - b37, 2) + POWER(a38 - b38, 2) + POWER(a39 - b39, 2) + POWER(a40 - b40, 2) + POWER(a41 - b41, 2) + POWER(a42 - b42, 2) + POWER(a43 - b43, 2) + POWER(a44 - b44, 2) + POWER(a45 - b45, 2) + POWER(a46 - b46, 2) + POWER(a47 - b47, 2) + POWER(a48 - b48, 2) + POWER(a49 - b49, 2) + POWER(a50 - b50, 2) + POWER(a51 - b51, 2) + POWER(a52 - b52, 2) + POWER(a53 - b53, 2) + POWER(a54 - b54, 2) + POWER(a55 - b55, 2) + POWER(a56 - b56, 2) + POWER(a57 - b57, 2) + POWER(a58 - b58, 2) + POWER(a59 - b59, 2) + POWER(a60 - b60, 2) + POWER(a61 - b61, 2) + POWER(a62 - b62, 2) + POWER(a63 - b63, 2) + POWER(a64 - b64, 2) + POWER(a65 - b65, 2) + POWER(a66 - b66, 2) + POWER(a67 - b67, 2) + POWER(a68 - b68, 2) + POWER(a69 - b69, 2) + POWER(a70 - b70, 2) + POWER(a71 - b71, 2) + POWER(a72 - b72, 2) + POWER(a73 - b73, 2) + POWER(a74 - b74, 2) + POWER(a75 - b75, 2) + POWER(a76 - b76, 2) + POWER(a77 - b77, 2) + POWER(a78 - b78, 2) + POWER(a79 - b79, 2) + POWER(a80 - b80, 2) + POWER(a81 - b81, 2) + POWER(a82 - b82, 2) + POWER(a83 - b83, 2) + POWER(a84 - b84, 2) + POWER(a85 - b85, 2) + POWER(a86 - b86, 2) + POWER(a87 - b87, 2) + POWER(a88 - b88, 2) + POWER(a89 - b89, 2) + POWER(a90 - b90, 2) + POWER(a91 - b91, 2) + POWER(a92 - b92, 2) + POWER(a93 - b93, 2) + POWER(a94 - b94, 2) + POWER(a95 - b95, 2) + POWER(a96 - b96, 2) + POWER(a97 - b97, 2) + POWER(a98 - b98, 2) + POWER(a99 - b99, 2)) FROM datapoints;
SET final_time_knn = get_time();

SELECT final_time_knn - initial_time_knn as Time_seconds;
-- KNN *******************************************************************************************

--SELECT * FROM datapoints;
--SELECT * FROM result;
